$13A =: HERE    $3E2 =: !       $235 =: ;`      $10C =: EMIT    $22F =: :
$27D =: =,      $215 =: C@      $273 =: ;HERE   $424 =: C!+   : C, ;HERE C!+ ;
$209 =: +       $207 =: -
HERE  $4B C,   HERE  $4B C,  $EB C,  $4F4 2 +  HERE 1 + - C,  =, 1-  =, 2-

$259 =: ,       $1AC =: DROP;   $1EA =: DUP     $1FD =: ,<`     $48B =: >,
$29D =: WORD    $48D =: #DOES   $1F8 =: @
HERE $E8 C, #DOES HERE 2 + - ,  >, C@ WORD DROP; ,<  DUP =, \ 0 C,  =, { '} C,
$2BB =: #??     $3FE =, AND     $299 =: TOKEN?  $221 =: FIND
: ' TOKEN? FIND 1 AND #?? ;     : LIKE ' @ ;    : ,' ' , ;

\ HERE : CR 13 EMIT 10 EMIT ; $11A !   HERE : ER '? EMIT '? EMIT ; $11E !
$130 =: bl              \ RETURNS ASCII CODE OF SPACE CHARACTER
$24B =: SKIP    $1A8 =: ;DROP   $245 =: (NEXT   $4B1 =: (FOR    $247 =: RDROP
$444 =: PUSH    $47F =: EXECUTE $241 =: J       $20B =: STR        \ _WSTR
$1DD =: (ASTR   \ _ASTR - STRING PRIMITIVE
$219 =: CSTR    \ _CSTR - CSTRING > COUNT ADDRESS
$194 =: (A"     \ _ABORT?  IF 0 <>  ->  TYPES WORD  TYPES "ERROR" & ABORTS
$1FF =:  3+        \ _3P
$152 =: CNTC    \ _CNTC   - COUNT OF EMITTED CHARS ON OUTPUT STREEM
$118 =: vOK.    \ _OK     - VECTORED RESPONCE OF THE SYSTEM IF NO ERROR
$1C2 =:  ;DPUSH    \ _XDPUSH
$11C =: vERR       \ _ERROR  - DEFER ERROR
$128 =: TBUF       \ _TBUF
$24D =: ABORT      \ _ABORT
$158 =: STATE      \ _STAT
$14C =: DICT       \ _DICT
$253 =: POP        \ _POP
$27F =: =H         \ _ENTRYH
$487 =: @EXEC      \ _PERFORM
$12C =:  0         \ _0
$2BD =:  ??        \ _??
$39D =: (DE        \ _@EMIT
$1AE =:  @_INI     \ _@_INI
$4E6 =:  ABS       \ _ABS
$38B =: (ACC       \ _ACC
$114 =:  ACCEPT    \ _ACCEPT
$23B =:  #,`       \ _CLIT
$2D0 =: (,EX       \ _COMMAER
$261 =:  NUM,      \ _COMP_NUM
$212 =:  .C@       \ _DLDB
$1C4 =: >DICT      \ _DPUSH
$203 =:  DROP      \ _DROP
$4C2 =:    (#IF    \ _DUP_IF
$140 =:  ETIB      \ _ETIB
$178 =:  EVAL      \ _EVAL
$251 =:  EX        \ _EX
$483 =:  EXEC      \ _EXEC
$24F =:  EXIT      \ _EXIT
$3A9 =: (FND       \ _FND
$4C8 =: (IF        \ _IF
$134 =: vINIT      \ _INIT
$249 =: (JUMP      \ _JUMP
$1F2 =:  LIT       \ _LIT
$146 =:  LTIB      \ _LTIB
$36D =: (MPUSH     \ _MPUSH
$37A =: (S!        \ _MSTR
$255 =:  NIP;      \ _NIPX
$362 =: (NUM       \ _NUM
$269 =:  NUMBER    \ _NUMBER
$102 =:  OPER[]    \ _OPERATION
$205 =:  OVER      \ _OVER
$33E =: (PARS      \ _PARS
$29F =:  PARSE     \ _PARSE
$1D7 =: @R+        \ _RLDP
$110 =:  SOURCE    \ _SOURCE
$42A =:  !+        \ _STP
$201 =:  SWAP      \ _SWAP
$120 =:  TBL       \ _TBL
$124 =:  TIB       \ _TIB
$29B =:  TOKEN     \ _TOKEN
$1E5 =:  XCHG      \ _XCHG
$257 =:  ;COMMA    \ _XCOMMA
$2B1 =:  ;SETSTR   \ _XSETSTR
$2B9 =:  ;TOK?     \ _XTOK?
$4EF =:  0=        \ _ZEQ
$4B8 =:  0?SKIP    \ _ZSKIP

\ ----------------------------

$4EB =: `NOT
$4E3 =: `1P
$42F =: `1P_NIP
$462 =: `2DROP
$461 =: `2DROPX
$4E2 =: `2P
$42E =: `2P_NIP
$4E1 =: `3P
$165 =: `ABORT
$1AA =: `ABORTX
$3FA =: `ADD
$411 =: `ADR
$4F4 =: `CF
$491 =: `DOES
$490 =: `DOES2
$48F =: `DOES3
$182 =: `DOEVAL
$3A2 =: `DOS_DX
$41D =: `DROP
$416 =: `DROPX
$496 =: `EX
$472 =: `EXEC
$4CA =: `IF
$4CF =: `JUMP
$4CC =: `JUMPDR
$498 =: `LBL
$21C =: `LDB
$49A =: `MAIN
$16E =: `MAINLP
$4EA =: `NEG
$497 =: `NEST
$47D =: `NEST2
$47C =: `NEST3
$47B =: `NEST4
$47A =: `NEST5
$4D3 =: `NEXT
$41F =: `NIP
$431 =: `NIPX
$2E6 =: `NUM
$3F1 =: `OVER
$3F2 =: `POP
$441 =: `PUSHW
$440 =: `PUSHW2
$43F =: `PUSHW3
$386 =: `PUSH_DC
$3AE =: `PUSH_SC
$4DE =: `RDROP
$499 =: `RETURN
$3EC =: `ROT
$1CF =: `SETDROP
$4BF =: `SKIP
$4BC =: `SKIPDR
$3F8 =: `SUB
$4DB =: `SWAP
$4DA =: `SWAPX
$1D1 =: `TOPDROP
$1EC =: `TOPDUP
$401 =: `XOR
$3E7 =: `_1M
$3E6 =: `_2M
$4AD =: `_BARY
$44B =: `_CALL
$2DA =: `_COMMA
$40C =: `_CONS
$40B =: `_CONS2
$40A =: `_CONS3
$470 =: `_DEFER
$46F =: `_DEFER2
$46E =: `_DEFER3
$468 =: `_DEFERO
$1CE =: `_DROP
$448 =: `_DUP
$405 =: `_IJ
$4A9 =: `_LARY
$2DF =: `_MAKER
$450 =: `_PARAM1
$453 =: `_PARAM2
$456 =: `_PARAM3
$4A0 =: `_POINT
$434 =: `_RLD@
$439 =: `_RST@
$4A5 =: `_SETPNT
$41B =: `_SETVAR
$41A =: `_SETVAR2
$419 =: `_SETVAR3
$2C9 =: `_STATE
$3E8 =: `_TOP?
$3F5 =: `_VAR2
$3F4 =: `_VAR3
$4AB =: `_WARY
$40E =: `_VAR

\ -------------------------------------------------------------

\ HERE : CR 13 EMIT 10 EMIT ;     $11A !
\ HERE : ERR '? EMIT '? EMIT '? EMIT ;     $11E !

LIKE ;` =, :` ,' SKIP ,' :       \ ":" - NOW DEFINES WORDS ON COMPILE STATE
' `2P  =, 2+            ' `1P  =, 1+  \ : C,R HERE 1+ - C, ;
HERE $E8 C, #DOES HERE    2+ - , >, C@ C, ;
DUP =, #CAL, $E8 ,    DUP =, #JMP, $E9 ,    DUP =, JMPS, $EB ,  =, RET, $C3 ,
: DOES, #DOES           : CALL, #CAL,   : ,R HERE    2+ - , ;

LIKE ! =, U<
$2B C, $DF C, #JMP, ' `CF ,R

: CODE: HERE 2+ =, ;
CODE: 0<  $D1 C, $E3 C, #JMP, ' `CF ,R

LIKE DUP =, U/MOD
$33 C, $C9 C, $91 C, $92 C, $F7 C, $F3 C, $93 C, $91 C, RET,

LIKE DUP =, UM*
$93 C, $F7 C, $E2 C, $92 C, $93 C, RET,

' `XOR =, XOR     ' `NOT =, NOT      : COMPILE @R+ , ;
LIKE :  =, CONST ' `_CONS , ,' , \ CONSTANTS
LIKE :  =, CREATE ' `_VAR ,  0 , \ ONLY ADDRESS NOTHING MORE
: (=) =H COMPILE ,< LIKE ;` , >, , , ;  \ DOERS

: META '
: IS '    2+ ! ;
: TIMES PUSH
: LOOPS (FOR  ,< HERE 10 + , >, J EXECUTE
        (NEXT ,< HERE 6 - , >, RDROP ;          \ LOOPS & TIMES FUNCTIONS

' `NEST3
DUP  =, (."     \ COMPILETIME STRING LITERAL EMITER
DUP  =, ".      \ RUNTIME STRING LITERAL EMITER FUNCTION
=, TYPE  >, (ASTR CSTR ;DROP LOOPS CSTR EMIT ;
: (" (ASTR ;    \ STRING LITERAL

: ALLOT ;HERE + ;
: W, STR , ;    \ READ , COMPILE WORD & POSITION TO NEXT
' \ =: \`       \ COMPILING VERSION
' { =: {`       \ COMPILING VERSION

: LATEST DICT CSTR + @ ;        : ;code POP LATEST ! ;
: RECURCE` LATEST , ;   \ REFERENCE TO SELF IN SAME WORD
LIKE ;` =, DOES>` >, ;code DOES, ,<     \ WE HAVE DOES !

\ CONSTANTS   VARIABLES VALUES  & DEFERS
 16 CONST 1H    '0 CONST '0'    3 CONST 3       1 CONST 1
256 CONST 1B    $FC00 CONST FTOP    255 CONST &BYTE

: 2* DUP + ;
: B>W &BYTE AND ;
: >IP+ NOT 3  AND 2* POP + PUSH ;
: (,) CREATE , DOES> @ , ;              \ commaers  & --V MAKERS
: (:) CREATE DUP C, >IP+ , , , ,'  DOES> CSTR =H >IP+ W, W, W, @EXEC ;

' `_DEFER    1 (:) DEFER ,
' `_SETVAR   ' `_CONS2    2 (:) VALUE ,
' `_SETVAR   ' `_DEFER2   2 (:) VECTOR ,
' `_SETPNT   ' `_POINT    2 (:) POINT  ,
' `_VAR      ' `_SETVAR2  ' `_CONS3   3 (:) QUAN ,

HERE DOES, >, C@ EMIT ;   HERE #DOES 1- CALL, >, C@ ;  2 (:) CONST.C C,
10 CONST.C lf   13 CONST.C cr   8 CONST.C bs  '- CONST.C '-'

\ searching
HERE DOES, >, : (' C@ ' + ;
 DUP =, 'TO  2 C, =, 'AT  4 C,  \ ADDRESS OF XT+2 / XT+4
HERE DOES, >, (' EXEC ; DUP =, TO   2 C,  =, AT  4 C, \ EXECUTES XT+2 / XT+4
HERE DOES, >, (' , ;    DUP =, TO`  2 C,  =, AT` 4 C, \ COMPILES

LIKE ;DPUSH =, ;SPC     \  EMIT SPACE IN THE END OF WORD  __RVAR2 _XSPC
: SPACE bl EMIT ;       \ EMIT BLANK SPACE
: ID. ;SPC ". ;

: CR TO cr  TO lf  0 TO CNTC ;
\ : CR (." ,< 2 C, 13 C, 10 C, >, 0 ,< ' CNTC    2+ , >, ;
\ META  CR vOK.

: (ERR  CR  TBUF ID.  STATE ".  CR ;
META (ERR vERR                  \ SHOW ERROR ROUTINE

\ CONTINUE EXTENDING COMPILER
: DXEP DUP : XEP XCHG EXECUTE POP ;     : (CALL @R+ PUSH ;
-#20 CONST FTOP   FTOP VALUE  FSTACK    : ;FSTACK FSTACK EX TO FSTACK ;
' , =: <RELEASE     : F> FSTACK FTOP XOR #?? ;FSTACK : @+ STR SWAP ;
: >F ;FSTACK : !- 2- DXEP ! ; : <RELEASE> <RELEASE : RELEASE> HERE F> ! ;
: MARK> HERE >F : Z, 0 , ;      : >MARK< MARK>  : <MARK HERE ;
: CASE`  0 >F ;         ' XOR =: <>     : = <> 0= ;

' MARK>      '     (IF (=) IF`                       ' RELEASE> =: THEN`
: (OF OVER <> @R+ SWAP IF XCHG SKIP THEN DROP DROP; ,<
' RELEASE>   ' EXIT    (=) ;THEN`          '              <MARK =: BEGIN`
' >MARK<     '    (FOR (=) FOR`            ' <RELEASE> ' (NEXT (=) NEXT`
' MARK>      '   (CALL (=) CALL`           ' <RELEASE  ' (JUMP (=) AGAIN`
' <RELEASE   '     (IF (=) UNTIL`          ' MARK>     ' (JUMP (=) AHEAD`
' MARK>      '    (#IF (=) #IF`            ' MARK>     ' (OF   (=) OF`

: REPEAT` AGAIN` THEN` ;                ' IF`   =: WHILE`
: ELSE` F> AHEAD` : `ELSE >F THEN` ;    ' ELSE` =: ENDOF`
: ENDCASE`  COMPILE DROP  BEGIN F> #IF `ELSE REPEAT DROP ;

\ STRING COMPILING
: (",)  '"  WORD                        \ PARSE & COMPILE STR
: CSTR, CSTR                            \ COUNTED STRING COMPILE
: STR, ;HERE (S! DROP; ,<               \ ADR COUNT STRING COMPILE

' (",) ' ("   (=) "`    \ STRING LITERALS  COMPILER
' (",) ' (A"  (=) A"`   \ STRING ERROR MESSAGES  COMPILER
' (",) ' (."  (=) ."`   \ STRING LITERALS OUTPUT COMPILER
: @OK ."  Ok" CR ." > " ;
\ META  @OK vOK.

LIKE J  =, I 0 ,        : TWICE I PUSH ;

\ -------------------------------------------------------------
\ NUMOUT
\
: U* UM* DROP; ,<       : W>B &BYTE AND ;       : L>H 1B U* ;
: BB>W  W>B L>H SWAP W>B XOR ;  : W>BB 1B U/MOD ;  : B>HH 1H U/MOD ;
: ALPHA  9 OVER U<  7 AND + '0' + ;           \  7 ALPHA EMIT
: H.  ;SPC  W>BB TWICE  B>HH TWICE    : DIG.  ALPHA EMIT ;
: .   DUP 0< IF TO '-' ABS THEN       : U.    ;SPC
: `U. lf U/MOD 0?SKIP RECURCE DIG. ;

\ -------------------------------------------------------------

: 2DUP OVER OVER ;
' `ROT =, ROT

: WITHIN OVER - PUSH - POP U< ;
0 DEFER KEY

: (AC   { ADR CNT / ADR CNT1 } OVER + PUSH DUP
  BEGIN  KEY     CASE
     cr OF  DUP XCHG DROP  ENDOF
     bs OF  2DUP <>  IF 1- TO bs SPACE  TO bs THEN  ENDOF
     DUP bl 1B WITHIN  IF DUP EMIT SWAP C!+ DUP THEN
              ENDCASE    DUP I =
  UNTIL RDROP OVER - 1 : SPACES LOOPS SPACE ;

LIKE (DE =, (BE
$96 C, $31 C,  $DB C, $B4 C, $E C, $CD C, $10 C, $96 C, RET,

LIKE STR =, (BK
$31 C,  $DB C,  $93 C,  $CD C,  $16 C,  $08 C,  $C0 C,  $74 C,
$02 C,  $30 C,  $E4 C,  $93 C,  RET,

\ -------------------------------------------------------------
0 VALUE _AX     0 VALUE _BX     0 VALUE _CX     0 VALUE _DX     0 VALUE _FR
CODE: (IO
  $88 C,  $1E C,  HERE 12 + ,     $56 C,  $94 C,  $5B C,  $59 C,
  $5F C,  $94 C,  $97 C,  $92 C,  $57 C,  $CD C,  $21 C,  $5F C,
  $97 C,  $94 C,  $52 C,  $51 C,  $53 C,  $57 C,  $9C C,  $94 C,
  #JMP, ' `2DROPX ,R
: REGS _DX _CX _BX _AX ;  : ODD 1 AND ;  0 VALUE _AR  0 VALUE HBLK  0 VALUE BLK
HERE DOES, >, C@  (IO  TO _FR  TO _AX  TO _BX  TO _CX  TO _DX ;
DUP =, (DOS $21 C,  DUP =, (VID $10 C,   =, (KBD $16 C,
HERE DOES, >, @  TO _AX  REGS (DOS _FR ODD A" :IO?" ;
DUP =, `OPEN $3D02 ,    DUP =, `READ  $3F00 ,   DUP =, `SIZE  $4202 ,
DUP =, `WRITE  $4000 ,  DUP =, `POSF  $4200 ,       =, `CLOSE $3E00 ,
\ : =" '"
\ -------------------------------------------------------------

: WDUMP ;DROP LOOPS STR H. ;    0 =, BYE
: PAGE 25 : CRS  LOOPS CR ;     0 VALUE DPTR  0 VALUE ADR  0 VALUE NPTR
: DNEXT DPTR CSTR + @+ TO NPTR ;   : END? DUP TO DPTR C@ ;
: #>ID? TO ADR DICT SKIP BEGIN NPTR END? WHILE DNEXT ADR = UNTIL THEN DPTR C@ ;
: VLIST DICT SKIP BEGIN NPTR END? WHILE DNEXT H. DPTR ID. REPEAT ;

META (BK KEY    META @OK vOK.   META (AC ACCEPT    META (BE  EMIT

