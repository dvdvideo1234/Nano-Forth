\ 1 3 3 3 3 3    NOP +   AND  XOR      DROP PUSH POP  IF        MACRO     \      NOP @+  !+   U2/C     EXIT SWAP DUP  CALL      : ! !+ DROP ; : @ @+ DROP ;    : 2* DUP + ; : NIP SWAP DROP ;   : OVER PUSH DUP  POP SWAP ;    : TUCK  DUP PUSH SWAP POP ;      : ROT  PUSH SWAP POP SWAP ;    : -ROT SWAP PUSH SWAP POP ;      : COUNT @+ SWAP ;  : @R+ POP @+ PUSH ; : !R+ POP !+ PUSH ;      FORTH   : EXECUTE PUSH ;  : #LIT @R+ ;   : #VAR POP ;           : #CONST POP @ ;   : 2/ DUP 2* DROP U2/C ; -32768 CONST #SGN     -1 CONST -1  1 CONST 1  0 CONST 0   : CLC 0 U2/C DROP ;        : U2/ CLC U2/C ; : STC -1 U2/C DROP ;                           : 2SWAP PUSH -ROT POP -ROT ;    : 1+ 1 + ;  : 1- -1 + ;         : INVERT -1 XOR ;  : NEGATE INVERT 1+ ;  : 0= IF 0 ;THEN -1 ;   : +! @+ 1- PUSH + POP ! ; : - NEGATE + ; : #JUMP POP @ PUSH ;   : EX POP POP SWAP PUSH PUSH ;   : OR OVER INVERT AND XOR ;      : 0< #SGN AND DUP IF DROP -1 THEN ; : U< - U2/C 0< ;                                                                            1 3 3 3 3 3    NOP +   AND  XOR      DROP PUSH POP  IF                         NOP @+  !+   LIT      EXIT XCHG DUP  CALL                                                                        MACRO                                                           : SWAP PUSH XCHG POP ;          : NIP PUSH DROP POP ;           : JUMP LIT PUSH ; : ! !+ DROP ; : @ @+ DROP ;                   FORTH                                                           : -ROT PUSH XCHG PUSH XCHG POP POP ;  : EX POP XCHG PUSH ;      : -ROT PUSH PUSH XCHG POP XCHG POP ;                            : -1 -1 ; : 1 1 ;   : 0 0 ;   : 1+ 1 + ;  : 1- -1 + ;           : INVERT -1 XOR ;   : NEGATE INVERT 1+ ;  : - NEGATE + ;        : EXECUTE  PUSH ;   : OVER PUSH DUP XCHG POP ;                  : TUCK DUP PUSH XCHG POP POP ;  : OR OVER INVERT AND XOR ;                                                                                                                                                                                                      1 3 3 3 3 3    NOP +   AND  XOR      DROP PUSH POP  IF                         NOP @+  !+   LIT      EXIT OVER DUP  CALL                                                                        MACRO                                : NIP PUSH DROP POP ;      : JUMP LIT PUSH ; : ! !+ DROP ; : @ @+ DROP ;                   FORTH                                                           : SWAP OVER PUSH PUSH DROP POP POP ;                            : -ROT PUSH XCHG PUSH XCHG POP POP ;  : EX POP XCHG PUSH ;      : -ROT PUSH PUSH XCHG POP XCHG POP ;                            : -1 -1 ; : 1 1 ;   : 0 0 ;   : 1+ 1 + ;  : 1- -1 + ;           : INVERT -1 XOR ;   : NEGATE INVERT 1+ ;  : - NEGATE + ;        : EXECUTE  PUSH ;   : OVER PUSH DUP XCHG POP ;                  : TUCK DUP PUSH XCHG POP POP ;  : OR OVER INVERT AND XOR ;                                                                                                                                                                                                      \ J +2/ NAND PUSH POP DUP IF @+ !+ EXIT XCHG CALL 1- -IF LIT JMPMACRO : INVERT DUP NAND ; : AND NAND INVERT ; : &SIGN -32768 AND; : &LO 255 AND ; : &HI -256 AND ; : SWAP PUSH XCHG POP ;       : DROP IF THEN ; : + +2/ DROP ; : 2* DUP + ; : @ @+ DROP ;      : STR @+ SWAP ; : OVER PUSH DUP XCHG POP ;   : ! !+ DROP ;      : RDROP POP DROP ; : NEGATE 1- INVERT ; : 2DROP AND DROP ;      FORTH : #VAR POP ; : 2/ 0 +2/ NIP ; : I J ; : NIP SWAP DROP ;   : EX POP XCHG PUSH ; : EXECUTE PUSH ;  : ;2DROP EX 2DROP ;      : #CONST POP @ ; : OR INVERT PUSH INVERT POP NAND ;             : #FOR XCHG STR PUSH PUSH ; : TIMES FOR J EXECUTE NEXT RDROP ;  : MOVE ;2DROP TIMES PUSH STR POP !+ ; : CSTR @+ 1- SWAP W>B ;   : C!+ DUP PUSH @ HIW SWAP W>B OR POP !+ 1- ; : C@+ CSTR SWAP ;  : CMOVE ;2DROP TIMES PUSH CSTR POP C!+ ; : 0= IF 0 ;THEN 1- ;   : U< SWAP INVERT +2/ NIP 0< ;  : 0< &SIGN -IF 16383 OR THEN ;   : XOR PUSH DUP PUSH J NAND DUP XCHG NAND POP POP NAND NAND ;                                                                    : XOR PUSH DUP PUSH J NAND XCHG I NAND POP POP NAND NAND ;      : OR OVER INVERT AND XOR ;                                                                                                      : INVERT DUP NAND ; : AND NAND INVERT ;                         : OR INVERT PUSH INVERT POP NAND ;                              : XOR 2DUP NAND PUSH OR POP AND ;                               : XOR PUSH DUP PUSH J NAND POP POP OR AND ;                                                                                     : XOR PUSH DUP PUSH J NAND DUP XCHG NAND POP POP NAND NAND ;                                                                    : XOR OVER OVER NAND TUCK NAND PUSH NAND POP NAND ;             : XOR OVER OVER NAND DUP PUSH NAND XCHG NAND POP NAND ;         : XOR 2DUP NAND TUCK NAND PUSH NAND POP NAND ;                  : XOR PUSH DUP I NAND DUP XCHG MAND POP NAND NAND ;                                                                                                                                             OVER +2/ AND XOR PUSH POP DUP IF @+ !+ C!+ EXIT XCHG -IF LIT JMPMACRO : INVERT -1 XOR ; : &SIGN -32768 AND ; : I POP DUP PUSH ; ; : DROP IF THEN ; : + +2/ DROP ; : 2* DUP + ; : @ @+ DROP ;      : &LO 255 AND ; : &HI -256 AND ; : SWAP PUSH XCHG POP ;       : 1- -IF THEN ; : 2DUP OVER OVER ; : J POP I PUSH XCHG ;        : STR @+ SWAP ;  : ! !+ DROP ;  : NIP OVER XOR XOR ;            : RDROP POP DROP ; : 2DROP AND DROP ;  FORTH : #VAR POP ;       : 2/ 0 +2/ NIP ; : 0< &SIGN DUP IF 16383 XOR THEN ;             : U< SWAP INVERT +2/ NIP 0< ; : EX POP XCHG PUSH ;              : EXECUTE PUSH ;  : ;2DROP EX 2DROP ; : CSTR @+ 1- SWAP W>B ;   : #CONST POP @ ; : OR INVERT PUSH AND XOR ; : NEGATE 1- INVERT ; : #FOR XCHG STR PUSH PUSH ; : TIMES FOR J EXECUTE NEXT RDROP ; : MOVE ;2DROP TIMES PUSH STR POP !+ ;  : 0= IF 0 ;THEN 1- ;     : C@+ CSTR SWAP ; : CMOVE ;2DROP TIMES PUSH CSTR POP C!+ ;                                                                                                                                      