$441A ENTRY CODE,
$4377 CODE, BRP.  $CC C, $C3 C,
$4400 ENTRY ;`
BRP.
$4406 ENTRY :
$428A ENTRY PARSE
$433C CODE, 2DROP  $C3 C,
: ( 41 PARSE 2DROP ;    ( COMMENT )
BRP.
$43D2 ENTRY @
$411D ENTRY 0           ( CONSTANT ZERO)
$440C ENTRY ,           ( BASE COMPILER )
$44A0 ENTRY '           ( TICK -> FINDER)
$430D CODE, NOP         ( ADRESS OF MAIN LOOP)

BRP.
$44AC CODE, TO  2 ,     ( TO TO` AT AT` -> VALUE & QUAN OPERATIONS)
' TO     ENTRY  TO`
LIKE TO  ENTRY  AT  4 ,
' AT     ENTRY  AT`

BRP.
: LIKE ' @ ;            ( GET BEHAVIER OF THE WORD)
: ', ' , ;              ( COMPILE NEXT WORD)
: 0, 0 , ;              ( COMPILE ZERO)

$4121 ENTRY bl          ( FIRST CONSTANT -> A SPACE)
LIKE :  CODE, CREATE    $4303   , ] NOP [
LIKE :  CODE, VARIABLE  $4303   , ] 0,  [
LIKE :  CODE, CONSTANT  LIKE bl , ] ,   [ ( LIKE A SPACE)

13 CONSTANT cr
10 CONSTANT lf
 8 CONSTANT bs
16 CONSTANT 1H

$4151 ENTRY CNTC                  ( COUNT OF CHARS EMITTED)
: CR cr EMIT lf EMIT 0 TO CNTC ;  ( DO NEW LINE TO OUTPUT)

($43E9 ENTRY (#          ( LITERAL NUMBER  / DECOMPILER )
$43E1 ENTRY 0=          ( 0 | -1 / ? | 0)
$43ED ENTRY >EVAL       ( A C -> A+C -C )
$43F4 ENTRY -
$43F6 ENTRY +
($43F8 ENTRY (#+         ( LITERAL ADDITION / DECOMPILER )
$437E CODE, 2-
$437F CODE, 1-
$4384 CODE, 2+
$4385 CODE, 1+
$4376 CODE, U<      $29 C, $D8 C, $19 C, $DB C, $C3 C,
$4377 CODE, 2*      $D1 C, $E3 C, $C3 C,
$4376 CODE, AND     $23 C, $D8 C, $C3 C,
$4376 CODE, OR      $0B C, $D8 C, $C3 C,
$4376 CODE, XOR     $33 C, $D8 C, $C3 C,
$4377 CODE, NOT     $F7 C, $D3 C, $C3 C,
$4377 CODE, NEG     $F7 C, $DB C, $C3 C,
$4324 CODE, UM/MOD  $F7 C, $F3 C, $8B C, $DA C, $C3 C,
$4325 CODE, UM*     $F7 C, $E3 C, $8B C, $DA C, $C3 C,
$4326 CODE, 0SWAP   $33 C, $C0 C, $C3 C,
: U/MOD 0SWAP UM/MOD ;

$416B ENTRY HERE        ( ADDRESS TO COMPILE TO)
$4125 ENTRY SBUF        ( ADDRESS OF LAST TOKEN / OR STRING)
$413F ENTRY (SRCH       ( VECTOR TO SEARCH ROUTINE)
$4129 ENTRY ACCEPT      ( DEFFERED ACCEPT)
$412D ENTRY ERROR       ( DEFFERED ERROR)
$4135 ENTRY EMIT        ( DEFFERED EMIT)
$4139 ENTRY KEY         ( DEFFERED KEY)
$4131 ENTRY OKv         ( DEFFERED OK )
$4145 ENTRY >IN         ( OFFSET TO END OF TEXT BUFFER)
$414B ENTRY TIB<        ( END OF TEXT BUFFER)
$4157 ENTRY TIB         ( START OF TEXT BUFFER)
$415D ENTRY LAST        ( ADDRES OF WORD BEFORE LATEST)
$4163 ENTRY CSTK        ( COMPILER STACK | HOLD POINTER)
$4173 ENTRY LATEST      ( ADDRESS OF LATEST DEFINED WORD)

$41DF ENTRY S!-         ( ADR CNT TOADR | TOADR-CNT-1)
$41E8 ENTRY S!          ( ADR CNT TOADR | TOADR )
$41FC ENTRY S+C!        ( TOADR CH | TOADR )
$43B6 ENTRY CSTR        ( ADR | ADR+1 CH )
$43DA ENTRY STR         ( ADR | ADR+2 W )

$41A4 ENTRY (EVAL       ( ADR CNT / EXECUTE TEXT )
$4208 ENTRY TOKEN       ( CH | ADR CNT )
$422E ENTRY (NUMBER

$42DB ENTRY #DZ         ( ADDRES OF (DOES)

$4394 ENTRY (DA         ( DOS ACCEPT)
$43A6 ENTRY (DE         ( DOS EMIT)
$43AE ENTRY (DK         ( DOS KEY)

$43BA ENTRY C@.         ( ADR | CH ADR )
$43C4 ENTRY C!-
$43C8 ENTRY C!

$43C0 ENTRY !-          ( W ADR | ADR-2 / STORE W ON ADR-2)
$43C2 ENTRY !+          ( W ADR | ADR+2 / STORE W ON ADR)
$43D7 ENTRY @+
$43CD ENTRY !

: C, AT HERE !+ 1- ;

$4308 CODE, SWAP  $93 C, C3,
$43FA ENTRY DROP
$43FC ENTRY POP
$43FE ENTRY PUSH  ( $4334 CODE, DROP;)
$4377 CODE, XCHG  $87 C, $5E C, 0 C, $C3 C,
$4338 CODE, RDROP
$431D CODE, ?DUP
$4321 CODE, DUP
$4309 CODE, I     $8B C, $46 C,   0 C, $C3 C,
$4309 CODE, J     $8B C, $46 C,   2 C, $C3 C,
$4316 CODE, OVER  $93 C, $89 C, $D9 C, $C3 C,

$4414 ENTRY (#,
$443A ENTRY (NUM,

$4369 CODE, (NXT
$435B CODE, (FOR
$4444 ENTRY (0BR
$4446 ENTRY (BR
$42EB CODE, (CAL
$434B CODE, (OF
$4348 CODE, (SKP
$4442 ENTRY @XPE
$4448 ENTRY EXEC
$444A ENTRY @EXEC
$444C ENTRY ;;
$444E ENTRY 0;
$4377 CODE, EX    $87 C, $76 C, 0 C, $C3 C,



$4454 ENTRY [`
$4461 ENTRY ]
$4456 ENTRY FIND
$4463 ENTRY FINDC
$44BF ENTRY (NUM
$44CB ENTRY QUIT
$44CD ENTRY (ERR
$44CF ENTRY <>0?
$44D1 ENTRY =0?
$44E1 ENTRY (INIT

: IS ' 2+ ! ;
' CR IS OKv

: >CS  AT CSTK !- ;
: CS>  AT CSTK @+ ;
: HOLD AT CSTK C!- ;
: UNHOLD AT CSTK CSTR SWAP ;
: W>BB >CS UNHOLD UNHOLD ;
: BB>W HOLD HOLD CS> ;

: code, POP LATEST @ ! ;
: COMPILE POP STR , PUSH ;
: DOES>` COMPILE code, #DZ
: CALL, $E8 C, HERE 2+ - , ;

' HERE      ENTRY  BEGIN`
: `>MARK HERE >CS 0, ;
: `>RELEASE HERE CS> ! ;

: `FOR> `>MARK BEGIN` ;
' `>RELEASE ENTRY  THEN`
LIKE ;` CODE,  IF`   ', (0BR  ', `>MARK
LIKE ;` CODE, AHEAD` ', (BR   ', `>MARK
LIKE ;` CODE, -IF`   ', (IFM  ', `>MARK
LIKE ;` CODE, CALL`  ', (CAL  ', `>MARK
LIKE ;` CODE, FOR`   ', (FOR  ', `>FOR
LIKE ;` CODE, OF`    ', (OF   ', `>MARK
' CALL` ENTRY {`
: }`  THEN`  COMPILE POP ;
: ELSE` AHEAD` CS> THEN` >CS ;
' ELSE`     ENTRY  ENDOF`
' IF`       ENTRY  WHILE`
: `<NEXT , `>RELEASE COMPILE DROP ;
: CASE` 0 >CS ;

LIKE ;` CODE, UNTIL` ', (0BR  ', ,
LIKE ;` CODE, AGAIN` ', (BR   ', ,
LIKE ;` CODE, NEXT`  ', (NXT  ', `<NEXT
LIKE ;` CODE, :`     ', (SKP  ', :

: REPEAT`  AGAIN` THEN` ;
: ENDCASE` COMPILE DROP (SKP BEGIN THEN` CS> ?DUP 0= UNTIL ;

: RECURCE` LATEST @ , ;
: ;DROP EX DROP ;
: ;SWAP EX SWAP ;
: ;SPC EX
: SPACE bl EMIT ;
: GO; POP @+ PUSH
: EXECUTE  PUSH ;
: TIMES SWAP PUSH
: LOOPS FOR J EXECUTE NEXT RDROP ;
: MAKER CREATE DUP C, FOR , NEXT ',
        DOES>  HERE ENTRY CALL @EXEC ;THEN  CSTR
: NW, 2*
: NB, TIMES
: B,  CSTR C, ;

: ".  CSTR
: TYPE   ;DROP
: CHARS. LOOPS CSTR EMIT ;
: TWICE I PUSH ;
: >DIG ;SWAP U/MOD
: DIG 9 OVER U< 7 AND + 48 + ;
: 0< $7FFF SWAP U< ;

: H. ;SPC : .W W>BB TWICE : .B 1H U/MOD TWICE
: .H 1H 1- AND : .DIG DIG EMIT ;

: .  DUP 0< IF 45 EMIT NEG THEN
: .. lf >DIG ?DUP IF RECURCE THEN EMIT ;

: (." POP CSTR CHARS. PUSH ;
: (" I POP CSTR + PUSH ;
: (A" (0BR AT ("  ( IF ZERO ("    ELSE ) POP ". ERROR ;

: @- 2- DUP @ SWAP ;

' CNTC   4 + @- @  2 MAKER VALUE ,
' (SRCH  4 + @- @  2 MAKER VECTOR ,
' CREATE 2+ @
' HERE   4 + @- @  3 MAKER QUAN ,
: VECT> HERE PUSH #DZ SWAP - CALL, ] POP ;

: ACC  PUSH 0   ( ADR CNT | ADR 0 R:CNT / RETURNS ADR2 CNT2 )
BEGIN KEY       ( KEY RETURNS 256 < )
  CASE
    bs OF DUP IF 1- bs EMIT bl EMIT bs EMIT THEN ENDOF
    cr OF RDROP DUP PUSH ENDOF
      DUP bl U< 0=
      IF PUSH I EMIT OVER OVER + POP SWAP C! 1+ DUP THEN
  ENDCASE DUP I =
UNTIL RDROP ;

BRP.

( $4324 CODE, @DINU    )
( $4325 CODE, @NINU    )
( $4326 CODE, @NUP     )

( $4375 CODE, @CNIP    )
( $4376 CODE, @NIP     )
( $4377 CODE, @NOP     )

( $4307 CODE, @CSWAP   )
( $4308 CODE, @SWAP    )
( $4309 CODE, @PUSHA   )

( $4315 CODE, @CTUCK   )
( $4316 CODE, @TUCKA   )
( $4317 CODE, @TUCK    )

( $41D9 CODE, CMOVE    )
( $41D2 CODE, CMOVEU   )
( $41D4 CODE, CPUSHU   )

( $413D ENTRY (DZTO    )

( $433C CODE, @2DROP   )
( $433D CODE, @DROP    )

