\ Romable 80386/387 Assembler                    14:59 09/19/89                                                                 \ Copyright 1986-1989 Laboratory Microsystems Inc.              \ All rights reserved.                                                                                                          \ To compile the ROMable 80386 system with assembler,           \ "un-comment" the line                                         \       INCLUDE ASM386.SCR                                      \ on the last screen of ROM386.SCR, then compile with           \       MC ROM386                                                                                                                                                                                                                                                                                                                                                                                                                                               \ declare vocabulary and misc constants          11:33 10/20/89 FORGET WSIZE  2 EQU WSIZE                                       VOCABULARY ASM IMMEDIATE                                                                                                        FORTH DEFINITIONS HEX -HEADERS                                                                                                  66 CONSTANT OP16PFX                \ 16 bit operand prefix byte 67 CONSTANT ADR16PFX               \ 16 bit address prefix byte 0F CONSTANT INS0FESC              \ 0F 80386-instruction escape                                                                 WSIZE 2 * EQU 2WSIZE                                                                                                                                                                                                                                                                                                                                                                            ( target image access                            14:20 09/19/89)                                                                : T,        , ;                                                 : TC,       C, ;                                                : T!        ! ;                                                 : TC!       C! ;                                                : T@        @ ;                                                 : TC@       C@ ;                                                : T-HERE    HERE ;                                                                                                              : W!        2DUP C!  1+ SWAP >< SWAP C! ;                                                                                                                                                                                                                                                                                                                                                       ( magic names                                    01:03 09/14/89)                                                                80 CONSTANT $0F                 \ 80386 instruction escape byte 80 CONSTANT $W                    \ require word reg or operand                                                                 1  CONSTANT $Offs8                                              2  CONSTANT $Offs16                                             3  CONSTANT $Offs32                                             4  CONSTANT $Seg                                                5  CONSTANT $Ptr32                                              6  CONSTANT $Ptr48                                                                                                              0  CONSTANT $Rel                                                -1 CONSTANT $Abs                                                                                                                                                                                ( magic names                                    21:30 12/26/87)                                                                 0 CONSTANT $MEM                                                 1 CONSTANT $ACC        $W $ACC OR  CONSTANT W$ACC               2 CONSTANT $REG        $W $REG OR  CONSTANT W$REG               3 CONSTANT $IDX                                                 4 CONSTANT $SEG                                                 5 CONSTANT $FAR                                                 6 CONSTANT $IMM                                                 7 CONSTANT $IDX2       \ unique 386 addressing modes            8 CONSTANT $SEG2       \ unique 386 segment registers                                                                                                                                                                                                                                                                                                                                          \ magic names                                    01:03 09/14/89                                                                 \ 9 is SPARE                                                                                                                    0A CONSTANT $ST87                                               0B CONSTANT $BYTE                                               0C CONSTANT $CNT                                                0D CONSTANT $M/R        $W $M/R OR CONSTANT W$M/R               0E CONSTANT $ANY                                                0F CONSTANT $NONE                                                                                                                                                                                                                                                                                                                                                                                                                                               \ source & dest operand variables                14:29 09/19/89                                                                 VARIABLE IBYTES               ( length of current INStruction ) VARIABLE IBUF 10 WSIZE - ALLOT       ( buffer to build opcode )                                                                 VARIABLE <RS>   VARIABLE <RD>                 \ reg or r/m code VARIABLE <TS>   VARIABLE <TD>                   \ operand $type VARIABLE <OS>   VARIABLE <OD>                  \ operand offset VARIABLE <WS>   VARIABLE <WD>               \ operand word flag VARIABLE <NEAR>                             \ near/far def flag VARIABLE <SCALE>             \ scale factor, indexed addressing VARIABLE <OP16>                   \ 16bit operand prefix needed VARIABLE <ADR16>                  \ 16bit address prefix needed VARIABLE <INS0F>                 \ 0F instruction escape needed                                                                                                                                 ( local stack handling                         19:20 02/10/86 )                                                                 VARIABLE ASP                            ( local stack pointer )                                                                 ( --- ; reset local stack pointer )                             : !ASP      SP   ASP ! ;                                                                                                        ( --- n ; return depth of local stack )                         : ADEPTH    ASP @ SP - WSIZE - WSIZE / 0 MAX ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \ Ins>Target                                     14:30 09/19/89                                                                 ( --- ; transfer assembled INStruction to target memory )       : INS>TARGET    <ADR16> @              \ 16-bit address prefix?                 IF  ADR16PFX TC,  THEN                                          <OP16>  @              \ 16-bit operand prefix?                 IF  OP16PFX  TC,  THEN                                          <INS0F> @           \ 386-extens escape prefix?                 IF  INS0FESC TC,  THEN                                          IBYTES @ 0              \ copy opcode to target                 ?DO   IBUF I + C@  TC, LOOP ;                                                                                                                                                                                                                                                                                                                                                   \ local labels                                   14:22 09/19/89 DECIMAL                                                                                                                         10 CONSTANT FRMAX#    ( max pending forward references )        20 CONSTANT LBLMAX#   ( max allowed local labels )                                                                              HEX                                                                                                                             VARIABLE FRTABLE      FRMAX# 1+   2WSIZE * ALLOT                                                                                VARIABLE LTABLE       LBLMAX# 1+  WSIZE * ALLOT                                                                                                                                                                                                                                                                                                                                                 \ local labels                                 1 14:22 09/19/89                                                                 ( --- ; check if any unresolved forward references )            : FRCHK   FRMAX# 0                                                        DO    I 2WSIZE * FRTABLE + @                                          IF   -1 ABORT" unresolved forward reference"                    THEN                                                      LOOP ;                                                                                                                ( --- ; initialize forward reference tables )                   : FRCLR   FRTABLE FRMAX# 1+  2WSIZE * ERASE                               LTABLE LBLMAX# 1+  WSIZE * ERASE ;                                                                                                                                                                                                                                                                                    \ local labels                                   23:23 12/15/87                                                                 ( t_addr --- ; store proper displacement from T-HERE )          : FRSTD     DUP TC@   CASE                                                  0E9 OF T-HERE OVER 5 + - SWAP 1+ T! ENDOF  \ JMP                0E8 OF T-HERE OVER 5 + - SWAP 1+ T! ENDOF  \ CALL               00F OF T-HERE OVER 6 + - SWAP 2+ T! ENDOF  \ Jcc32              SWAP ( hide opcode byte )                   \ Jcc8              T-HERE  OVER 2+ -  SWAP 1+  TC!                                 ENDCASE ;                                                                                                                                                                                                                                                                                                                                                                                                                                           \ local labels                                   08:51 09/18/87                                                                 : FRRES ( resolve forward references  fr# --- fr# )  FRMAX#  0          DO I  2WSIZE *  FRTABLE + DUP @                                    2 PICK =                                                        IF   DUP WSIZE + @  FRSTD       \ store displacement                 OFF                         \ remove from table            ELSE DROP                                                       THEN                                                         LOOP ;                                                                                                                                                                                                                                                                                                                                                                                                                                                  \ local labels                                 1 14:18 09/19/89                                                                 ( fr#  ---  fr# ;  add forward reference to table )             : FRADD   FRMAX# 1+ 0                                                     DO    FRMAX# I =                                                      IF   -1 ABORT" too many forward references"                     ELSE I 2WSIZE * FRTABLE + DUP @ 0=                                   IF      2DUP !  T-HERE SWAP  WSIZE +  !                                 LEAVE                                                   ELSE    DROP                                                    THEN                                                       THEN                                                      LOOP ;                                                                                                                                                                                                                                                \ local labels                                   11:30 10/20/89                                                                 ( fr#  --- ; establish local label address value )              : !LTABLE     FRRES T-HERE SWAP  WSIZE *  LTABLE +  DUP @                     IF   -1 ABORT" already declared"  2DROP                         ELSE ! THEN ;                                                                                                     ( fr#  ---  addr ; fetch value of local label, if undefined )   ( add current location to forward ref. table )                  : @LTABLE     DUP  WSIZE *  LTABLE +  @ SWAP OVER 0=                          IF   FRADD 2DROP      0  ( T-HERE)                              ELSE DROP THEN ;                                                                                                                                                                                                                                                                                                  \ local labels                                   14:52 09/19/89 ASM DEFINITIONS DECIMAL HEADERS                                 ( local label definitions     local label references )                                                                          : 1$:   1 !LTABLE ;           : 1$    1 @LTABLE ;               : 2$:   2 !LTABLE ;           : 2$    2 @LTABLE ;               : 3$:   3 !LTABLE ;           : 3$    3 @LTABLE ;               : 4$:   4 !LTABLE ;           : 4$    4 @LTABLE ;               : 5$:   5 !LTABLE ;           : 5$    5 @LTABLE ;               : 6$:   6 !LTABLE ;           : 6$    6 @LTABLE ;               : 7$:   7 !LTABLE ;           : 7$    7 @LTABLE ;               : 8$:   8 !LTABLE ;           : 8$    8 @LTABLE ;               : 9$:   9 !LTABLE ;           : 9$    9 @LTABLE ;               : 10$: 10 !LTABLE ;           : 10$  10 @LTABLE ;                                                                                                                                               \ local labels                                   14:12 09/19/89                                                                 ( local label definitions      local label references )                                                                         : 11$:  11 !LTABLE ;           : 11$   11 @LTABLE ;             : 12$:  12 !LTABLE ;           : 12$   12 @LTABLE ;             : 13$:  13 !LTABLE ;           : 13$   13 @LTABLE ;             : 14$:  14 !LTABLE ;           : 14$   14 @LTABLE ;             : 15$:  15 !LTABLE ;           : 15$   15 @LTABLE ;             : 16$:  16 !LTABLE ;           : 16$   16 @LTABLE ;             : 17$:  17 !LTABLE ;           : 17$   17 @LTABLE ;             : 18$:  18 !LTABLE ;           : 18$   18 @LTABLE ;             : 19$:  19 !LTABLE ;           : 19$   19 @LTABLE ;             : 20$:  20 !LTABLE ;           : 20$   20 @LTABLE ;                                                                                                                                             \ bit masks for type checking                    14:52 09/19/89 FORTH DEFINITIONS BINARY -HEADERS                                                                                               CREATE TYPE_TABLE                                                                                                                              ( FEDCBA9876543210 )                             (  0 $MEM  )     0000000000000001 ,                             (  1 $ACC  )     0000000000000010 ,                             (  2 $REG  )     0000000000000110 ,                             (  3 $IDX  )     0000000000001000 ,                             (  4 $SEG  )     0000000000010000 ,                             (  5 $FAR  )     0000000000100001 ,                             (  6 $IMM  )     0000000001000000 ,                             (  7 $IDX2 )     0000000010000000 ,                                                                                                                                                             \ bit masks for type checking                    01:42 09/14/89                                                                                ( FEDCBA9876543210 )                             (  8 $SEG2 )     0000000100000000 ,                             (  9 SPARE )     0000000000000000 ,                             ( 0A $ST87 )     0000010000000000 ,                             ( 0B $BYTE )     0000100000000001 ,                             ( 0C $CNT  )     0001000001000101 ,                             ( 0D $M/R  )     0010000010001111 ,                             ( 0E $ANY  )     1111111111111111 ,                             ( 0F $NONE )     1000000000000000 ,                                                                                             \ The types on the left hand side are the ones from the         \ instruction match table.  Across the top are the operand      \ types from the instruction being assembled.                                                                                   \ operand type check                           1 01:42 09/14/89 HEX                                                                                                                             ( This routine checks the actual operands against the types )   ( specified by the current instruction table entry.  A true )   ( flag is returned if this instruction group can be used. )                                                                     ( operand_type w_flag type_needed  ---  T | F )                 : TYPE?      SWAP 1 <               ( not WORD/DWORD operand? )              OVER 80 AND  AND            ( and word required? )              IF   2DROP FALSE EXIT    ( yes return False flag )              THEN 07F AND  WSIZE *  TYPE_TABLE +  @                          1 ROT SHIFT  AND  0<> ;                                                                                                                                                                                                                              word flag check                                14:18 09/19/89 CREATE W_TABLE                                                                  ( Dest=-1 U    0 B     1 W    2 D  )             ( Source=-1 U )        0 C,   0 C,    1 C,   2 C,               ( Source=0  B )        0 C,   0 C,   -1 C,  -1 C,               ( Source=1  W )        1 C,  -1 C,    1 C,  -1 C,               ( Source=2  D )        2 C,  -1 C,   -1 C,   2 C,                                                                              \ --- T | F ;  Checks the source and destination word flags     \ for consistency and returns a W flag for the opcode.          \ Checks for Word vs Dword and sets <OP16> appropriately.       : W?            <WS> @ 1+ 4 *  <WD> @ 1+ +  W_TABLE + C@                        DUP 0FF =                                                       IF   -1 ABORT" operand size mismatch"                           THEN DUP 1 = <OP16> !  0<> ;   \ set prefix flag                                                                \ store offsets/displacement                     14:31 09/19/89                                                                 ( data ins_offset #bytes --- rel_data addr ; sets ins length )  : DoRel     2DUP +  IBYTES !                                                OVER >R  + T-HERE +  -  R> IBUF + ;                                                                                 ( data ins_offset #bytes --- data addr ; sets ins length )      : DoAbs     OVER +  IBYTES !  IBUF + ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \ store offsets/displacements                    14:18 09/19/89                                                                 ( data ins_offset $loc_size --- )                               : !Abs      CASE                                                            $Offs8   OF  1 DoAbs    C!   ENDOF                              $Offs16  OF  2 DoAbs    W!   ENDOF                              $Offs32  OF  4 DoAbs    !       ENDOF                           $Seg     OF  2 DoAbs    W!   ENDOF                              $Ptr32   OF  4 DoAbs    2DUP W! 2+ NIP W! ENDOF                 $Ptr48   OF  6 DoAbs    2DUP !  4 + NIP W! ENDOF                -1 ABORT" Unknown size in !Abs"                                 ENDCASE ;                                                                                                                                                                                                                                                                                                           \ store offsets/displacements                    14:18 09/19/89                                                                 ( data ins_offset $loc_size --- )                               : !Rel      CASE                                                            $Offs8  OF   OVER 0<> >R   1 DoRel                                           OVER ABS 07F > R> AND                                           IF   -1 ABORT" Out of range"                                    THEN C! ENDOF                                      $Offs16 OF   2 DoRel W!  ENDOF                                  $Offs32 OF   4 DoRel !   ENDOF                                  -1 ABORT" Unknown Size in !SelfRel"                             ENDCASE ;                                                                                                           ( data ins_offset $loc_size $type --- )                         : !Loc      $Abs =  IF !Abs ELSE !Rel THEN ;                                                                                    \ set fields in 1st opcode byte                1 14:31 09/19/89                                                                 ( field -- ; merge a bit field into opcode byte )               : !FLAG   IBUF C@ OR IBUF C! ;                                                                                                  ( T|F --- ; set various fields )                                : !D      2 AND  !FLAG ;                 ( set DIRECTION flag ) : !W      1 AND  !FLAG ;                 ( set WORD/BYTE flag ) : !S      2 AND  !FLAG ;            ( set SIGN EXTENSION flag ) : !C      2 AND  !FLAG ;             ( set shift REG/IMM flag )                                                                                                                                                                                                                                                                                                                                                                                                 ( set fields in 1st opcode byte                14:49 01/17/86 )                                                                 ( register_field  --- )                                         : !RRR    7 AND  !FLAG ;                                                                                                        ( segregset fields in 2nd (MODRM) opcode byte          14:29 09/19/89                                                                 ( n --- n ; force MOD field )                                   : !MOD       6 SHIFT  IBUF 1+ C@ 03F AND OR IBUF 1+ C! ;        : MOD00      0 !MOD ;                                           : MOD01      1 !MOD ;                                           : MOD10      2 !MOD ;                                           : MOD11      3 !MOD ;                                                                                                           ( reg --- )                                                     : !REG      3 SHIFT  IBUF 1+ C@ OR  IBUF 1+ C! ;                                                                                ( r/m  --- )                                                    : !R/M      7 AND  IBUF 1+ C@ 0F8 AND OR IBUF 1+ C! ;                                                                                                                                           \ set fields in 3rd (SIB) opcode byte            14:30 09/19/89                                                                 \ n --- ; store index register field                            : !SIB-IDX  7 AND 3 SHIFT IBUF 2+ C@  0C7 AND OR IBUF 2+ C! ;                                                                   \ n --- ; store scaling field                                   : !SIB-SS   3 AND 6 SHIFT IBUF 2+ C@  03F AND OR IBUF 2+ C! ;                                                                   \ n --- ; store base register field                             : !SIB-BASE 7 AND  IBUF 2+ C@  0F8 AND  OR  IBUF 2+ C! ;                                                                                                                                                                                                                                                                                                                                                                                                        \ build MODRM byte                               14:13 04-03-89                                                                 \ handle indirect addressing modes                              \ note R/M for [EBP] is 5 for 386, while [BP] for 86 is 6                                                                       \ displ R/M --- ; store R/M & MOD fields into MODRM byte )      : !INDIR  DUP !R/M                             \ store R/M field          5 <>  OVER 0=   AND             \ disp=0 & not BP/EBP?          IF    MOD00  DROP EXIT           \ no displ use MOD=00          THEN  DUP ABS 080 <                                             IF    MOD01  $Offs8           \ 8 bit displ use MOD=01          ELSE  MOD10  <OP16> @         \ Full displ, use MOD=10                IF  $Offs16  ELSE  $Offs32  THEN    \ check mode          THEN  IBYTES @        \ ins offset from !SIB or !MODRM                SWAP $Abs !Loc ;            \ store displacement                                                                \ build MODRM + SIB bytes                        14:18 09/19/89 \ general routine for scale+idx+base+displacement addresses                                                                     \ displ R/M --- ; build special SIB byte, then call !INDIR      \ to build MODRM byte and store displacement.                   : !SIB      DUP 44 = <SCALE> @ 0<> AND                                      IF -1 ABORT" [ESP] cannot be scaled" THEN                       3 IBYTES !               \ force instruction length             DUP !SIB-BASE         \ BASE register into SIB byte             -4 SHIFT   !SIB-IDX  \ INDEX register into SIB byte             <SCALE> @  !SIB-SS           \ store scaling factor             4 !INDIR ;          \ R/M=4 is escape to 2byte form                                                                                                                                                                                                                                                                 \ build MODRM + SIB bytes                        15:14 04-03-89 \ special routine for scale+index with no base register                                                                         \ displ R/M --- ; build special SIB byte, force MODRM byte,     \ must always supply 32-bit displacement                        : !SCALIX   3 IBYTES !               \ force instruction length             5 !SIB-BASE          \ magic BASE = 5 into SIB byte             !SIB-IDX             \ INDEX register into SIB byte             <SCALE> @  !SIB-SS           \ store scaling factor             4 !R/M              \ R/M=4 is escape to 2byte form             MOD00                \ magic MOD = 00 for this mode             IBYTES @ $Offs32 $Abs !Loc ;         \ displacement                                                                                                                                                                                                                                                                 \ build MODRM + SIB bytes                        14:18 09/19/89 \ note that R/M for direct addressing is 5 for 386, 6 for 86    ( displ R/M operand_type --- )                                  : !MODRM   2 IBYTES ! CASE        \ all ins with R/M start at 2            $MEM OF  5 !R/M  MOD00         \ direct R/M=5 MOD=00                     DROP  2  <OP16> @                                               IF    $Offs16 ELSE $Offs32                                      THEN  $Abs !Loc           ENDOF                        $ACC OF  !R/M  MOD11  DROP         ENDOF                        $REG OF  !R/M  MOD11  DROP         ENDOF                        $IDX OF  <SCALE> @                                                       IF   !SCALIX            \ scale+idx, no base                    ELSE !INDIR THEN          ENDOF                        $IDX2 OF !SIB                      ENDOF                        -1 ABORT" Bad type in !MODRM"  ENDCASE ;                                                                             \ store immediate data                           17:12 09/17/87                                                                 ( flag --- ; flag=TRUE if sign extension available )            ( always gets data from <OS> )                                  : !IMM      <OS> @  IBYTES @               \ flag data ins_offs             <WD> @  0 MAX 0=                       \ byte dest?             IF   $Offs8 $Abs !Loc  DROP EXIT             \ byte             THEN OVER ABS 080 <        \ word, -128 <X< 127 and                  3 ROLL AND           \ sign extension allowed?             IF   $Offs8   TRUE !S      \ yes use sign extension             ELSE <OP16> @                  \ no use full length                  IF $Offs16 ELSE $Offs32 THEN                               THEN $Abs !Loc ;             \ store immediate data                                                                                                                                                                                                 \ save source/dest addr or data                2 14:18 09/19/89                                                                 ( ? --- ; save source direct or immed operand if present )      : !SOFFS        ADEPTH 0>                                                       IF    <OS> !    <TS> @ $NONE =                                        IF   $MEM <TS> !                                                THEN                                                      THEN ;                                                                                                          ( n --- ; save destination addr, called by "," )                : !DOFFS        ADEPTH 1 <                                                      IF   -1 ABORT" Missing destination operand" 0                   THEN <OD> ! ;                                                                                                                                                                                                                                   \ 80387 assembler                              1 10:32 10/20/89 80387? .IF                                                                                                                      CREATE MFI_TAB   ( -1 unk  )    3  C,   ( default=64b int )                      (  0 byte )   -1  C,   ( never allowed )                        (  1 16b  )    3  C,   ( 16 b int )                             (  2 32b  )    1  C,   ( 32 b int )                             (  3 64b )     3  C,   ( 64 b int )                                                                            CREATE MFR_TAB   ( -1 unk  )    2  C,   ( default=64b real )                     (  0 byte )   -1  C,   ( never allowed )                        (  1 16b  )   -1  C,   ( no 16b reals )                         (  2 32b  )    0  C,   ( 32b real )                             (  3 64b )     2  C,   ( 64b real )            .THEN                                                                                                                           \ 80387 assembler                              1 10:33 10/20/89 80387? .IF                                                                                                                      ( flag --- ; flag=TRUE if int, FALSE if real, 8087 MF field )   : !MF       IF    MFI_TAB ELSE MFR_TAB                                      THEN  <WS> @ 1+  +  C@                                          DUP 0FF =                                                       IF   -1 ABORT" Wrong 80x87 address mode"                        THEN 2* !FLAG ;                 \ merge into opcode                                                                 ( merge 8087 stack cell field with 2nd opcode byte )            : !ST(X)    <RS> @  IBUF 1+ C@  OR  IBUF 1+ C!   2 IBYTES ! ;                                                                   .THEN                                                                                                                                                                                           ( D>M/R  D>REG  S>M/R  S>REG                   22:58 01/17/86 )                                                                 ( --- ; source operand to M/R fields )                          : S>M/R     <OS> @  <RS> @  <TS> @ !MODRM   ;                                                                                   ( --- ; source operand to REG field )                           : S>REG     <RS> @ !REG ;                                                                                                       ( --- ; dest operand to M/R fields )                            : D>M/R     <OD> @  <RD> @  <TD> @  !MODRM  ;                                                                                   ( --- ; dest operand to REG field )                             : D>REG     <RD> @ !REG ;                                                                                                                                                                                                                                       \ reset assembler variables                      12:12 04-03-89                                                                 ( --- )                                                         : RESET     <OS> OFF  <OD> OFF         \ zero out addr/offsets              <WS> ON   <WD> ON                \ default W to -1              <RS> OFF  <RD> OFF               \ zero both R/M's              <SCALE> OFF                     \ scale factor = 0              <OP16> OFF  <ADR16> OFF          \ 16bit overrides              <INS0F> OFF              \ 80386-instr escape byte              $NONE <TS> !                                                    $NONE <TD> !            \ reset both operand types              !ASP  ;                        \ reset local stack                                                                                                                                                                                                                                                                  \ groups 0-3                                     14:18 09/19/89                                                                 ( --- )                                                         : G00       -1 ABORT" Illegal instruction group" ;                                                                              ( CALLI JMPI PUSH POP mem/reg )                                 : G01       S>M/R  ;                                                                                                            ( LDS LEA LES LFS LGS LSS reg,mem, IMUL reg,reg/mem )           : G02       S>M/R  D>REG  ;                                                                                                     ( MOV segreg,mem/reg or mem/reg,segreg )                        : G03       <TD> @  DUP  $SEG =  SWAP $SEG2 =  OR                           IF    S>M/R  D>REG                                              ELSE  D>M/R  S>REG                                              THEN ;                                              ( groups 4-7                                   15:09 01/20/86 )                                                                 ( TEST, XCHG reg,mem/reg )                                      : G04       S>M/R  D>REG  W?  !W ;                                                                                              ( DEC DIV IDIV IMUL INC MUL NEG NOT mem/reg )                   : G05       S>M/R   W? !W  ;                                                                                                    ( ADC ADD AND CMP MOV OR SBB SUB XOR reg,mem/reg )              : G06       S>M/R   D>REG   W? !W  TRUE !D ;                                                                                    ( ADC ADD AND CMP MOV OR SBB SUB XOR mem/reg,reg )              : G07       D>M/R  S>REG  W? !W  ;                                                                                                                                                                                                                              \ group 8                                        14:30 09/19/89                                                                 ( RCL RCR ROL ROR SAR SHL SAL SHR mem/reg )                     ( extended for 80286 shift by count opcodes )                   : G08       D>M/R                                                           <WS> ON   W? !W                                                 <TS> @ DUP  $IMM = SWAP $MEM = OR                               IF   <OS> @ 1 <>             \ shift count<>1 ?                      IF   <OS> @ IBUF IBYTES @ + C!  1 IBYTES +!                          IBUF C@  0EF AND  IBUF C!                                  THEN EXIT                                                  THEN <RS> @  1 <>                                               IF  -1 ABORT" Illegal count register"  THEN                     TRUE !C ;                                                                                                                                                                           \ group 9-0B                                      16:21 09/19/86                                                                ( AND MOV OR TEST XOR mem/reg,data )                            : G09       D>M/R  W? !W  FALSE !IMM ;                                                                                          ( ADC ADD CMP SBB SUB mem/reg,data )                            : G0A       D>M/R  W? !W  TRUE !IMM ;                                                                                           ( ESC xxx ; generates message for now )                         : G0B       G00 ;                                                                                                                                                                                                                                                                                                                                                                                                                                               \ group 0C-0E                                    14:30 09/19/89                                                                 ( ADC ADD AND CMP OR SBB SUB TEST XOR ac,data )                 : G0C       W? !W  FALSE !IMM ;                                                                                                 ( MOV ac,mem or mem,ac )                                        : G0D       <TD> @ $ACC =                                                   IF    <OS>  ELSE  <OD>                                          THEN  @  1  <OP16> @                                            IF   $Offs16 ELSE $Offs32                                       THEN $Abs !Loc                                                  W? !W ;                                                                                                             ( LODS STOS CMPS MOVS SCAS INS OUTS default to BYTE )           : G0E       W? !W ;                                                                                                             \ group 0F                                       14:18 09/19/89                                                                 ( IN ac,port or ac,DX, OUT port,ac DX,ac )                      : G0F       <TS> @ $ACC =                                                   IF    <OD> @  <RD> @  <TD> @    <WS>                            ELSE  <OS> @  <RS> @  <TS> @    <WD>                            THEN  @  DUP 1 = <OP16> !  0 MAX 1 MIN !W                       $REG =                                                          IF    2 <>                                                            IF   -1 ABORT" IN/OUT must use DX"                              THEN DROP                                                 ELSE  DROP  DUP 0FF00 AND                                             IF   -1 ABORT" Port number too large"                           THEN 1 $Offs8 $Abs !Loc                                   THEN  ;                                                                                                             \ group 10-12                                    14:30 09/19/89                                                                 ( DEC INC POP PUSH XCHG reg16 )                                 : G10       <RS> @ !RRR  ;                                                                                                      ( MOV reg,data )                                                : G11       <WD> @  0> 1 AND ( *** WORD or DWORD *** )                      3 SHIFT IBUF C@ OR IBUF C!                                      <RD> @  !RRR     FALSE !IMM  ;                                                                                      ( INT nn )                                                      : G12       <OS> @  1 $Offs8 $Abs !Loc ;                                                                                                                                                                                                                                                                                        \ group 13-15                                    13:29 09/16/87                                                                 ( PUSH POP segreg )                                             : G13           <RS> @ !SR ;                                                                                                    ( CALLFI JMPFI mem )                                            : G14       S>M/R ;                                                                                                             ( CALL JMP disp32 )                                             : G15       <OS> @  1 $Offs32 $Rel !Loc ;                                                                                                                                                                                                                                                                                                                                                                                                                       \ group 16-17                                    11:16 03-05-88                                                                 ( conditional and short jmps & loops )                          : G16       <OS> @  1 $Offs8 $Rel !Loc ;                                                                                        ( 1 byte fixed opcodes: AAA AAS CBW CLC CLD CLI CMC CWD DAS   ) ( HLT INTO IRETD LAHF LOCK NOP POPA POPF PUSHA PUSHF REP REPE ) ( REPZ REPNZ REPNE RET RETF SAHF STC STD STI WAIT XLAT )        : G17       1 IBYTES ! ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \ group 18-1A                                    14:18 09/19/89                                                                 ( 2 byte fixed opcodes: AAD AAM )                               : G18       2 IBYTES ! ;                                                                                                        ( CALLF and JMPF far direct 48-bit address )                    : G19       ADEPTH 1 <>                                                     IF    -1 ABORT" Missing selector" 0                             THEN  <OS> @  ( segment offset )                                1 $Ptr48 $Abs !Loc ;                                                                                                ( RET RETF disp )                                               : G1A       <OS> @  1 $Offs16 $Abs !Loc ;                                                                                                                                                                                                                       \ groups 1B 1C 1D           80286                14:30 09/19/89                                                                 ( push immediate )                                              : G1B       1 <WD> !   TRUE !IMM   ;                                                                                            ( 3 operand IMUL reg,r/m,imm )                                  ( we use degenerate 2 operand form: IMUL reg,imm )              : G1C       D>M/R  TRUE !IMM                                                IBUF 1+ C@ DUP 7 AND 3 SHIFT OR IBUF 1+ C!   ;                                                                      ( MOVSX MOVZX reg,mem/reg, a real weird opcode group )          : G1D       S>M/R   D>REG                                                   <WD> @ 1 = <OP16> !     \ dest controls prefix byte             <WS> @ 1 = !W ;          \ source controls opcode W                                                                                                                                 \ groups 1F 20              80286                01:01 09/14/89                                                                 ( bounds reg,r/m )                                              : G1F       D>REG  S>M/R  ;                                                                                                     ( enter dw,level )                                              : G20       <OD> @   1 $Offs16 $Abs !Loc                                    <OS> @   3 $Offs8  $Abs !Loc ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \ group 21              80386                    14:30 09/19/89                                                                 ( short or long conditional jump )                              : G21       <OS> @  T-HERE 2+  -                                        \   DUP 07F >  SWAP  -080  <  OR   \ outside -128..127?             DUP 0 >=   SWAP  -080  <  OR   \ outside -128..0?               <OS> @ 0= OR                   \ or forward ref?                IF   IBUF C@ 10 + IBUF 1+ C!       \ adjust opcode                   0F  IBUF C!                   \ add escape byte                 <OS> @  2 $Offs32 $Rel !Loc                                ELSE  G16                          \ use short form             THEN ;                                                                                                                                                                                                                                                                                                              \ groups 22, 23, 24     80386                    23:01 12/15/87 \ For these groups we call W? just to force the 16-bit          \ override flag if necessary.  We call it after D>M/R so that   \ a full 32-bit address will be compiled.                                                                                       ( BT BTC BTR BTS reg/mem, reg )                                 : G22       S>REG  D>M/R  W? DROP ;                                                                                             ( BT BTC BTR BTS reg/mem, imm )                                 : G23       D>M/R  W? DROP                                                  <OS> @  IBYTES @  $Offs8 $Abs !Loc ;                                                                                ( BSF BSR reg,mem/reg )                                         : G24       D>REG  S>M/R  W? DROP ;                                                                                                                                                             \ 80387 assembler                              1 10:40 10/20/89 80387? .IF                                                                                                                      ( 8087 stack only operators such as FXCHG )                     : G28       !ST(X) ;                                                                                                            ( misc mem addressing 8087 REAL opcodes )                       : G29       FALSE !MF  S>M/R  ;                                                                                                 ( misc mem addressing 8087 INT opcodes )                        : G2A       TRUE !MF   S>M/R  ;                                                                                                 .THEN                                                                                                                                                                                                                                                           \ 80387 assembler                              1 10:40 10/20/89 80387? .IF                                                                                                                      ( special code gen for 8087 FLDI and FSTPI, long int form )     : G2B       TRUE !MF   S>M/R                                                <WS> @ DUP -1 = ( unk ) SWAP 3 = ( quad) OR                     IF   IBUF 1+ C@  028 ( HEX )  OR   IBUF 1+ C!                   THEN ;                                                                                                              .THEN                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ execution vector for instruction groups        10:42 10/20/89 CREATE GROUP_TABLE                                                                                                                ] G00 G01 G02 G03 G04 G05 G06 G07 G08 G09           \ 386 ops     G0A G0B G0C G0D G0E G0F G10 G11 G12 G13                         G14 G15 G16 G17 G18 G19 G1A G1B G1C G1D                         G00 G1F G20 G21 G22 G23 G24 [                                                                                               80387? .IF                                                                                                                        ] G00 G00 G00 G28 G29 G2A G2B [                     \ 387 ops                                                                 .THEN                                                                                                                                                                                                                                                           \ operator code generation                       14:30 09/19/89                                                                 ( ^ins_params --- )                                             : GEN       1 IBYTES !                   ( default ins length )             DUP 2+  C@  IBUF C!             ( 1st opcode byte )             DUP 1+  C@  IBUF 1+ C!     ( maybe 2nd opcode byteoperator compiling word                      0 14:18 09/19/89                                                                 : OP      CREATE  DUP C,                         ( # of types )                   0 DO C, C, C, C, C, LOOP   ( lay down table )           DOES>   >R  !SOFFS  R>       ( save srce imm or dir )                   DUP 1+  SWAP C@      ( # types for this ins )                   BEGIN <TS> @  <WS> @ 3 PICK 3 + C@ TYPE?                              IF  <TD> @ <WD> @ 3 PICK 4 + C@ TYPE?                               IF    DROP  GEN  INS>TARGET                                           RESET EXIT                                                THEN                                                        THEN 1- SWAP 5 + SWAP DUP 0=                              UNTIL -1 ABORT" Illegal operand" ;                                                                                                                                                                                                            \ mnemonics                                    1 14:52 09/19/89 ( dest  source  op1  op2  grp  types   mnemonic               ) ASM DEFINITIONS HEADERS                                           $NONE $NONE   037  000   17   1  OP  AAA                        $NONE $NONE   0D5  00A   18   1  OP  AAD                        $NONE $NONE   0D4  00A   18   1  OP  AAM                        $NONE $NONE   03F  000   17   1  OP  AAS                        $REG  $M/R    010  000   6                ( reg,mem/reg    )    $M/R  $REG    010  000   7                ( mem/reg,reg    )    $M/R  $IMM    080  010   0A               ( mem/reg,data   )    $ACC  $IMM    014  000   0C   4  OP  ADC  ( ac,data        )    $REG  $M/R    000  000   6                ( reg,mem/reg    )    $M/R  $REG    000  000   7                ( mem/reg,reg    )    $M/R  $IMM    080  000   0A               ( mem/reg,data   )    $ACC  $IMM    004  000   0C   4  OP  ADD  ( ac,data        )                                                                  \ mnemonics                                       15:04 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    020  000   6                  ( reg,mem/reg   )   $M/R  $REG    020  000   7                  ( mem/reg,reg   )   $M/R  $IMM    080  020   9                  ( mem/reg,data  )   $ACC  $IMM    024  000   0C   4  OP  AND    ( ac,data       )   $NONE $M/R    0FF  010   1                  ( mem/reg       )   $REG  $M/R    062  000   1F   2  OP  BOUND  ( 286 )                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \ mnemonics         80386                        23:12 12/16/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    0BC  000 24 $0F +  1  OP  BSF   \ reg,mem/reg     $REG  $M/R    0BD  000 24 $0F +  1  OP  BSR   \ reg,mem/reg                                                                     $M/R  $IMM    0BA  020 23 $0F +              \ mem/reg,data8    $M/R  $REG    0A3  000 22 $0F +  2  OP  BT    \ mem/reg,reg     $M/R  $IMM    0BA  038 23 $0F +              \ mem/reg,data8    $M/R  $REG    0BB  000 22 $0F +  2  OP  BTC   \ mem/reg,reg     $M/R  $IMM    0BA  030 23 $0F +              \ mem/reg,data8    $M/R  $REG    0B3  000 22 $0F +  2  OP  BTR   \ mem/reg,reg     $M/R  $IMM    0BA  028 23 $0F +              \ mem/reg,data8    $M/R  $REG    0AB  000 22 $0F +  2  OP  BTS   \ mem/reg,reg                                                                                                                                   \ mnemonics                                       15:16 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $M/R    0FF  010   1                  ( mem/reg       )   $NONE $MEM    0E8  000   15   2  OP  CALL   ( disp16        )   $NONE $M/R    0FF  010   1    1  OP  CALLI  ( mem/reg       )   $NONE $FAR    09A  000   19   1  OP  CALLF  ( addr32 intersg)   $NONE $MEM    0FF  018   14   1  OP  CALLFI ( mem interseg  )                                                                   $NONE $NONE   066  098   18   1  OP  CBW                        $NONE $NONE   099  000   17   1  OP  CDQ                        $NONE $NONE   0F8  000   17   1  OP  CLC                        $NONE $NONE   0FC  000   17   1  OP  CLD                        $NONE $NONE   0FA  000   17   1  OP  CLI                        $NONE $NONE   0F5  000   17   1  OP  CMC                                                                                      \ mnemonics                                       15:16 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    038  000   6                ( reg,mem/reg     )   $M/R  $REG    038  000   7                ( mem/reg,reg     )   $M/R  $IMM    080  038   0A               ( mem/reg,data    )   $ACC  $IMM    03C  000   0C   4  OP  CMP  ( ac,data         )   $NONE $NONE   0A6  000   0E   1  OP  CMPS ( needs B, W, D   )   $NONE $NONE   0A6  000   17   1  OP  CMPSB                      $NONE $NONE   066  0A7   18   1  OP  CMPSW                      $NONE $NONE   0A7  000   17   1  OP  CMPSD                      $NONE $NONE   02E  000   17   1  OP  CS:                        $NONE $NONE   066  099   18   1  OP  CWD                        $NONE $NONE   098  000   17   1  OP  CWDE                       $NONE $NONE   027  000   17   1  OP  DAA                                                                                      \ mnemonics                                       15:16 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   02F  000   17   1  OP  DAS                        $NONE $M/R    0FE  008   5                ( mem/reg         )   $NONE W$REG   048  000   10   2  OP  DEC  ( reg16/32        )   $ACC  $M/R    0F6  030   5                ( ac,mem/reg      )   $NONE $M/R    0F6  030   5    2  OP  DIV  ( [ac],mem/rec    )   $NONE $NONE   03E  000   17   1  OP  DS:                        $MEM  $MEM    0C8  000   20   1  OP  ENTER ( 286 )              $NONE $NONE   026  000   17   1  OP  ES:                        $NONE $M/R    0D8  000   0B   1  OP  ESC  ( mem/reg         )   $NONE $NONE   064  000   17   1  OP  FS:  ( * )                 $NONE $NONE   065  000   17   1  OP  GS:  ( * )                 $NONE $NONE   0F4  000   17   1  OP  HLT                                                                                      \ mnemonics                                       15:16 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $ACC  $M/R    0F6  038   5                ( ac,mem/reg      )   $NONE $M/R    0F6  038   5    2  OP  IDIV ( [ac],mem/reg    )   W$REG $IMM    069  000   1C               ( reg,imm  286    )   W$REG $M/R    0AF  000   $0F 02 +         ( *reg,m/r  386   )   $ACC  $M/R    0F6  028   5                ( ac,mem/reg      )   $NONE $M/R    0F6  028   5    4  OP  IMUL ( [ac],mem/reg    )                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \ mnemonics                                      14:30 09/19/89 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $ACC  W$REG   0EC  000   0F               ( ac,DX           )   $ACC  $MEM    0E4  000   0F   2  OP  IN   ( ac,port         )   $NONE $M/R    0FE  000   5                ( mem/reg         )   $NONE W$REG   040  000   10   2  OP  INC  ( reg16           )   $NONE $NONE   06C  000   0E   1  OP  INS   ( 286 )              $NONE $BYTE   0CD  000   12   1  OP  INT  ( n               )   $NONE $NONE   0CE  000   17   1  OP  INTO                       $NONE $NONE   066  0CF   18   1  OP  IRET                       $NONE $NONE   0CF  000   17   1  OP  IRETD ( * 386 )            $NONE $MEM    077  000   21   1  OP  JA                         $NONE $MEM    073  000   21   1  OP  JAE                                                                                                                                                      \ mnemonics                                      23:16 12/15/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $MEM    072  000   21   1  OP  JB                         $NONE $MEM    076  000   21   1  OP  JBE                        $NONE $MEM    072  000   21   1  OP  JC                       \ $NONE $MEM    0E3  000   16   1  OP  JCXZ   \ *** must fix **   $NONE $MEM    0E3  000   16   1  OP  JECXZ                      $NONE $MEM    074  000   21   1  OP  JE                         $NONE $MEM    07F  000   21   1  OP  JG                         $NONE $MEM    07D  000   21   1  OP  JGE                        $NONE $MEM    07C  000   21   1  OP  JL                         $NONE $MEM    07E  000   21   1  OP  JLE                        $NONE $M/R    0FF  020   1                 ( mem/reg )          $NONE $MEM    0E9  000   15   2  OP  JMP   ( disp16  )                                                                        \ mnemonics                                      23:16 12/15/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $M/R    0FF  020   1    1  OP  JMPI  ( mem/reg )          $NONE $FAR    0EA  000   19   1  OP  JMPF  ( addr32 interseg)   $NONE $MEM    0FF  028   14   1  OP  JMPFI ( mem, interseg)     $NONE $MEM    0EB  000   16   1  OP  JMPS  ( short jump )       $NONE $MEM    076  000   21   1  OP  JNA                        $NONE $MEM    072  000   21   1  OP  JNAE                       $NONE $MEM    073  000   21   1  OP  JNB                        $NONE $MEM    077  000   21   1  OP  JNBE                       $NONE $MEM    073  000   21   1  OP  JNC                        $NONE $MEM    075  000   21   1  OP  JNE                        $NONE $MEM    07E  000   21   1  OP  JNG                        $NONE $MEM    07C  000   21   1  OP  JNGE                                                                                     \ mnemonics                                      23:16 12/15/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $MEM    07D  000   21   1  OP  JNL                        $NONE $MEM    07F  000   21   1  OP  JNLE                       $NONE $MEM    071  000   21   1  OP  JNO                        $NONE $MEM    07B  000   21   1  OP  JNP                        $NONE $MEM    079  000   21   1  OP  JNS                        $NONE $MEM    075  000   21   1  OP  JNZ                        $NONE $MEM    070  000   21   1  OP  JO                         $NONE $MEM    07A  000   21   1  OP  JP                         $NONE $MEM    07A  000   21   1  OP  JPE                        $NONE $MEM    07B  000   21   1  OP  JPO                        $NONE $MEM    078  000   21   1  OP  JS                         $NONE $MEM    074  000   21   1  OP  JZ                                                                                       \ mnemonics                                       15:05 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   09F  000   17   1  OP  LAHF                       $REG  $M/R    0C5  000   2    1  OP  LDS    ( reg,mem/reg )     $REG  $M/R    08D  000   2    1  OP  LEA    ( reg,mem/reg )     $NONE  $NONE  0C9  000   17   1  OP  LEAVE  ( 286 )             $REG  $M/R    0C4  000   2    1  OP  LES    ( reg,mem/reg )     $REG  $M/R    0B4  000 2 $0F + 1 OP  LFS    ( *reg,m/r 386 )    $REG  $M/R    0B5  000 2 $0F + 1 OP  LGS    ( *reg,m/r 386 )    $REG  $M/R    0B2  000 2 $0F + 1 OP  LSS    ( *reg,m/r 386 )    $NONE $NONE   0F0  000   17   1  OP  LOCK                                                                                                                                                                                                                                                                                     \ mnemonics                                       15:05 09/22/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   0AC  000   0E   1  OP  LODS                       $NONE $NONE   0AC  000   17   1  OP  LODSB                      $NONE $NONE   066  0AD   18   1  OP  LODSW                      $NONE $NONE   0AD  000   17   1  OP  LODSD                                                                                      $NONE $MEM    0E2  000   16   1  OP  LOOP                       $NONE $MEM    0E1  000   16   1  OP  LOOPE                      $NONE $MEM    0E0  000   16   1  OP  LOOPNE                     $NONE $MEM    0E0  000   16   1  OP  LOOPNZ                     $NONE $MEM    0E1  000   16   1  OP  LOOPZ                                                                                                                                                                                                                    ( mnemonics                                    16:45 01/20/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $M/R  $SEG    08C  000   3                ( mem/reg,segreg  )   $SEG  $M/R    08E  000   3                ( segreg,mem/reg  )   $M/R  $SEG2   08C  000   3                ( *mem/reg,FS/GS  )   $SEG2 $M/R    08E  000   3                ( *FS/GS,mem/reg  )   $M/R  $REG    088  000   7                ( mem/reg,reg     )   $REG  $M/R    088  000   6                ( reg,mem/reg     )   $M/R  $IMM    0C6  000   9                ( mem/reg,data    )   $REG  $IMM    0B0  000   11               ( reg,data        )   $MEM  $ACC    0A2  000   0D               ( mem,ac          )   $ACC  $MEM    0A0  000   0D  0A  OP  MOV  ( ac,mem          )   $REG  $M/R    0BE  000 01D $0F + 1 OP  MOVSX ( *reg,mem/reg )   $REG  $M/R    0B6  000 01D $0F + 1 OP  MOVZX ( *reg,mem/reg )                                                                 ( mnemonics                                    16:45 01/20/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   0A4  000   0E   1  OP  MOVS                       $NONE $NONE   0A4  000   17   1  OP  MOVSB                      $NONE $NONE   066  0A5   18   1  OP  MOVSW                      $NONE $NONE   0A5  000   17   1  OP  MOVSD                                                                                      $ACC  $M/R    0F6  020   5                ( ac,mem/reg      )   $NONE $M/R    0F6  020   5    2  OP  MUL  ( [ac],mem/reg    )   $NONE $M/R    0F6  018   5    1  OP  NEG  ( mem/reg         )   $NONE $NONE   090  000   17   1  OP  NOP                        $NONE $M/R    0F6  010   5    1  OP  NOT  ( mem/reg         )                                                                                                                                                                                                 \ mnemonics                                       16:30 09/19/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    008  000   6                ( reg,mem/reg     )   $M/R  $REG    008  000   7                ( mem/reg,reg     )   $M/R  $IMM    080  008   9                ( mem/reg,data    )   $ACC  $IMM    00C  000   0C   4  OP  OR   ( ac,data         )   W$REG $ACC    0EE  000   0F               ( DX,ac           )   $MEM  $ACC    0E6  000   0F   2  OP  OUT  ( port,ac         )   $NONE $NONE   06E  000   0E   1  OP  OUTS ( 286 )               $NONE $SEG2   081  000   13 $0F +          ( *segreg        )   $NONE $SEG    007  000   13                ( pop segreg     )   $NONE $M/R    08F  000   1                 ( mem/reg        )   $NONE W$REG   058  000   10   4  OP  POP   ( reg16          )                                                                                                                                 \ mnemonics                                       16:31 09/19/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   066  061   18   1  OP  POPA  ( 286 )              $NONE $NONE   061  000   17   1  OP  POPAD ( *386 )             $NONE $NONE   066  09D   18   1  OP  POPF                       $NONE $NONE   09D  000   17   1  OP  POPFD                                                                                      $NONE $IMM    068  000   1B                ( immediate 286  )   $NONE $SEG2   080  000   13 $0F +          ( *segreg        )   $NONE $SEG    006  000   13                ( push segreg    )   $NONE $M/R    0FF  030   1                 ( mem/reg        )   $NONE W$REG   050  000   10   5  OP  PUSH  ( reg16          )                                                                                                                                                                                                 \ mnemonics                                       16:31 09/19/86( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   066  060   18   1  OP  PUSHA ( 286 )              $NONE $NONE   060  000   17   1  OP  PUSHAD ( *386 )            $NONE $NONE   066  09C   18   1  OP  PUSHF                      $NONE $NONE   09C  000   17   1  OP  PUSHFD ( * )                                                                               $M/R  $CNT    0D0  010   8    1  OP  RCL   ( mem/reg,count  )   $M/R  $CNT    0D0  018   8    1  OP  RCR   ( mem/reg,count  )   $NONE $NONE   0F3  000   17   1  OP  REP                        $NONE $NONE   0F3  000   17   1  OP  REPE                       $NONE $NONE   0F2  000   17   1  OP  REPNE                      $NONE $NONE   0F2  000   17   1  OP  REPNZ                      $NONE $NONE   0F3  000   17   1  OP  REPZ                                                                                     ( mnemonics                                    10:03 01/17/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $MEM    0C2  000   1A               ( disp16 )            $NONE $NONE   0C3  000   17   2  OP  RET                        $NONE $MEM    0CA  000   1A               ( disp16 )            $NONE $NONE   0CB  000   17   2  OP  RETF                       $M/R  $CNT    0D0  000   8    1  OP  ROL  ( mem/reg,count  )    $M/R  $CNT    0D0  008   8    1  OP  ROR  ( mem/reg,count  )    $NONE $NONE   09E  000   17   1  OP  SAHF                       $M/R  $CNT    0D0  020   8    1  OP  SAL  ( mem/reg,count  )    $M/R  $CNT    0D0  038   8    1  OP  SAR  ( mem/reg,count  )                                                                                                                                                                                                                                                                  ( mnemonics                                    10:03 01/17/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    018  000   6                ( reg,mem/reg     )   $M/R  $REG    018  000   7                ( mem/reg,reg     )   $M/R  $IMM    080  018   0A               ( mem/reg,data    )   $ACC  $IMM    01C  000   0C   4  OP  SBB  ( ac,data         )                                                                   $NONE $NONE   0AE  000   0E   1  OP  SCAS                       $NONE $NONE   0AE  000   17   1  OP  SCASB                      $NONE $NONE   066  0AF   18   1  OP  SCASW                      $NONE $NONE   0AF  000   17   1  OP  SCASD                                                                                                                                                                                                                                                                                    \ mnemonics         80386                        23:12 12/16/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $M/R    097  000 01 $0F +  1  OP  SETA   \ mem/reg        $NONE $M/R    092  000 01 $0F +  1  OP  SETB   \ mem/reg        $NONE $M/R    096  000 01 $0F +  1  OP  SETBE  \ mem/reg        $NONE $M/R    094  000 01 $0F +  1  OP  SETE   \ mem/reg        $NONE $M/R    092  000 01 $0F +  1  OP  SETC   \ mem/reg        $NONE $M/R    09F  000 01 $0F +  1  OP  SETG   \ mem/reg        $NONE $M/R    09D  000 01 $0F +  1  OP  SETGE  \ mem/reg        $NONE $M/R    09C  000 01 $0F +  1  OP  SETL   \ mem/reg        $NONE $M/R    09E  000 01 $0F +  1  OP  SETLE  \ mem/reg        $NONE $M/R    096  000 01 $0F +  1  OP  SETNA  \ mem/reg        $NONE $M/R    092  000 01 $0F +  1  OP  SETNAE \ mem/reg        $NONE $M/R    093  000 01 $0F +  1  OP  SETNB  \ mem/reg                                                                      \ mnemonics         80386                        23:12 12/16/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $M/R    097  000 01 $0F +  1  OP  SETNBE \ mem/reg        $NONE $M/R    093  000 01 $0F +  1  OP  SETNC  \ mem/reg        $NONE $M/R    095  000 01 $0F +  1  OP  SETNE  \ mem/reg        $NONE $M/R    09E  000 01 $0F +  1  OP  SETNG  \ mem/reg        $NONE $M/R    09C  000 01 $0F +  1  OP  SETNGE \ mem/reg        $NONE $M/R    09D  000 01 $0F +  1  OP  SETNL  \ mem/reg        $NONE $M/R    09F  000 01 $0F +  1  OP  SETNLE \ mem/reg        $NONE $M/R    091  000 01 $0F +  1  OP  SETNO  \ mem/reg        $NONE $M/R    09B  000 01 $0F +  1  OP  SETNP  \ mem/reg        $NONE $M/R    099  000 01 $0F +  1  OP  SETNS  \ mem/reg        $NONE $M/R    095  000 01 $0F +  1  OP  SETNZ  \ mem/reg                                                                                                                                      \ mnemonics                                      23:12 12/16/87 ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $M/R    09A  000 01 $0F +  1  OP  SETP   \ mem/reg        $NONE $M/R    09A  000 01 $0F +  1  OP  SETPE  \ mem/reg        $NONE $M/R    09B  000 01 $0F +  1  OP  SETPO  \ mem/reg        $NONE $M/R    090  000 01 $0F +  1  OP  SETO   \ mem/reg        $NONE $M/R    098  000 01 $0F +  1  OP  SETS   \ mem/reg        $NONE $M/R    094  000 01 $0F +  1  OP  SETZ   \ mem/reg                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( mnemonics                                    10:03 01/17/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $M/R  $CNT    0D0  020   8    1  OP  SHL  ( mem/reg,count   )   $M/R  $CNT    0D0  028   8    1  OP  SHR  ( mem/reg,count   )   $NONE $NONE   036  000   17   1  OP  SS:                        $NONE $NONE   0F9  000   17   1  OP  STC                        $NONE $NONE   0FD  000   17   1  OP  STD                        $NONE $NONE   0FB  000   17   1  OP  STI                        $NONE $NONE   0AA  000   0E   1  OP  STOS                       $NONE $NONE   0AA  000   17   1  OP  STOSB                      $NONE $NONE   066  0AB   18   1  OP  STOSW                      $NONE $NONE   0AB  000   17   1  OP  STOSD                                                                                                                                                                                                                    ( mnemonics                                    10:03 01/17/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $REG  $M/R    028  000   6                 ( reg,mem/reg   )    $M/R  $REG    028  000   7                 ( mem/reg,reg   )    $M/R  $IMM    080  028   0A                ( mem/reg,data  )    $ACC  $IMM    02C  000   0C   4  OP  SUB   ( ac,data       )    $REG  $M/R    084  000   4                 ( reg,mem/reg   )    $M/R  $IMM    0F6  000   9                 ( mem/reg,data  )    $ACC  $IMM    0A8  000   0C   3  OP  TEST  ( ac,data       )    $NONE $NONE   09B  000   17   1  OP  WAIT                       $REG  $M/R    086  000   4                 ( reg,mem/reg   )    W$ACC W$REG   090  000   10                ( ac,reg16      )    $NONE W$REG   090  000   10   3  OP  XCHG  ( [ac],reg16    )                                                                                                                                  ( mnemonics                                    16:45 01/20/86 ) ( dest  source  op1  op2  grp  types   mnemonic               )                                                                   $NONE $NONE   0D7  000   17   1  OP  XLAT                       $REG  $M/R    030  000   6                 ( reg,mem/reg    )   $M/R  $REG    030  000   7                 ( mem/reg,reg    )   $M/R  $IMM    080  030   09                ( mem/reg,data   )   $ACC  $IMM    034  000   0C   4  OP  XOR   ( ac,datamnemonics                                00:29 12/16/87 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $NONE   0DE  0D9   18   1  OP  FCOMPP                     $NONE $NONE   0D9  0E4   18   1  OP  FTST                       $NONE $NONE   0D9  0E5   18   1  OP  FXAM                       $NONE $NONE   0D9  0FA   18   1  OP  FSQRT                      $NONE $NONE   0D9  0FD   18   1  OP  FSCALE                     $NONE $NONE   0D9  0F8   18   1  OP  FPREM                      $NONE $NONE   0D9  0FC   18   1  OP  FRNDINT                    $NONE $NONE   0D9  0F4   18   1  OP  FXTRACT                    $NONE $NONE   0D9  0E1   18   1  OP  FABS                       $NONE $NONE   0D9  0E0   18   1  OP  FCHS                                                                                     .THEN                                                           \ 80X87 mnemonics                                00:30 12/16/87 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $NONE   0D9  0FE   18   1  OP  FSIN                       $NONE $NONE   0D9  0FF   18   1  OP  FCOS                       $NONE $NONE   0D9  0FB   18   1  OP  FSINCOS                    $NONE $NONE   0D9  0F2   18   1  OP  FPTAN                      $NONE $NONE   0D9  0F3   18   1  OP  FPATAN                     $NONE $NONE   0D9  0F0   18   1  OP  F2XM1                      $NONE $NONE   0D9  0F1   18   1  OP  FYL2X                      $NONE $NONE   0D9  0F9   18   1  OP  FYL2XP1                    $NONE $NONE   0D9  0EE   18   1  OP  FLDZ                       $NONE $NONE   0D9  0E8   18   1  OP  FLD1                                                                                     .THEN                                                           ( 80X87 mnemonics                              11:09 01/24/86 ) 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $NONE   0D9  0EB   18   1  OP  FLDPI                      $NONE $NONE   0D9  0E9   18   1  OP  FLDL2T                     $NONE $NONE   0D9  0EA   18   1  OP  FLDL2E                     $NONE $NONE   0D9  0EC   18   1  OP  FLDLG2                     $NONE $NONE   0D9  0ED   18   1  OP  FLDLN2                     $NONE $NONE   0DB  0E3   18   1  OP  FINIT                      $NONE $NONE   0DB  0E0   18   1  OP  FENI                       $NONE $NONE   0DB  0E1   18   1  OP  FDISI                      $NONE $NONE   0DB  0E2   18   1  OP  FCLEX                      $NONE $NONE   0D9  0F7   18   1  OP  FINCSTP                                                                                  .THEN                                                           ( 80X87 mnemonics                              11:09 01/24/86 ) 80387? .IF                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $NONE   0D9  0F6   18   1  OP  FDECSTP                    $NONE $NONE   0D9  0D0   18   1  OP  FNOP                       $NONE $M/R    0D9  028   1    1  OP  FLDCW                      $NONE $M/R    0D9  038   1    1  OP  FSTCW                      $NONE $M/R    0DD  038   1                                      $NONE $ACC    0DF  0E0   1    2  OP  FSTSW                      $NONE $M/R    0D9  030   1    1  OP  FSTENV                     $NONE $M/R    0D9  020   1    1  OP  FLDENV                     $NONE $M/R    0DD  030   1    1  OP  FSAVE                      $NONE $M/R    0DD  020   1    1  OP  FRSTOR                     $NONE $ST87   0DD  0C0   28   1  OP  FFREE                      $NONE $ST87   0D9  0C8   28   1  OP  FXCH                     .THEN                                                           \ 80X87 mnemonics                                16:16 01/04/88 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $ST87   0D9  0C0   28                                     $NONE $M/R    0D9  000   29   2  OP  FLD      ( 64b real )      $NONE $M/R    0D9  000   2B   1  OP  FILD                       $NONE $M/R    0DB  028    1   1  OP  FTLD     ( Temp real )     $NONE $M/R    0DF  020    1   1  OP  FBLD     ( BCD )                                                                           $NONE $ST87   0DD  0D8   28                                     $NONE $M/R    0D9  018   29   2  OP  FSTP                       $NONE $M/R    0D9  018   2B   1  OP  FISTP                      $NONE $M/R    0DB  038    1   1  OP  FTSTP    ( temp real )     $NONE $M/R    0DF  030    1   1  OP  FBSTP    ( BCD )         .THEN                                                           ( 80X87 mnemonics                              11:09 01/24/86 ) 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $ST87   0DD  0D0   28                                     $NONE $M/R    0D9  010   29   2  OP  FST      ( 64b real )      $NONE $M/R    0D9  010   2A   1  OP  FIST                                                                                       $NONE $ST87   0D8  0D0   28                                     $NONE $M/R    0D8  010   29   2  OP  FCOM                       $NONE $M/R    0D8  010   2A   1  OP  FICOM                                                                                      $NONE $ST87   0D8  0D8   28                                     $NONE $M/R    0D8  018   29   2  OP  FCOMP                      $NONE $M/R    0D8  018   2A   1  OP  FICOMP   ( 32b int )     .THEN                                                           ( 80X87 mnemonics                              11:09 01/24/86 ) 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $ST87   0D8  0C0   28                                     $NONE $M/R    0D8  000   29   2  OP  FADD                       $NONE $ST87   0DE  0C0   28   1  OP  FADDP                      $NONE $M/R    0D8  000   2A   1  OP  FIADD                                                                                      $NONE $ST87   0D8  0C8   28                                     $NONE $M/R    0D8  008   29   2  OP  FMUL                       $NONE $ST87   0DE  0C8   28   1  OP  FMULP                      $NONE $M/R    0D8  008   2A   1  OP  FIMUL                                                                                    .THEN                                                                                                                           ( 80X87 mnemonics                              11:09 01/24/86 ) 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $ST87   0D8  0E0   28                                     $NONE $M/R    0D8  020   29   2  OP  FSUB                       $NONE $ST87   0DE  0E0   28   1  OP  FSUBP                      $NONE $M/R    0D8  020   2A   1  OP  FISUB                                                                                      $NONE $ST87   0D8  0E8   28                                     $NONE $M/R    0D8  028   29   2  OP  FSUBR                      $NONE $ST87   0DE  0E8   28   1  OP  FSUBRP                     $NONE $M/R    0D8  028   2A   1  OP  FISUBR                                                                                   .THEN                                                                                                                           ( 80X87 mnemonics                              11:08 01/24/86 ) 80387? .IF                                                                                                                      ( dest  source  op1  op2  grp  types   mnemonic               )   $NONE $ST87   0D8  0F0   28                                     $NONE $M/R    0D8  030   29   2  OP  FDIV                       $NONE $ST87   0DE  0F0   28   1  OP  FDIVP                      $NONE $M/R    0D8  030   2A   1  OP  FIDIV                                                                                      $NONE $ST87   0D8  0F8   28                                     $NONE $M/R    0D8  038   29   2  OP  FDIVR                      $NONE $ST87   0DE  0F8   28   1  OP  FDIVRP                     $NONE $M/R    0D8  038   2A   1  OP  FIDIVR                                                                                   .THEN                                                                                                                           \ destination register handling                  14:52 09/19/89 FORTH DEFINITIONS -HEADERS                                                                                                      : DREG  CREATE   C, C, C,                                               DOES>    DUP C@ DUP 0FF =                                       IF    DROP                    ( WORD/BYTE unspecified )         ELSE  <WD> !                                                    THEN  1+ DUP C@ <TD> !                 ( operand type )         1+ C@ <RD> !                              ( R/M field )         <TD> @ DUP $IDX = SWAP $IDX2 = OR         \ any offset?         IF    ADEPTH 0>                                                       IF    <OD> !                                                    THEN                                                      THEN ;                                                                                                                                                                                  \ source register handling                       14:34 09/19/89                                                                 : SREG  CREATE  C, C, C,                                                DOES>   DUP C@ DUP 0FF =                                        IF    DROP ELSE <WS> !                                          THEN  1+ DUP C@ <TS> ! 1+ C@ <RS> !                             <TS> @ DUP $IDX = SWAP $IDX2 = OR          \ any offset?        IF   ADEPTH 0>                                                       IF   <OS> !                                                     THEN                                                       THEN ;                                                                                                                                                                                                                                                                                                                                                                                  \ 8086 registers                               2 14:52 09/19/89 ASM DEFINITIONS HEADERS                                                                                                         ( r/m type w )            ( r/m type w )                           0  $ACC 0  SREG AL        0  $ACC 0  DREG AL,                   1  $REG 0  SREG CL        1  $REG 0  DREG CL,                   2  $REG 0  SREG DL        2  $REG 0  DREG DL,                   3  $REG 0  SREG BL        3  $REG 0  DREG BL,                   4  $REG 0  SREG AH        4  $REG 0  DREG AH,                   5  $REG 0  SREG CH        5  $REG 0  DREG CH,                   6  $REG 0  SREG DH        6  $REG 0  DREG DH,                   7  $REG 0  SREG BH        7  $REG 0  DREG BH,                                                                                                                                                                                                                                                                                \ 8086 registers                                  16:34 09/30/86                                                                ( r/m type w )            ( r/m type w )                           0  $ACC 1  SREG AX        0  $ACC 1  DREG AX,                   1  $REG 1  SREG CX        1  $REG 1  DREG CX,                   2  $REG 1  SREG DX        2  $REG 1  DREG DX,                                                                                   3  $REG 1  SREG BX        3  $REG 1  DREG BX,                                                                                   4  $REG 1  SREG SP        4  $REG 1  DREG SP,                   5  $REG 1  SREG BP        5  $REG 1  DREG BP,                   6  $REG 1  SREG SI        6  $REG 1  DREG SI,                   7  $REG 1  SREG DI        7  $REG 1  DREG DI,                                                                                                                                                                                                                \ 80386 registers                                17:07 09/16/87                                                                 ( r/m type w )            ( r/m type w )                           0  $ACC 2  SREG EAX        0  $ACC 2  DREG EAX,                 1  $REG 2  SREG ECX        1  $REG 2  DREG ECX,                 2  $REG 2  SREG EDX        2  $REG 2  DREG EDX,                                                                                 3  $REG 2  SREG EBX        3  $REG 2  DREG EBX,                 3  $REG 2  SREG TOS        3  $REG 2  DREG TOS,                                                                                 4  $REG 2  SREG ESP        4  $REG 2  DREG ESP,                 5  $REG 2  SREG EBP        5  $REG 2  DREG EBP,                 6  $REG 2  SREG ESI        6  $REG 2  DREG ESI,                 7  $REG 2  SREG EDI        7  $REG 2  DREG EDI,                                                                                                                                              \ 80386 registers                                17:08 09/16/87 \ 1 byte MODRM format, ds:base_reg[+disp], no index reg                                                                         ( r/m type  w )                   ( r/m type  w )                  0  $IDX -1  SREG [EAX]            0  $IDX -1  DREG [EAX],       1  $IDX -1  SREG [ECX]            1  $IDX -1  DREG [ECX],       2  $IDX -1  SREG [EDX]            2  $IDX -1  DREG [EDX],       3  $IDX -1  SREG [EBX]            3  $IDX -1  DREG [EBX],       3  $IDX -1  SREG [TOS]            3  $IDX -1  DREG [TOS],                                                                       5  $IDX -1  SREG [EBP]            5  $IDX -1  DREG [EBP],       6  $IDX -1  SREG [ESI]            6  $IDX -1  DREG [ESI],       7  $IDX -1  SREG [EDI]            7  $IDX -1  DREG [EDI],                                                                         ( 4 is escape to 2-byte MODRM format, 5+MOD00 is Disp32 )                                                                  \ 80386 registers                                13:04 04-03-89 \ 2 byte MODRM format, seg:base_reg[+disp], no index or scaling                                                                 ( r/m type  w )                   ( r/m type  w )                                                                                 44  $IDX2 -1  SREG [ESP]         44  $IDX2 -1  DREG [ESP],                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \ 80386 registers                                13:20 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = EAX = 0                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:20 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = ECX = 1                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:21 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = EDX = 2                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:21 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = EBX = 3                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:21 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = EBP = 5                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:21 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = ESI = 6                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                13:21 04-03-89 \ 2 byte MODRM format, seg:[scale*]ix+base[+disp]               \ index = EDI = 7                                                                                                               ( r/m type  w )                 ( r/m type  wregisters                                 09:24 09/19/87                                                                 ( r/m type   w )            ( r/m type   w )                       0  $SEG  -1  SREG ES        0  $SEG  -1  DREG ES,               1  $SEG  -1  SREG CS     (  1  $SEG  -1  DREG CS, )             2  $SEG  -1  SREG SS        2  $SEG  -1  DREG SS,               3  $SEG  -1  SREG DS        3  $SEG  -1  DREG DS,               4  $SEG2 -1  SREG FS        4  $SEG2 -1  DREG FS,               5  $SEG2 -1  SREG GS        5  $SEG2 -1  DREG GS,                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( 8087 registers                               09:42 01/24/86 ) 80387? .IF                                                                                                                      ( r/m  type   w )                                                                                                                  0  $ST87  -1   SREG  ST(0)                                      1  $ST87  -1   SREG  ST(1)                                      2  $ST87  -1   SREG  ST(2)                                      3  $ST87  -1   SREG  ST(3)                                      4  $ST87  -1   SREG  ST(4)                                      5  $ST87  -1   SREG  ST(5)                                      6  $ST87  -1   SREG  ST(6)                                      7  $ST87  -1   SREG  ST(7)                                                                                                   .THEN                                                                                                                           \ pseudoops                                    1 14:37 09/19/89 ( --- ; set immediate data flag )                               : #             $IMM <TS> ! ;                                                                                                   ( addr --- ; indicates direct addressing for destination )      : ,             $MEM <TD> !  !DOFFS ;                                                                                           ( b --- ; compile 8 bits of data )                              : DB,           TC, ;                                                                                                           ( w --- ; compile 16 bits of data )                             : DW,           DUP TC, 100 / TC, ;                                                                                             ( n --- ; compile 32 bits of data )                             : DD,           T, ;                                                                                                            \ pseudoops                                    1 14:12 09/19/89                                                                 ( --- ; force BYTE operand type )                               : BYTE          <WD> OFF  <WS> OFF ;                                                                                            ( --- ; force WORD operand type )                               : WORD          1 <WD> !  1 <WS> ! ;                                                                                            ( --- ; force DOUBLE WORD operand type )                        : DWORD         2 <WD> !  2 <WS> ! ;                                                                                            ( --- ; force QUAD WORD operand type )                          : QWORD         3 <WD> !  3 <WS> ! ;                                                                                                                                                                                                                            \ 80386 extended addressing modes scale factors  14:12 09/19/89                                                                 ( --- ; for all )                                               : [2*]      1 <SCALE> ! ;                                       : [4*]      2 <SCALE> ! ;                                       : [8*]      3 <SCALE> ! ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \ macros                                         11:28 10/06/89 80387? .IF                                                                                                                      : FDUP          0D9 TC, 0C0 TC, ;             ( ST<0> FLD  )    : FSWAP         0D9 TC, 0C9 TC, ;             ( ST<1> FXCH )    : FDROP         0DD TC, 0D8 TC, ;             ( ST<0> FSTP )    : FOVER         0D9 TC, 0C1 TC, ;             ( ST<1> FLD  )    : FNIP          0DD TC, 0D9 TC, ;             ( ST<1> FSTP )                                                                    .THEN                                                                                                                           : NEXT,         DWORD LODS  [EAX] JMP ;                                                                                                                                                                                                                                                                                         \ transition words                               14:58 09/19/89 FORTH DEFINITIONS -HEADERS                                                                                                      ( --- ; set up to begin assembly )                              : READY         FRCLR  RESET ;                                                                                                  ( --- ; perform error checking at end of assembly )             : CHECK         FRCHK  RESET ;                                                                                                  ASM DEFINITIONS HEADERS                                         ( --- ; terminate a PROC definition )                           : END-PROC      CHECK  ?EXEC ?CSP  [COMPILE] FORTH ;                                                                            ( --- ; terminate a CODE definition )                           : END-CODE      [COMPILE] END-PROC  UNSMUDGE ;                                                                                  \ PROC CODE ;CODE                                14:58 09/19/89 FORTH DEFINITIONS HEADERS                                       ( --- ; begin a PROC definition )                               : PROC      ?EXEC !CSP CREATE  ASM READY FORTH                              [COMPILE] ASM ;                                                                                                     ( --- ; begin a CODE definition )                               : CODE      [COMPILE] PROC   SMUDGE                                         ASM  T-HERE DUP  WSIZE -  T!  ;                                                                                     ( --- ; transition word for CREATE...;CODE defining word )      : ;CODE     ?CSP UNSMUDGE  COMPILE ;code                                    ASM READY FORTH  [COMPILE] ASM                                  [COMPILE] [ ;            ( turn off compile state )             IMMEDIATE                                                                                                           