
                                                              
                                                              
: CLARY HERE OVER ERASE ALLOT ;                               
: ZARY,  HERE DUP PUSH 2- EXEC POP - CLARY ;                  
: -USE SCRH 1+ 0; SCRH FClose -1 TO SCRH ;                    
: USING FLUSH -USE FNAME FOPEN TO SCRH ;                      
: BYE CLOSE-ALL FLUSH -USE (BYE ;                             
: FLUSH SAVE-BUFS EMPTY-BUFS ;                                
                                                              
                                                              
                                                              
                                                                                                                                                                                                                                                                                                                              PAGE  AT HANDLES  DUP 2+ SWAP!                                                                                                  EXIT                                                               2 LOAD                                                         57 LOAD                                                         20 LOAD                                                         70 LOAD                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       -1024 VALUE THERE : <H HERE THERE TO HERE TO THERE ; ' <H =: H> : `SOURCE BLK ETIB 0?SKIP NIP; DUP 0; BLOCK 1K + DUP TO ETIB ;  META `SOURCE SOURCE                                                                                                             D0 2  FAMILY VALUE `PDATA `INS                                  0 VECTOR `'ADVANCE              : PAGE 0 24 @XY PAGE ;          : L/ 1L NEG AND ;    { LINE BEGIN FUNCTION }                    : ?EXIST; LOCATE 0= 0?SKIP DROP; RDROP                          : \ BLK IF LTIB 1- L/ TO LTIB ;THEN ,< ,' \` >, ;  ' \ =: \`    : <? 2DUP : < - 0< ;            : >SORT <? 0; SWAP ;            : MIN >SORT NIP; ,<             : MAX >SORT DROP; ,<            : BACK3 POP 6 - PUSH ;                                          0 VALUE DPTR  0 VALUE ADR  0 VALUE NPTR                         : DNEXT DPTR CSTR + @+ TO NPTR ;   : END? DUP TO DPTR C@ ;                                                                                                                                         2 LOAD  \ INIT                                                 57 LOAD  \ WORDS                                                20 LOAD  \ PRUNE  FORGET SAVE ...                               70 LOAD  \ EDIT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               { NVF2 INI }                                                    { $1221 IS SOURCE }                                             { -1 TO SCRH}                                                   { EMPTY-BUFS}                                                   { USING T123.GGG}                                               META @OK vOK.                                                   META (ERR v`HERE+! HERE DUP PUSH @ + POP ! ;                             : ;LIST DICT 0 HERE ! AHEAD BEGIN DUP CSTR + @+ PUSH J EXECUTE          IF CSWAP POP THEN  .C@ 0= UNTIL SKIP THEN POP RDROP ;                                                                   : `ADDLP ;DROP ;LIST  ADR U< 0;  DUP  1+ C@                       '` XOR 0; DUP  J OVER - HERE STR + OVER `HERE+! SWAP 1+       : `CMOVE ;2DROP LOOPS PUSH CSTR POP C!+ ;                       : `P TO ADR `ADDLP 1 `HERE+! ;                                  : FORGET '                                                      : FGT `P $E000 TO DICT HERE STR >DICT ADR TO HERE ;             : PRUNE HERE FGT ;                                                                                                                                                                                                                                                                                                              CREATE `O >, (DE ETIB (ACC @_INI ,<     0 VALUE `H              : `N, LOOPS : `W, STR : `, `H !+ TO `H ;     : `W+, `W, 2+ ;    : `WS, `W, : `S, SWAP : `WS+, `W, SWAP 2+ ;                                                                                                      : `INIT $100 TBL TO `H  7 `N, `O  `WS+,          `WS, `WS, `W+, 0 `, `W+, 0 `, 12 `N, `S, NIP 2 `N,  ADR `, 2+   8 `N, DROP $E000 `,  TBL `H                                   : `OVER-FWR OVER - : `FWR FHTOP FWRITE ; : SAVE TOKEN? FCREATE    ;FILE `P  `INIT  $152 ADR `OVER-FWR  HERE DUP @ 2+ `FWR ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                     { INIT TO START VALUES }                                        { $1221 IS SOURCE }                                             { -1 TO SCRH}                                                   { EMPTY-BUFS}                                                   { USING T123.GGG}                                               \ 0    IS  vOK.                                                 0    IS  vERR                                                   META (ACC ACCEPT                                                META (DE EMIT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   $8000 VALUE THERE                                               : <H HERE THERE TO HERE TO THERE ; ' <H =: H>                   : `SOURCE BLK ETIB 0?SKIP NIP; DUP 0; BLOCK 1K + DUP TO ETIB ;  META `SOURCE SOURCE                                                                                                             D0 2  FAMILY VALUE `PDATA `INS                                  0 VECTOR `'ADVANCE              : PAGE 0 24 @XY PAGE ;          : `L/ 1L NEG AND ;    { LINE BEGIN FUNCTION }                   : ?EXIST; LOCATE 0= 0?SKIP DROP; RDROP                          : \ BLK IF LTIB 1- `L/ TO LTIB ;THEN ,< ,' \` >, ;  ' \ =: \`   : <? 2DUP : < - 0< ;            : >SORT <? 0; SWAP ;            : MIN >SORT NIP; ,<             : MAX >SORT DROP; ,<            : BACK3 POP 6 - PUSH ;                                                                                                                                                                                                                                          : SHN3 CR SHN3 ;                                                SHN3 : 1+DXEP 1+ : DXEP DUP : XEP XCHG EXECUTE POP ;            SHN3 : PLACEBLOCKS PUSH 1- POP ;DROP OVER - LOOPS 1+DXEP        : PLACEBLK  { @ADR BLK }   BLOCK OVER 1K CMOVE 1K + ;           7 LOAD  \ META ETIB SOURCE                                      HERE 33 55 PLACEBLOCKS    SHN3                                                                                                  HERE SWAP OVER -   $170 EXECUTE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HERE 35 53 PLACEBLOCKS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \ FILE TO BLOCKS CONVERTER      \ MARKER F2B.                                                                                   : `?ADDLINE  PUSH I XY + LIT ,< 1K 1L - , >,   U< 0=             IF SCR 1+ DUP TO SCR BUFFER 1K BLANK UPDATE 1L TO XY THEN       SCR BLOCK XY + I CMOVE POP XY + 1L 1- OR 1+ 1K 1- AND TO XY ;                                                                  : F2B  TOKEN?  : "F2B FOPEN ;FILE  \ TO BLOCKS POINTED BY SCR     1K TO XY  NPAD CSTR  SKIP        \ PREPARE TO SAVE FILE NAME    BEGIN  vINIT  `?ADDLINE EOS?  UNTIL FLUSH ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   { WORDS}    8 VALUE `LINECOUNT                                                                                                  : `;CNTC  DPTR C@  CNTC + 73 U<      IF                               EX  CNTC 64 U< IF  1H 1- CNTC NOT AND SPACES                    EX bs          ;THEN           THEN                                 `LINECOUNT 1- TO `LINECOUNT                                 EX  `LINECOUNT                                                    0= IF (BK  27 <> bs TO `LINECOUNT SKIP THEN bs                  CR ;                                                                                                                    : `W1 `;CNTC  DNEXT TO ADR ADR H. DPTR ID. EX ;                                                                                 : WORDS CR DICT AHEAD BEGIN `W1 0;  NPTR THEN END? 0= UNTIL ;                                                                                                                                                                                                                                                                   20 LOAD   FORGET EDIT.  \ FORGET EDITOR                         : `SOURCE BLK ETIB 0?SKIP NIP; DUP 0; BLOCK 1K + DUP TO ETIB ;  META `SOURCE SOURCE                                              2 LOAD                 \ NEW EDITOR                            14 LOAD                 \ WORDS                                 19 LOAD                 \ PRUNE ALL THAT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \ REVERT MEMORY    A1 A2 BETWEEN TWO ADDRESSES                                                                                  ?EXIST; REVERT                                                                                                                  : TUCK  XEP J SWAP ;   : NUP XEP DUP ;  : ;GO @R+ XCHG PUSH ;                                                                   : REVERT   ;2DROP  BEGIN 1-  2DUP U< 0;                              PUSH PUSH  J C@  I C@  J C!    POP  C!+ POP  AGAIN ,<                                                                      : ONPLACE ;GO TO REVERT DXEP  TWICE NUP REVERT ;                                                                                \ : WDEL                                                                                                                                                                                                                                                                                                                        \ FILE TO BLOCKS CONVERTER                                      \ MARKER F2B.                                                   : NEWBLK  SCR 1+ DUP TO SCR BUFFER 1K BLANK UPDATE 1L TO XY ;   0 VALUE `LL                                                     : `?ADDLINE  DUP TO `LL XY + LIT ,< 1K 1L - , >,                     U< 0= IF  NEWBLK THEN                                           SCR BLOCK XY + `LL CMOVE  `LL XY + 1L 1- OR 1+ 1K 1- AND        TO XY ;                                                    : F2B  TOKEN?                                                   : "F2B FOPEN ;FILE              \ TO BLOCKS POINTED BY SCR        1K TO XY  NPAD CSTR  SKIP     \ PREPARE TO SAVE FILE NAME       BEGIN  vINIT  `?ADDLINE EOS?  UNTIL FLUSH ;                                                                                                                                                                                                                                                                                   \ BLOCKS TO FILE  CONVERTER                                     \ MARKER B2F.                                                   LIKE 2DROP; 1+  =: 2DROP  0 QUAN `OCBUF   0 VALUE `OHNDL        : FEMIT TO `OCBUF  AT `OCBUF 1  : FWR  `OHNDL  FWRITE ;         : ;OFILE TO `OHNDL  LIT TO EMIT  XCHG I @ PUSH LIT FEMIT J !         PUSH EX POP POP ! `OHNDL FCLOSE ;                          \ : ;PREP_BLKS PUSH 1- POP OVER - : ;DROP EX DROP ;             : TRIM< FOR DUP I + C@ bl = IF  CSWAP NEXT 0 ;THEN POP 1+ ;     : B2F  TOKEN? : "B2F FCREATE ;OFILE   \ FROM BLOCKS             : B2S { ;PREP_BLKS} ;RANGE LOOPS DXEP+ : LIST BLOCK             : .BLOCK 1H ;DROP LOOPS DUP 1L + XEP                            : .LINE 1L : TRTYPE TRIM<  : WRITELN TYPE CR ;                  : INDEX ;RANGE LOOPS DXEP+ J U. BLOCK .LINE ;                                                                                                                                                                                                                   \ SELF PRUNE SCREEN                                                                                                             <H                                                              HERE                                                                                                                            5 LOAD                                                                                                                          FGT                                                             H>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              { PRUNE BY ADDRESS}  : `HERE+! HERE  DUP PUSH @ + POP ! ;       : `DICTEL DPTR NPTR OVER - ; : `DEST HERE STR + ; 0 VALUE `H    : `ADD? DNEXT  ADR U< 0;  DPTR 1+ C@ '` XOR 0; `DICTEL `DEST     OVER `HERE+! SWAP 1+ : `CMOVE ;2DROP LOOPS PUSH CSTR POP C!+ ; : `P TO ADR   0 HERE !  DICT SKIP BEGIN  NPTR  END? WHILE         `ADD? REPEAT 1 `HERE+! ;  CREATE `O >, (DE ETIB (ACC @_INI ,< : FORGET ' : FGT `P $E000 TO DICT HERE STR >DICT  ADR TO HERE ; : `N, LOOPS : `W, STR : `, `H !+ TO `H ; : 'PRUNE ' 2+ @ FGT ;  : `WS, `W, : `S, SWAP : `WS+, `W, SWAP 2+ ; : PRUNE HERE FGT ;  : `W+, `W, 2+ ;  : `INIT $100 TBL TO `H  7 `N, `O  `WS+,          `WS, `WS, `W+, 0 `, `W+, 0 `, 12 `N, `S, NIP 2 `N,  ADR `, 2+   8 `N, DROP $E000 `,  TBL `H                                   : `OVER-FWR OVER - : `FWR FHTOP FWRITE ; : SAVE TOKEN? FCREATE    ;FILE `P  `INIT  $152 ADR `OVER-FWR  HERE DUP @ 2+ `FWR ;                                                                                                                                     \ NF7.NVF                                                                                                                       $13A =: HERE    $3E2 =: !       $235 =: ;`      $10C =: EMIT    $22F =: :       $27D =: =,      $215 =: C@      $273 =: ;HERE   $424 =: C!+   : C, ;HERE C!+ ;  $209 =: +       $207 =: -       HERE  $4B C,   HERE  $4B C,  $EB C,  $4F4 2 +                   HERE 1 + - C,  =, 1-  =, 2-                                                                                                     $259 =: ,       $1AC =: DROP;   $1EA =: DUP     $1FD =: ,<`     $48B =: >,      $29D =: WORD    $48D =: #DOES   $1F8 =: @                                                                       HERE $E8 C, #DOES HERE 2 + - ,  >, C@ WORD DROP; ,<             DUP =, \ 0 C,  =, { '} C,                                                                                                                                                                                                                                       $2BB =: #??     $3FE =, AND     $299 =: TOKEN?  $221 =: FIND    : LOCATE TOKEN? FIND 1 AND ;  : ' LOCATE #?? ;   : LIKE ' @ ;   : ,' ' , ;                                                                                                                      $24B =: SKIP    $1A8 =: ;DROP   $245 =: (NEXT   $4B1 =: (FOR    $444 =: PUSH    $47F =: EXECUTE $241 =: J       $20B =: STR     $1DD =: (ASTR   $219 =: CSTR    $247 =: RDROP   $253 =: POP     $194 =: (A"     $1FF =: 3+      $152 =: CNTC    $14C =: DICT    $118 =: vOK.    $1C2 =: ;DPUSH  $11C =: vERR    $1C4 =: >DICT   $128 =: TBUF    $24D =: ABORT   $158 =: STATE   $212 =: .C@     $27F =: =H      $487 =: @EXEC   $12C =: 0       $2BD =: ??      $39D =: (DE     $1AE =: @_INI   $4E6 =: ABS     $261 =: NUM,    $38B =: (ACC    $114 =: ACCEPT  $23B =: #,`     $2D0 =: (,EX    $257 =: ;COMMA  $4B8 =: 0?SKIP  $29B =: TOKEN   $1E5 =: XCHG    $2B1 =: ;SETSTR $2B9 =: ;TOK?   $4EF =: 0=      $130 =: bl                                                                      $269 =: NUMBER  $102 =: OPER[]  $205 =: OVER    $33E =: (PARS   $29F =: PARSE   $1D7 =: @R+     $110 =: SOURCE  $42A =: !+      $4C2 =: (#IF    $201 =: SWAP    $120 =: TBL     $124 =: TIB     $140 =: ETIB    $178 =: EVAL    $251 =: EX      $483 =: EXEC    $24F =: EXIT    $3A9 =: (FND    $4C8 =: (IF     $134 =: vINIT   $249 =: (JUMP   $146 =: LTIB    $36D =: (MPUSH  $1F2 =: LIT     $203 =: DROP    $37A =: (S!     $255 =: NIP;    $362 =: (NUM                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $4AD =: `_BARY  $2DA =: `_COMMA $40C =: `_CONS  $40B =: `_CONS2 $1CE =: `_DROP  $448 =: `_DUP   $4A9 =: `_LARY  $405 =: `_IJ    $42F =: `1P_NIP $4E3 =: `1P     $462 =: `2DROP  $4EB =: `NOT    $48F =: `DOES3  $182 =: `DOEVAL $3A2 =: `DOS_DX $4F4 =: `CF     $3FA =: `ADD    $411 =: `ADR    $491 =: `DOES   $490 =: `DOES2  $42E =: `2P_NIP $4E1 =: `3P     $1AA =: `ABORTX $165 =: `ABORT  $2DF =: `_MAKER $4A0 =: `_POINT $434 =: `_RLD@  $439 =: `_RST@  $496 =: `EX     $472 =: `EXEC   $4CA =: `IF     $4CF =: `JUMP   $4CC =: `JUMPDR $498 =: `LBL    $21C =: `LDB    $49A =: `MAIN   $16E =: `MAINLP $4EA =: `NEG    $497 =: `NEST   $47D =: `NEST2  $41D =: `DROP   $416 =: `DROPX  $461 =: `2DROPX $4E2 =: `2P     $47A =: `NEST5  $4D3 =: `NEXT   $41F =: `NIP    $431 =: `NIPX   $2E6 =: `NUM    $3F1 =: `OVER   $3F2 =: `POP    $441 =: `PUSHW  $3EC =: `ROT    $4BF =: `SKIP   $3F8 =: `SUB    $4DB =: `SWAP   $4DA =: `SWAPX  $401 =: `XOR    $3E7 =: `_1M    $3E6 =: `_2M                                                                    $1D1 =: `TOPDROP        $1EC =: `TOPDUP        $386 =: `PUSH_DC $499 =: `RETURN         $1CF =: `SETDROP       $4BC =: `SKIPDR  $3AE =: `PUSH_SC        $440 =: `PUSHW2        $43F =: `PUSHW3  $450 =: `_PARAM1        $453 =: `_PARAM2       $456 =: `_PARAM3 $2C9 =: `_STATE         $3E8 =: `_TOP?         $3F5 =: `_VAR2   $4A5 =: `_SETPNT        $41B =: `_SETVAR       $44B =: `_CALL   $41A =: `_SETVAR2       $419 =: `_SETVAR3      $468 =: `_DEFERO $470 =: `_DEFER         $46F =: `_DEFER2       $40A =: `_CONS3  $47C =: `NEST3          $47B =: `NEST4         $4DE =: `RDROP   $46E =: `_DEFER3        $3F4 =: `_VAR3         $4AB =: `_WARY   $40E =: `_VAR                                                                                                                                                                                                                                                                                                                                                                                   { ":" - NOW DEFINES WORDS ON COMPILE STATE}                     LIKE ;` =, :` ,' SKIP ,' :                                      ' `2P  =, 2+            ' `1P  =, 1+  \ : C,R HERE 1+ - C, ;                                                                    HERE $E8 C, #DOES HERE    2+ - , >, C@ C, ;                     DUP =, #CAL, $E8 ,    DUP =, #JMP, $E9 ,    DUP =, JMPS, $EB ,  =, RET, $C3 ,                                                                                                                   : DOES, #DOES           : CALL, #CAL,   : ,R HERE    2+ - , ;                                                                   : CODE: HERE 2+ =, ;                                                                                                                                                                                                                                                                                                                                                                            LIKE ! =, U<    $2B C, $DF C, #JMP, ' `CF ,R                                                                                    CODE: 0<  $D1 C, $E3 C, #JMP, ' `CF ,R                                                                                          LIKE DUP =, U/MOD                                               $33 C, $C9 C, $91 C, $92 C, $F7 C, $F3 C, $93 C, $91 C, RET,                                                                    LIKE DUP =, SM*  $93 C, $F7 C, $EA C, $92 C, $93 C, RET,                                                                        LIKE DUP =, UM*    $93 C, $F7 C, $E2 C, $92 C, $93 C, RET,      ' `NEG =, NEG   ' `XOR =, XOR  ' `k EMIT  CR  '> EMIT ;    META  @OK vOK.          : LOOPS FOR  J EXECUTE NEXT RDROP ;  : SPACE bl EMIT ;          : ". CSTR : TYPE  ;DROP LOOPS CSTR EMIT ;  : ID.  ". SPACE ;    : (ERR  CR  TBUF ID.  STATE ".  CR  ;   META (ERR vERR          0 VALUE THERE : <H HERE THERE TO HERE  TO THERE ;                                                                               HERE TO THERE                                                   ' <H  ' THERE  ' ".  ' ??, $100  !- !- !- !-  FORGET COMPILE    STR =: <H   STR =: THERE  STR =: ". @ =: ??,                                                                                    : OP! 3 OPER[] ! ; : H> <H LIT ??, OP! ;  : <H <H LIT , OP! ;                                                                                                                                                                                                   $3EC =, ROT     $40E =: `_VAR   $40C =: `_CONS                  $41F =, NIP     $3F4 =: `_VAR3  $4AB =: `_WARY  $461 =: `2DROPX $4A5 =: `_SETPNT        $41A =: `_SETVAR2      $41B =: `_SETVAR $4A0 =: `_POINT         $40B =: `_CONS2         $40A =: `_CONS3 $46F =: `_DEFER2        $46E =: `_DEFER3        $470 =: ``;code POP : TOBE LATEST ! ;  LIKE ;` =, DOES>` >, `;code DOES, ,<     { WE HAVE DOES !}      LIKE :  =, CONST ' `_CONS , ,' , { CONSTANTS}                   LIKE :  =, CREATE ' `_VAR ,  0 =, BYE  { RETURNS ONLY ADDRESS } : (=) =H COMPILE ,< LIKE ;` , >, , , ; { DOERS}                                                                                 LIKE ;` =, :` ,' SKIP ,' :   { ":" - NOW DEFINES WORDS ON COMP} : BEGIN` HERE ;                  : >BEGIN` , ;                  : MRK>` HERE : Z, 0 , ;          : RLS>` HERE : SWAP! SWAP ! ;          ' \ =: \`       { COMPILING VERSION}                            ' { =: {`       { COMPILING VERSION}                                                                                                                                                                                                                                                                                    : TIMES SWAP PUSH                    { LOOPS & TIMES FUNCTIONS} : LOOPS (FOR MRK> BEGIN J EXECUTE (NEXT >BEGIN RLS> RDROP ;     : (" (ASTR ;    { STRING LITERAL}                               : (."    (ASTR  { COMPILETIME STRING LITERAL EMITER }           : ".     CSTR   { RUNTIME STRING LITERAL EMITER FUNCTION}       : TYPE   ;DROP  : ?TYPE  LOOPS CSTR                             : ?EMIT  DUP bl U< (IF MRK> DROP '. RLS>  EMIT ;                LIKE ;DPUSH =, ;SPC     : SPACE bl EMIT ;       : ID. ;SPC ". ;                                                                                                                                 <H  HERE DOES, >, C@ HERE #DOES ROT - CALL, >, ;  DUP DUP        =, 0]> 0 C,  =, 1]> 1 C,  =, 2]> 2 C,                          : RECURCE` LATEST , ;   { REFERENCE TO SELF IN SAME WORD}       H>                                                                                                                                                                                              ' `2DROPX  =, 2DROP;    LIKE ;DROP =, ;2DROP ,' 2DROP;          : DXEP+ 1+ : DXEP DUP : XEP XCHG EXECUTE POP ; : U1- XEP 1- ;                                                                   : @+ STR SWAP ; : !- 2- DXEP ! ;        : @- 2- DXEP @ ;        : ;@! @+ XCHG EXECUTE POP !- DROP; ,<                                                                                           : ;RANGE U1- OVER - : ;DROP EX DROP; ,<        : TWICE I PUSH ; : (CALL @R+ PUSH ;     : NUP XEP DUP ;  : ;GO @R+ XCHG PUSH ;   : TUCK  DUP : USWAP XEP SWAP ;          : -ROT ROT ROT ;        : BACK3 POP 6 - PUSH ;          : 0; 0?SKIP DROP; RDROP ;       : 2DUP OVER OVER ;                                                                                                                                                                                                                                                                                                                                                                              { CONSTANTS   VARIABLES VALUES  & DEFERS}                        16 CONST 1H      '0 CONST '0'     3 CONST 3       1 CONST  1   256 CONST 1B     255 CONST &BYTE  26 CONST eof     2 CONST  2   $5C CONST NPAD  1024 CONST 1K     64 CONST 1L     -1 CONST -1                                                                   : W>B &BYTE AND ;   : L>H 1B U* ;   : BB>W  L>H SWAP W>B XOR ;  : W>BB 1B U/MOD ;       : B>HH W>B 1H U/MOD ;   : 2* DUP + ;                                                                    : (,) CREATE , DOES> @ , ;           { commaers}                : META '   : IS '    2+ ! ;                                                                                                                                                                                                                                                                                                                                                                                                                                     { searching }                                                   <H      : >IP+ NOT 3  AND 2* POP + PUSH ;  0]> : `(TO C@ ' + ;  : W, STR ??, ;    { READ , COMPILE WORD & POSITION TO NEXT}     : (:) CREATE DUP C, >IP+ , , , ,'       { THE MAKER !!!}                DOES> CSTR =H >IP+ W, W, W, @EXEC ;                                                                                       { 0+ EXECUTES 2+ COMPILES 4+ ADDRESS}                           1]> `(TO , ; 2]> `(TO EXEC ; 3 (:) `TO C,                       2 `TO TO      ' TO 2+ DUP =: TO`  2+ =: TO'                     4 `TO AT      ' AT 2+ DUP =: AT`  2+ =: AT'                   : (",)  '" : (?",)   WORD       { PARSE & COMPILE STR     }     : CSTR, CSTR                    { COUNTED STRING COMPILE  }     : STR, ;HERE (S! DROP; ,<       { ADR COUNT STRING COMPILE}     H>                                                                                                                                                                                                0]> C@ EMIT ;   1]> C@ ;                                      <H           2 (:) CONST.C C,                                   ' `_DEFER    1 (:) DEFER ,                                      ' `_SETVAR   ' `_CONS2    2 (:) VALUE ,                         ' `_SETVAR   ' `_DEFER2   2 (:) VECTOR ,                        ' `_SETPNT   ' `_POINT    2 (:) POINT  ,                        ' `_VAR      ' `_SETVAR2  ' `_CONS3   3 (:) QUAN ,              ' `_VAR      ' `_SETVAR2  ' `_DEFER3  3 (:) VQUAN ,                                                                             0 VECTOR `vCREATE               : uOVER+ XEP : OVER+ OVER + ;   : FAMILY   ;2DROP ' TO `vCREATE LOOPS DUP uOVER+                        ;2DROP LTIB TOKEN? 1+ @ $2D2D XOR 0;                            RDROP TO LTIB `vCREATE ;                                H>                                                                                                                                                                                              10 CONST.C lf   13 CONST.C cr   8 CONST.C bs  '- CONST.C '-'                                                                    : ALPHA  9 OVER U<  7 AND + '0' + ;                             : H. W>BB (CALL MRK> : B. ;SPC RLS> B>HH TWICE                  : DIG.  ALPHA EMIT ;                                                                                                            : .   DUP 0< (IF MRK>  TO '-' ABS RLS>  : U.    ;SPC            : `U. lf U/MOD 0?SKIP RECURCE DIG. ;                                                                                            : ;[] '[ EMIT EX '] EMIT ;      : CR TO cr  TO lf  0 TO CNTC ;                                                                                                                                                                                                                                                                                                                                                                                                  : OR OVER NOT AND XOR ;                                         : WITHIN OVER - PUSH - POP U< ;                                 : 2/ 2 : U/ U/MOD NIP; ,<       : ODD 1 AND ;                   ' XOR =: <>     : = <> 0= ;     : C!- 1- DXEP : C! C!+ DROP; ,< : <? 2DUP : < - 0< ;            : >SORT <? 0; SWAP ;            : MIN >SORT NIP; ,<             : MAX >SORT DROP; ,<                                                                            : UMOD U/MOD DROP; ,<           : / U/MOD NIP ;  { !!!}         { : U* UM* DROP; ,<}` =: <RELEASE                                           : F> FSTACK FTOP XOR #?? ;FSTACK  @+ ;                          : CSWAP` F> F> SWAP TWICE       : >F ;FSTACK !- ;               : <RELEASE> <RELEASE : RELEASE> HERE F> ! ;                     : MARK> HERE >F Z, ;     : >MARK< MARK>  : <MARK BEGIN` ;       : CASE`  0 >F ;                                                 ' MARK>      '     (IF (=) IF`          ' RELEASE> =: THEN`     H>                                                              : (OF OVER <> @R+ SWAP IF XCHG SKIP THEN DROP DROP; ,<          <H                                                              ' RELEASE>   ' EXIT    (=) ;THEN`                                                                                                                                                               ' >MARK<   ' (FOR (=) FOR`      ' <RELEASE> ' (NEXT (=) NEXT`   ' <MARK    ' PUSH (=) FOR>`     ' <RELEASE  ' (NEXT (=) <NEXT`  ' MARK>    ' (CALL (=) CALL`    ' <RELEASE  ' (JUMP (=) AGAIN`  ' <RELEASE ' (IF (=) UNTIL`     ' MARK>     ' (JUMP (=) AHEAD`  ' MARK>    ' (#IF (=) #IF`      ' MARK>     ' (OF   (=) OF`                                                                     : REPEAT` AGAIN`  THEN` ;          ' IF`   =: WHILE`            : ELSE`   AHEAD` CSWAP` THEN` ;    ' ELSE` =: ENDOF`                                                                            : ENDCASE`  COMPILE DROP  BEGIN F> #IF >F THEN` REPEAT DROP ;                                                                   ' (",) ' ("   (=) "`    { STRING LITERALS  COMPILER      }      ' (",) ' (A"  (=) A"`   { STRING ERROR MESSAGES  COMPILER}      ' (",) ' (."  (=) ."`   { STRING LITERALS OUTPUT COMPILER}                                                                                                                                      H>  LIKE (DE =, (BE                                             $96 C, $31 C,  $DB C, $B4 C, $E C, $CD C, $10 C, $96 C, RET,                                                                    LIKE STR =, (BK                                                 $31 C,  $DB C,  $93 C,  $CD C,  $16 C,  $08 C,  $C0 C,  $74 C,  $02 C,  $30 C,  $E4 C,  $93 C,  RET,                                                                                            ' (BK VQUAN KEY                                                 : (AC   { ADR CNT / ADR CNT1 } OVER + PUSH DUP                    BEGIN  KEY     CASE                                                cr OF  DUP XCHG DROP  ENDOF                                     bs OF  2DUP <>  IF 1- TO bs SPACE  TO bs THEN  ENDOF            DUP bl 1B WITHIN  IF DUP EMIT SWAP C!+ DUP THEN                          ENDCASE    DUP I =                                  UNTIL RDROP OVER - 1 : SPACES LOOPS SPACE ;                                                                                   { : REGS _DX _CX _BX _AX ;}   : D0 0 0 ;  2 QUAN EOS            D0 9 FAMILY VALUE _AX _BX _CX _DX _FR BLK SCR XY SPTR           CODE: (IO                                                        $88 C,  $1E C,  HERE 12 + ,     $56 C,  $94 C,  $5B C,  $59 C,  $5F C,  $94 C,  $97 C,  $92 C,  $57 C,  $CD C,  $21 C,  $5F C,  $97 C,  $94 C,  $52 C,  $51 C,  $53 C,  $57 C,  $9C C,  $94 C,  #JMP, ' `2DROPX ,R     : IO? _FR ODD A" :IO?" ;                                                                                : CMOVE ;2DROP LOOPS PUSH CSTR POP C!+ ;                        : CMOVE> SWAP OVER + (MPUSH DROP ;                              : >S SPTR OVER PUSH (MPUSH XCHG POP C!- TO SPTR ;                0]> C@  : FILL  -ROT ;2DROP LOOPS NUP C!+ ;                    DUP =, ERASE 0 C,  =, BLANK bl C,                                                                                               : @OK ." Ok" CR ." >>" ;  META @OK vOK.                                                                                         0]> C@  (IO  TO _FR  TO _AX  TO _BX  TO _CX  TO _DX ;           DUP =, (DOS $21 C,  DUP =, (VID $10 C,   =, (KBD $16 C,         0]> @ (DOS ;                                                    DUP =, `OPEN $3D02 ,    DUP =, FREAD  $3F00 ,                   DUP =, FWRITE  $4000 ,  DUP =, FSEEK  $4200 ,                   =, `CREATE $3C00  ,                                             0]> @ PUSH D0 ROT POP (DOS ;                                    DUP =, FSIZE  $4202 ,   DUP =, FPOS  $4201 ,                    =, FCLOSE $3E00 ,                                                                                                               : =" '" WORD CSTR                                               : >ZSTR { A L - ZA } NPAD (S! SWAP : OFF 0 SWAP! ;              : ;File CSTR >ZSTR 1+ D0 EX IO? _AX ;                           : FOPEN ;File  `OPEN ;        : FCREATE ;File `CREATE ;                                                                                                                                         : [],  HERE DUP PUSH 2- DUP =: EXEC POP -                       : CLARY HERE OVER ERASE  : ALLOT ;HERE + ;                                                                                      ' `_VAR    1]> ;@! !+ ;  2]> ;@! @- ;  =H HANDLES , , ,         HERE 2+ , 20 ALLOT                                                                                                              : ;EOS AT EOS : ;@>!  DUP XCHG I @ PUSH PUSH ! EX POP POP ! ;                           : EOS? EOS ODD ; 0 QUAN `FBUF           : FHTOP AT HANDLES @ 2- @ ;  { SOMETHING }                      : FGET `FBUF CALL DROP  cr : EOS! EOS 1+ TO EOS ;THEN             AT `FBUF 1 FHTOP FREAD  _AX 0;  { IF EOF THEN EOS}              DROP `FBUF  DUP eof XOR 0; RDROP  ; { CONTROLS - LIKE BL }    : ;FILE TO HANDLES  AT KEY @ XCHG PUSH LIT FGET TO KEY               EX POP TO KEY      : `CLOSE1 HANDLES FCLOSE ;                                                                                                                                              : ;TI BLK XCHG LTIB PUSH ETIB PUSH PUSH                           CALL EX POP POP POP THEN  TO BLK TO LTIB TO ETIB              : /BLK  BLK 0; 0 TO ETIB ; : `// EOS 0; : // 0 TO LTIB ;        : INCLUDE TOKEN? : INCLUDED FOPEN ;FILE  `//                              D0  0 ;TI      2 ;EOS BEGIN vINIT EVAL EOS? UNTIL ;   : FTYPE TOKEN? FOPEN ;FILE 0 ;EOS BEGIN KEY EMIT EOS? UNTIL ;   : SEVAL CSTR 0 ;TI 0 ;EOS  ETIB LTIB EVAL ;                     : `CLOSE_ALL    AT HANDLES @+ - 2/ LOOPS `CLOSE1 ;              : (ERR  CR  TBUF ID.  STATE ".  CR  LIT (BK TO KEY  `CLOSE_ALL       BLK 0; BLK TO SCR 1K LTIB - : >XY 1K 1- AND  TO XY ;                                                                         META (ERR vERR                  { SHOW ERROR ROUTINE }                                                                                                                                                                                                                                                                        { META @OK vOK. }                                               LIKE ;DPUSH =, `;HOME  : HOME D0 : @XY BB>W D0 $200 (VID ;      : PAGE `;HOME  0 24 @XY  25 : CRS  LOOPS CR ;                   { META (AC ACCEPT    META (BE  EMIT}                                                                                            { 0 VALUE DPTR  0 VALUE ADR  0 VALUE NPTR }                     : ?DU U/MOD SWAP 0; 1+ ;                                                                                                        =H (SCAN> >, POP RDROP POP SWAP - 1- NIP; ,<                    : SCAN     OVER PUSH PUSH  FOR  STR J XOR                                       (IF (SCAN> NEXT J (JUMP TO (SCAN> ,<            : BSCAN W>B OVER PUSH PUSH FOR CSTR J XOR                                       (IF (SCAN> NEXT J (JUMP TO (SCAN> ,<            : WD bs ?DU ;DROP LOOPS CR DUP H. bs LOOPS STR H. ;                                                                                                                                             <H : M: ';  : ?M: CREATE (?",) DOES> SEVAL ; { MACROSES } H>    <H M: -IF` DUP 0< IF; H>                                                                                                        LIKE ;` =, WARY LIKE OPER[] ,    ,' [],                         LIKE ;` =, BARY LIKE OPER[] 2+ , ,' [],                                                                                              4 CONST `NBUFS                                              $E000 CONST `FIRST                                                  0 VALUE SCRH                                                    0 VALUE `PREV                                                   0 VALUE `USE                                                                                                                                                                                                                                                                                                                                                                               : `RW 1K UM* SCRH FSEEK  IO?  1K SCRH  EX IO? ;                 : `WBLK `RW FWRITE ;    : `RBLK `RW FREAD ;                                                                                     `NBUFS BARY `FBUFS    `NBUFS WARY  `BUFS                                                                                        : `@BUF `PREV 1K U* `FIRST + ;                                  HERE DOES, >, C@ `PREV `FBUFS C! ;                              DUP   =, DISCARD  0 C,  =, UPDATE  -1 C,                        : -BUF DISCARD -1                                               : `!BUF `PREV `BUFS ! ;                                         : `+BUF `USE 1+ `NBUFS 1- AND DUP TO `USE ;                                                                                                                                                                                                                                                                                                                                                     : !BUFS  `NBUFS LOOPS `+BUF TO `PREV                            : `?SAVE `PREV `FBUFS C@ 0; `@BUF `PREV `BUFS @ `WBLK DISCARD ; : FLUSH !BUFS                                                   : /BUFS `NBUFS  LOOPS `+BUF TO `PREV                            : `EMPTY-BUF -BUF                                               : `/BUF `@BUF 1K ERASE ;                                        : `?BUF PUSH 0 `BUFS `NBUFS POP SCAN ;                          : `;ABLK /BLK 0 TO _FR XCHG PUSH EX RDROP `@BUF IO? ;           : BUFFER `;ABLK J `?BUF -IF `?BUF                                     -IF DROP `+BUF THEN THEN TO `PREV `?SAVE `/BUF J `!BUF ;  : BLOCK `;ABLK J `?BUF                                                         -IF DROP J BUFFER J `RBLK ;THEN TO `PREV ;                                                                                                                                                                                                                                                                       : `SOURCE BLK ETIB 0?SKIP NIP; DUP 0; BLOCK 1K + DUP TO ETIB ;  META `SOURCE SOURCE     $182 =: `DOEVAL                                                                                         : THRU ;RANGE LOOPS DXEP+                                       : LOAD DUP 0= A"  BLK0!" 0 1K ROT ;TI 0 ;EOS (JUMP `DOEVAL ,<   : -USE SCRH 1+ 0; SCRH FCLOSE : /SCR -1 TO SCRH ;               : USE/ /SCR /BUFS ;                                             : USING FLUSH -USE TOKEN? FOPEN TO SCRH ;                       { USING T123.GGG  ' @XY =: ATXY }                               USE/    USING T123.GGG                                          : L/ 1L NEG AND ;    { LINE BEGIN FUNCTION }                    : ?EXIST; LOCATE 0= 0?SKIP DROP; RDROP                          : \ LTIB 1- L/ TO LTIB ;  ' \  =: \`    ' // =: //`                                                                                                                                                                                                             : ;CR EX CR ;    0 VALUE LCOUNT                                 : ;LIST DICT  AHEAD BEGIN  DUP CSTR + @+ PUSH  J EXECUTE                IF CSWAP POP THEN  .C@ 0= UNTIL SKIP THEN POP RDROP ;   : `LALI13 cr : LALI { SPACE} CNTC OVER UMOD - SPACES ;          : `;CNTC  OVER  C@  CNTC + 75 U<                                  IF EX CNTC 65 U<    IF CSWAP  `LALI13 bs  ;THEN CR                EX `LALI13 SKIP THEN ;CR  LCOUNT 1- DUP TO LCOUNT 0=          IF (BK  27 <>  bs TO LCOUNT SKIP THEN bs ;                                                                                    : WORDS CR  ;DROP  bs TO LCOUNT  ;LIST `;CNTC   H. ". ;                                                                                                                                                                                                                                                                                                                                                                                                         \ COMMON.NVF                                                    DICT HERE CREATE EXT. , ,                                       : BE ' ! ;                                                                      : OR OVER NOT AND XOR ;                                             : SHN3 3 LOOPS : SHN1 ROT DUP H. ;                                                                          0 VALUE DPTR  0 VALUE ADR  0 VALUE NPTR                         : DNEXT DPTR CSTR + @+ TO NPTR ;   : END? DUP TO DPTR C@ ;      : VLIST DICT SKIP BEGIN NPTR END?                                                 WHILE DNEXT H. DPTR ID. REPEAT ;                                                                                                                                                                                                                                                                                                                                                                                                              ?EXIST; ;CR                                                     : ;CR EX CR ;    0 VALUE LCOUNT   : UMOD U/MOD DROP; ,<         : ;LIST DICT  AHEAD BEGIN  DUP CSTR + @+ PUSH  J EXECUTE                IF CSWAP POP THEN  .C@ 0= UNTIL SKIP THEN POP RDROP ;   : `LALI13 cr : LALI { SPACE} CNTC OVER UMOD - SPACES ;          : `;CNTC  OVER  C@  CNTC + 75 U<                                  IF EX CNTC 65 U<    IF CSWAP  `LALI13 bs  ;THEN CR                EX `LALI13 SKIP THEN ;CR  LCOUNT 1- DUP TO LCOUNT 0=          IF (BK  27 <>  bs TO LCOUNT SKIP THEN bs ;                                                                                    : WORDS CR  ;DROP  bs TO LCOUNT  ;LIST `;CNTC   H. ". ;                                                                                                                                                                                                                                                                                                                                         MARKER EDEL.    \ DELETE ENTRY IN DICTIONARY - DONT TOUCH CODE  57 LOAD \ ;LIST                                                 16 LOAD \ ONPLACE                                               : `VP CR J H. I H. SPACE  I @ ?ID.                                    SHN3 KEY 1- 0?SKIP DROP; ABORT ,<                         : -STR= OVER C@ 1+ FOR PUSH CSTR XCHG CSTR POP =  IF CSWAP            NEXT -1 SKIP THEN POP 1+ : 2NIP XEP 2DROP; ,<             : LOCATOR TO LCOUNT  ;LIST                                         DROP LCOUNT OVER  -STR= #IF DROP; THEN SWAP TO LCOUNT ;                                                                      : EDEL  TOKEN?  LOCATOR   LCOUNT TBUF =  0?SKIP 2DROP;                 PUSH DICT LCOUNT POP ONPLACE                             : DROPLAST DICT CSTR + STR DROP TO DICT ;                       \ D0 5 FAMILY VALUE  T5 T4 T3 T2 T1                                                                                                                                                             \ DEBUG.NVF                                                                                                                     \ MARKER EXT2.                                                                                                                  HERE DOES, >, CSTR ADR SCAN 1+ 0; DUP ". CSTR + ;               =, ?STR 3 C, ' A"` 2+ @ ,  ' "` 2+ @ ,  ' ."` 2+ @ ,            : WDUMP bs ?DU ;DROP LOOPS CR DUP H. bs LOOPS STR H. ;          : <ID? ADR 2- : #>ID? TO ADR DICT SKIP                           BEGIN NPTR END? WHILE DNEXT ADR = UNTIL THEN DPTR C@ ;         : ?ID. CALL ID. DPTR ID. SPACE ;THEN                                   #>ID? IF @R+ DROP; THEN    <ID? IF " TO" ;THEN                   <ID? IF " AT" ;THEN RDROP ." `$" ADR 2+ 2+ H. ;         0 VALUE `WW : `;WW `WW EX TO `WW ;                                                                                                                                                                                                                              : SEE ' : @SEE TO `WW  : L bs LOOPS `;WW                        : WW CR DUP H. DUP PUSH STR DUP H. DUP ?ID.                             TO ADR ?STR POP #>ID? 0; DPTR ID. ;                                                                                     : ;[] '[ EMIT EX '] EMIT ;                                      LIKE `;HOME 1+ =, `TYPE >, DUP 1H - 1H SPACE ;[] ;DROP ?TYPE ;                                                                  : DUMP 1H ?DU ;DROP                                             : DU LOOPS CR DUP H. SPACE `TYPE  1H LOOPS CSTR                 : B. ;SPC W>B `B. ;                                                                                                             : BE ' ! ;          : SHN3 3 LOOPS : SHN1 ROT DUP H. ;                                                                                                                                                                                                                                                                          \ BLOCKS.NVF                                                                                                                                                                                    \ MARKER EXT3.                                                                                                                  \ : `SIZE { HND -- DX:AX } `POSF IO? _DX _AX                    \    _BX `SIZE TO _CX _AX _DX  { DX:CX} ROT _CX _BX `SEEK ;     \ : Fcut { SCR -} `RW NIP D0 ROT FWRITE DROP ;                  \ : Fsize SCRH `SIZE 1K UM/MOD NIP ;                                                                                                 4 CONST `NBUFS                                              $E000 CONST `FIRST   \ 1 / 8 OT 64K                                 0 VALUE SCRH                                                    0 VALUE `PREV                                                   0 VALUE `USE                                                                                                               : `RW 1K UM* SCRH `SEEK  IO?  1K SCRH  EX IO? ;                 : `WBLK `RW FWRITE ;    : `RBLK `RW FREAD ;                                                                                     `NBUFS BARY `FBUFS    `NBUFS WARY  `BUFS                                                                                        : `@BUF `PREV 1K U* `FIRST + ;                                  HERE DOES, >, C@ `PREV `FBUFS C! ;                              DUP   =, DISCARD  0 C,  =, UPDATE  -1 C,                        : `!BUF `PREV `BUFS ! ;                                         : `+BUF `USE 1+ `NBUFS 1- AND DUP TO `USE ;                                                                                                                                                                                                                                                                                                                                                                                                                     : !BUFS  `NBUFS LOOPS `+BUF TO `PREV                            : `?SAVE `PREV `FBUFS C@ 0; `@BUF `PREV `BUFS @ `WBLK DISCARD ; : FLUSH !BUFS                                                   : /BUFS `NBUFS  LOOPS `+BUF TO `PREV                            : `EMPTY-BUF -1 `!BUF  DISCARD                                  : `/BUF `@BUF 1K ERASE ;                                        : `?BUF PUSH 0 `BUFS `NBUFS POP SCAN ;                          : `;ABLK 0 TO _FR XCHG PUSH EX RDROP `@BUF IO? ;                : BUFFER ;ABLK J `?BUF -IF `?BUF                                      -IF DROP `+BUF THEN THEN TO `PREV `?SAVE `/BUF J `!BUF ;  : BLOCK `;ABLK J `?BUF                                                         -IF DROP J BUFFER J `RBLK ;THEN TO `PREV ;                                                                                                                                                                                                                                                                       : `SOURCE BLK ETIB 0?SKIP NIP; DUP 0; BLOCK 1K + DUP TO ETIB ;  META `SOURCE SOURCE                                             : ;THRU PUSH 1- POP OVER - : ;DROP EX DROP; ,<                  : THRU ;THRU LOOPS 1+ DXEP                                      : LOAD DUP 0= A"  BLK0!" 0 1K ROT ;TIBLK (JUMP `DOEVAL ,<                                                                       : -USE SCRH 1+ 0; SCRH FCLOSE -1 TO SCRH ;                      : USING FLUSH -USE TOKEN? FOPEN TO SCRH ;                                                                                       \ USING T123.GGG                                                : / U/MOD NIP ;                                                 ' @XY =: ATXY                                                   : BLANK bl FILL ;                                                                                                                                                                                                                                               : UMOD U/MOD DROP; ,<                                           : `AlignLeft { SPACE} cr CNTC OVER UMOD - SPACES ;              : !EMIT '! EMIT ;     0 VALUE G                                 : TESTS LOOPS CR G                                              : TEST SPACES !EMIT   `AlignLeft`BASE  0 VALUE HLD     : ;HLD HLD EX TO HLD ;          : BASE! 2 MAX TO `BASE  ;  : <# 0 TO HLD ;                      : `SGN# <# 0; NEG EX '- : HOLD ;HLD  C!- ;                      : 1# `BASE U/MOD SWAP   : AHOLD ALPHA  HOLD ;                   : `N#  XEP DUP 0<  `SGN#  : S# 1# 0?SKIP BACK3 ;                : .R lf : .RB BASE!  `N# HLD + SPACES                           : #> HLD DUP NEG TYPE ;                                                                                                                                                                                                                                                                                                                                                                         \ LIST                                                          ?EXIST;  ;THRU                                                                                                                  \ : ;THRU PUSH 1- POP OVER - : ;DROP EX DROP; ,<                : LIST DUP TO SCR BLOCK                                         : .BLOCK  ;DROP ." SCR# " SCR . CR 1H LOOPS CR 1H  J -          : .LINE cr EMIT  4 .R SPACE 1L ;[] ?TYPE ;                      : INDEX ;RANGE LOOPS DXEP+ BLOCK CR J ;DROP .LINE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             { STRINGS   }                                                   ?EXIST;  ?SPTR!                                                                                                                 0 VALUE `SPTRFIX                                                                                                                : ?SPTR! `SPTRFIX  DICT <> 0;                                        DICT DUP TO `SPTRFIX TO SPTR  TWICE  D0  >S ;              : ST  SPTR CSTR ;                      {  \ STACK TOP / NEXT  } : S> SPTR            : SDROP  ST + TO SPTR ; {  \ DROP STRING }{ BYTES FOR MOVE UP 1 }              HERE OVER - DUP PUSH       { START ADDRESS    }                 DUP 1+ ROT                 { PREPARE FOR MOVE }                 CMOVE>  HERE C@ POP C!   ; { FIX CODE  }               : SWITCH: CREATE HERE 73 1 TO XK 0 -:                               DOES> SWAP TO XK CSTR 2DUP XK BSCAN 1+ 2* + + @EXEC ;       : ;SWITCH  73 - A" BAD KEYS" XK 2/ 1- SWAP C! ;                                                                                                                                                                                                                 { EDITOR.NVF  }                                                                                                                  66     69 THRU                                                                                                                 D0 2  FAMILY VALUE `PDATA `INS                                  0 VECTOR `'ADVANCE                                                                                                               71     75 THRU                                                 \ 19 LOAD \ PRUNE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               : `?XY 1L U/MOD 6 3 ROT + XEP + ;                               : `POSXY XY `?XY @XY   ;                                        : `_INS  `INS 0= TO `INS                                        : `.INS  75 1 @XY `INS IF ." INS" ;THEN ." OVT" ;               : `;LRUD  XY EX >XY ;                                           : `;LPOS  XY EX `PDATA + ;                                      : `RELOAD SCR BLOCK TO `PDATA ?SPTR! `;LRUD ;                   : `REDRAW `.INS HOME CR  `PDATA .BLOCK ;                        : `L_UP  `;LRUD  1L - ;      { LINE UP  }                       : `L_DN  `;LRUD  1L + ;      { LINE DOWN}                       : `L_END `;LRUD              { DO LINE END}                     : `/L  1L 1- OR ;        { LINE END FUNCTION }                                                                                                                                                                                                                                                                                  { COPY POS^ LINE/ /LINE LDRAW EL INSC DELC OVTC INSL DELL LL}   : `<_|   `L_DN               { CARRIGE RETURN L_DN L_BEG }      : `L_BEG `;LRUD  L/ ;       { DO LINE BEGIN}                    : `->    `;LRUD  1+ ;        { MOVE 1 CHAR RIGHT}               : `<-    `;LRUD  1- ;        { MOVE 1 CHAR LEFT}                : `TAB>  `;LRUD  7 OR 1+ ;   { NEXT TABULATION }                : `<TAB  `;LRUD  1- -8 AND ; { PREVIOUS TABULATION}             : `APOS  `;LRUD  0 AND ;     { HOME POSITION OF CURSOR   }      : `LINE/ `;LPOS  L/ ;  : `/LINE `;LPOS `/L ;                    : `LDRAW `POSXY `LINE/ XY 1L /  .LINE DROP ; { OK POS}          ' -BUF =: `EJECTBLOCK \ DISCARD -1 PREV BUFS ! ;                : `RESET `EJECTBLOCK `RELOAD `REDRAW ; { !!!!!!! }              : `LB SCR + 0 MAX TO SCR `RELOAD `REDRAW ;  { +blk - }          : `LEOS 1K  XY - 1L - 0 MAX ; { - chars_to_end_of_screen }      : `POS^ `PDATA XY + ;          { - char^ }                                                                                      : `P2 `POS^ DUP DUP 1L + ;     { - char^ char^ char^+1l }       : `LL XY `/L XY - ;            { - chars_to_end_of_line }       : `GETCHAR XY 0= `'ADVANCE `POS^ C@ 33 U< ;                     : `-BL BEGIN  `GETCHAR 0= OR UNTIL ;                            : `N  1 `LB ;                                                   : `-NONBL BEGIN `GETCHAR OR UNTIL ;                             : `B -1 `LB ;                                                   : `>NEXT TO `'ADVANCE `-NONBL `-BL ;                            : `ADV   LIT `-> `>NEXT ;                                       : `>EL 1K `LEOS - 1L MIN ;                                      : `BACK   LIT `<- `>NEXT `-> ;                                  : `EL `>EL BLANK ;  { ( ERASE LINE OR LESS)  }                  : `RDRC `REDRAW UPDATE ;                                        : `DELL `P2 SWAP `LEOS CMOVE `LEOS +  `EL `RDRC ;               : `>INSL `P2 `LEOS CMOVE> `EL ;                                                                                                 : `C `POS^ `>EL `L_DN >S ;                                      : `G `C `L_UP `DELL ;                                           : `P ST NIP 0;  `>INSL  SPTR CSTR SDROP                                 `>EL MIN `POS^ SWAP CMOVE `RDRC ;                       : `INSL `>INSL `RDRC ;                                          : `POSC `POS^ DUP 1+ ;                                          : `INSC `INS IF `POSC `LL CMOVE> THEN                           : `OVTC `POS^ C! UPDATE ;                                       : `BS `<- : `DELC `POSC SWAP `LL CMOVE bl                                     `/LINE C! `LDRAW UPDATE ;                         : `ESQ/E { EMPTY-BUFS} /BUFS                                    : `X-POS 71 18 @XY   EOS! ;                                     : `Q/ED  FLUSH  `X-POS ;                                                                                                                                                                                                                                        \ EDIT E HELP                                                   <H      76 LOAD H>                                              SWITCH: `EF WHAT?                  kLEFT -: `<-    kUP -: `L_UP  kHOME -: `L_BEG   kEND -: `L_END  kPGUP -: `B   kPGDN -: `N     kDOWN -: `L_DN  kRIGHT -: `->     kINS  -: `_INS kDEL -: `DELC  ksTAB -: `<TAB  kcHOME -: `APOS        ;SWITCH                 : `ONEC XK bl U<  IF WHAT? ;THEN XK `INSC `LDRAW `-> ;          SWITCH:  `EK  `ONEC   ^J -: `<-  ^K -: `->     ^X -:  `G          127 -: `DELL    bs -: `BS        ^D -: `DELC  cr -: `<_|       ^N -: `N     ^B -: `B    ^L -: `RESET   ^I -: `TAB>             ^C -: `C     ^V -: `P    ^Q -: `ESQ/E   ^Z -: `BACK             ^A -: `ADV   kESQ -: `Q/ED  ^S -: `INSL   0 -: `EF  ;SWITCH    : `@KEY `POSXY (BK W>BB #IF SWAP ;THEN DROP ;                   : EDIT PAGE : `(E TO SCR   : E `RELOAD `REDRAW 0 ;EOS BEGIN         `@KEY `EK EOS? UNTIL ;      : HELP SCR PUSH `(E POP `(E ;                                                                   \ KEY CONSTANTS                                                                                                                 1  71  7 FAMILY CONST  kHOME  kUP  kPGUP  -- kLEFT  -- kRIGHT   1  78  7 FAMILY CONST  -- kEND  kDOWN  kPGDN  kINS  kDEL  ksF1  1 113  7 FAMILY CONST  kaF10 -- kcLEFT kcRIGHT kcEND -- kcHOME  1 59  10 FAMILY CONST  kF1 kF2 kF3 kF4 kF5 kF6 kF7 kF8 kF9 kF10   9  CONST kTAB       104  CONST kaF1       93  CONST ksF10      94  CONST kCF1       103  CONST kcF10      15  CONST ksTAB      1 1  12 FAMILY CONST  ^A ^B ^C ^D --E --F --G --H ^I ^J ^K ^L   1 13 11 FAMILY CONST  --M ^N --O --P ^Q --R ^S --T --U ^V --W   1 24  4 FAMILY CONST  ^X --Y ^Z kESQ                                                                                                                                                                                                                                                                                                                                                                                                                           \ DEBUG.NVF                                                     MARKER DEBUG.                                                                                                                   HERE DOES, >, CSTR ADR SCAN 1+ 0; DUP ". CSTR + ;               =, ?STR 3 C, ' A"` 2+ @ ,  ' "` 2+ @ ,  ' ."` 2+ @ ,            \ WDUMP bs ?DU ;DROP LOOPS CR DUP H. bs LOOPS STR H. ;                                                                          : <ID? ADR 2- : #>ID? TO ADR DICT SKIP                           BEGIN NPTR END? WHILE DNEXT ADR = UNTIL THEN DPTR C@ ;         : ?ID. CALL ID. DPTR ID. SPACE ;THEN                                 #>ID? IF @R+ DROP; THEN                                          <ID? IF " TO" ;THEN                                             <ID? IF " AT" ;THEN                                             RDROP ." `$" ADR 2+ 2+ H. ;                                                                                               : ;[] '[ EMIT EX '] EMIT ;                                      : ;?ID. EX #>ID? 0; ;SPC ;[] DPTR ". ;                                                                                          0 VALUE `WW     : `;WW `WW EX TO `WW ;                                                                                          : SEE ' : @SEE TO `WW   : L bs LOOPS `;WW                        CR DUP H. ;?ID. DXEP STR DUP H. : `W2 DUP ?ID. TO ADR ?STR ;                                                                   : HACK ' : @HACK TO `WW CR                                      : HL bs LOOPS `;WW ;?ID. DXEP STR `W2 ;                                                                                         LIKE `;HOME 1+ =, `TYPE >, DUP 1H - 1H SPACE ;[] ;DROP ?TYPE ;  : DUMP 1H ?DU ;DROP                                             : DU LOOPS CR DUP H. SPACE `TYPE   1H LOOPS CSTR                : B. ;SPC W>B `B. ;                                                                                                             \ ACCEPT                                                        : (AC   { ADR CNT / ADR CNT1 } PUSH 0                             BEGIN  KEY     CASE   cr OF  RDROP EXIT ENDOF                      bs OF  #IF 1- TO bs SPACE  TO bs THEN  ENDOF                    DUP bl 1B WITHIN                                                IF PUSH 2DUP + I SWAP! POP EMIT 1+ DUP THEN                              ENDCASE    DUP I =                                  UNTIL RDROP ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \ NF7.NVF                                                                                                                       $13A =: HERE    $3E2 =: !       $235 =: ;`      $10C =: EMIT    $22F =: :       $27D =: =,      $215 =: C@      $273 =: ;HERE   $424 =: C!+   : C, ;HERE C!+ ;  $209 =: +       $207 =: -       HERE  $4B C,   HERE  $4B C,  $EB C,  $4F4 2 +  HERE 1 + - C,      =, 1-  =, 2-                                                                                                                  $259 =: ,       $1AC =: DROP;   $1EA =: DUP     $1FD =: ,<`     $48B =: >,                                                      $29D =: WORD    $48D =: #DOES   $1F8 =: @                       HERE $E8 C, #DOES HERE 2 + - ,  >, C@ WORD DROP; ,<             DUP =, \ 0 C,  =, { '} C,                                                                                                       $2BB =: #??     $3FE =, AND     $299 =: TOKEN?  $221 =: FIND                                                                                                                                    : LOCATE TOKEN? FIND 1 AND ;  : ' LOCATE #?? ;   : LIKE ' @ ;   : ,' ' , ;                                                                                                                      $130 =: bl              \ RETURNS ASCII CODE OF SPACE CHARACTER $24B =: SKIP    $1A8 =: ;DROP   $245 =: (NEXT   $4B1 =: (FOR    $247 =: RDROP                                                   $444 =: PUSH    $47F =: EXECUTE $241 =: J       $20B =: STR     $1DD =: (ASTR   \ _ASTR - STRING PRIMITIVE                      $219 =: CSTR    \ _CSTR - CSTRING > COUNT ADDRESS               $194 =: (A"     \ TYPES WORD  TYPES "ERROR KIND" & ABORTS       $1FF =:  3+        \ _3P                                                                                                                                                                                                                                                                                                                                                                        $152 =: CNTC    \ COUNT OF EMITTED CHARS ON OUTPUT STREEM       $118 =: vOK.    \ VECTORED RESPONCE OF THE SYSTEM IF NO ERROR   $1C2 =:  ;DPUSH    \ _XDPUSH                                    $11C =: vERR       \ _ERROR  - DEFER ERROR                      $128 =: TBUF       \ _TBUF                                      $24D =: ABORT      \ _ABORT                                     $158 =: STATE      \ _STAT                                      $14C =: DICT       \ _DICT                                      $253 =: POP        \ _POP                                       $27F =: =H         \ _ENTRYH                                    $487 =: @EXEC      \ _PERFORM                                   $12C =:  0         \ _0                                         $2BD =:  ??        \ _??                                        $39D =: (DE        \ _@EMIT                                                                                                                                                                     $1AE =:  @_INI     \ _@_INI                                     $4E6 =:  ABS       \ _ABS                                       $38B =: (ACC       \ _ACC                                       $114 =:  ACCEPT    \ _ACCEPT                                    $23B =:  #,`       \ _CLIT                                      $2D0 =: (,EX       \ _COMMAER                                   $261 =:  NUM,      \ _COMP_NUM                                  $212 =:  .C@       \ _DLDB                                      $1C4 =: >DICT      \ _DPUSH                                     $203 =:  DROP      \ _DROP                                      $4C2 =:    (#IF    \ _DUP_IF                                    $140 =:  ETIB      \ _ETIB                                      $178 =:  EVAL      \ _EVAL                                      $251 =:  EX        \ _EX                                                                                                                                                                        $483 =:  EXEC      \ _EXEC                                      $24F =:  EXIT      \ _EXIT                                      $3A9 =: (FND       \ _FND                                       $4C8 =: (IF        \ _IF                                        $134 =: vINIT      \ _INIT                                      $249 =: (JUMP      \ _JUMP                                      $1F2 =:  LIT       \ _LIT                                       $146 =:  LTIB      \ _LTIB                                      $36D =: (MPUSH     \ _MPUSH                                     $37A =: (S!        \ _MSTR                                      $255 =:  NIP;      \ _NIPX                                      $362 =: (NUM       \ _NUM                                       $269 =:  NUMBER    \ _NUMBER                                    $102 =:  OPER[]    \ _OPERATION                                                                                                                                                                 $205 =:  OVER      \ _OVER                                      $33E =: (PARS      \ _PARS                                      $29F =:  PARSE     \ _PARSE                                     $1D7 =: @R+        \ _RLDP                                      $110 =:  SOURCE    \ _SOURCE                                    $42A =:  !+        \ _STP                                       $201 =:  SWAP      \ _SWAP                                      $120 =:  TBL       \ _TBL                                       $124 =:  TIB       \ _TIB                                       $29B =:  TOKEN     \ _TOKEN                                     $1E5 =:  XCHG      \ _XCHG                                      $257 =:  ;COMMA    \ _XCOMMA                                    $2B1 =:  ;SETSTR   \ _XSETSTR                                   $2B9 =:  ;TOK?     \ _XTOK?                                                                                                                                                                     $4EF =:  0=        \ _ZEQ                                       $4B8 =:  0?SKIP    \ _ZSKIP                                                                                                     \ ----------------------------                                                                                                  $4EB =: `NOT                                                    $4E3 =: `1P                                                     $42F =: `1P_NIP                                                 $462 =: `2DROP                                                  $461 =: `2DROPX                                                 $4E2 =: `2P                                                     $42E =: `2P_NIP                                                 $4E1 =: `3P                                                     $165 =: `ABORT                                                                                                                                                                                  $1AA =: `ABORTX                                                 $3FA =: `ADD                                                    $411 =: `ADR                                                    $4F4 =: `CF                                                     $491 =: `DOES                                                   $490 =: `DOES2                                                  $48F =: `DOES3                                                  $182 =: `DOEVAL                                                 $3A2 =: `DOS_DX                                                 $41D =: `DROP                                                   $416 =: `DROPX                                                  $496 =: `EX                                                     $472 =: `EXEC                                                   $4CA =: `IF                                                                                                                                                                                     $4CF =: `JUMP                                                   $4CC =: `JUMPDR                                                 $498 =: `LBL                                                    $21C =: `LDB                                                    $49A =: `MAIN                                                   $16E =: `MAINLP                                                 $4EA =: `NEG                                                    $497 =: `NEST                                                   $47D =: `NEST2                                                  $47C =: `NEST3                                                  $47B =: `NEST4                                                  $47A =: `NEST5                                                  $4D3 =: `NEXT                                                   $41F =: `NIP                                                                                                                                                                                    $431 =: `NIPX                                                   $2E6 =: `NUM                                                    $3F1 =: `OVER                                                   $3F2 =: `POP                                                    $441 =: `PUSHW                                                  $440 =: `PUSHW2                                                 $43F =: `PUSHW3                                                 $386 =: `PUSH_DC                                                $3AE =: `PUSH_SC                                                $4DE =: `RDROP                                                  $499 =: `RETURN                                                 $3EC =: `ROT                                                    $1CF =: `SETDROP                                                $4BF =: `SKIP                                                                                                                                                                                   $4BC =: `SKIPDR                                                 $3F8 =: `SUB                                                    $4DB =: `SWAP                                                   $4DA =: `SWAPX                                                  $1D1 =: `TOPDROP                                                $1EC =: `TOPDUP                                                 $401 =: `XOR                                                    $3E7 =: `_1M                                                    $3E6 =: `_2M                                                    $4AD =: `_BARY                                                  $44B =: `_CALL                                                  $2DA =: `_COMMA                                                 $40C =: `_CONS                                                  $40B =: `_CONS2                                                                                                                                                                                 $40A =: `_CONS3                                                 $470 =: `_DEFER                                                 $46F =: `_DEFER2                                                $46E =: `_DEFER3                                                $468 =: `_DEFERO                                                $1CE =: `_DROP                                                  $448 =: `_DUP                                                   $405 =: `_IJ                                                    $4A9 =: `_LARY                                                  $2DF =: `_MAKER                                                 $450 =: `_PARAM1                                                $453 =: `_PARAM2                                                $456 =: `_PARAM3                                                $4A0 =: `_POINT                                                                                                                                                                                 $434 =: `_RLD@                                                  $439 =: `_RST@                                                  $4A5 =: `_SETPNT                                                $41B =: `_SETVAR                                                $41A =: `_SETVAR2                                               $419 =: `_SETVAR3                                               $2C9 =: `_STATE                                                 $3E8 =: `_TOP?                                                  $3F5 =: `_VAR2                                                  $3F4 =: `_VAR3                                                  $4AB =: `_WARY                                                  $40E =: `_VAR                                                                                                                   \ -------------------------------------------------------------                                                                                                                                                                                                 \ HERE : CR 13 EMIT 10 EMIT ;     $11A !                        \ HERE : ERR '? EMIT '? EMIT '? EMIT ;     $11E !                                                                               LIKE ;` =, :` ,' SKIP ,' :                                      \ ":" - NOW DEFINES WORDS ON COMPILE STATE                      ' `2P  =, 2+            ' `1P  =, 1+  \ : C,R HERE 1+ - C, ;    HERE $E8 C, #DOES HERE    2+ - , >, C@ C, ;                     DUP =, #CAL, $E8 ,    DUP =, #JMP, $E9 ,                        DUP =, JMPS, $EB ,  =, RET, $C3 ,                               : DOES, #DOES           : CALL, #CAL,   : ,R HERE    2+ - , ;                                                                   LIKE ! =, U<                                                    $2B C, $DF C, #JMP, ' `CF ,R                                                                                                                                                                                                                                    : CODE: HERE 2+ =, ;                                            CODE: 0<  $D1 C, $E3 C, #JMP, ' `CF ,R                                                                                          LIKE DUP =, U/MOD                                               $33 C, $C9 C, $91 C, $92 C, $F7 C, $F3 C, $93 C, $91 C, RET,                                                                    LIKE DUP =, SM*                                                 $93 C, $F7 C, $EA C, $92 C, $93 C, RET,                                                                                         LIKE DUP =, UM*                                                 $93 C, $F7 C, $E2 C, $92 C, $93 C, RET,                                                                                         : U* UM* DROP; ,<                                                                                                                                                                               : * SM* DROP; ,<                                                                                                                ' `NEG =, NEG   ' `XOR =, XOR     ' `NOT =, NOT                 : COMPILE @R+ , ;                                               LIKE :  =, CONST ' `_CONS , ,' , \ CONSTANTS                    LIKE :  =, CREATE ' `_VAR ,  0 , \ ONLY ADDRESS NOTHING MORE    : (=) =H COMPILE ,< LIKE ;` , >, , , ;  \ DOERS                                                                                 : META '                                                        : IS '    2+ ! ;                                                : TIMES SWAP PUSH                                               : LOOPS (FOR  ,< HERE 10 + , >, J EXECUTE                               (NEXT ,< HERE 6 - , >, RDROP ;                          \ LOOPS & TIMES FUNCTIONS                                                                                                                                                                                                                                       LIKE @ =, ?BL.                                                  $80 C, $FB C, bl C, $73 C, 2 C, $B3 C, $2E C, RET,              ' `NEST3                                                        DUP  =, (."     \ COMPILETIME STRING LITERAL EMITER             DUP  =, ".      \ RUNTIME STRING LITERAL EMITER FUNCTION        =, TYPE  >, (ASTR CSTR ;DROP                                    : ?TYPE LOOPS CSTR                                              : ?EMIT ?BL. EMIT ;                                             : (" (ASTR ;    \ STRING LITERAL                                                                                                : ALLOT ;HERE + ;                                               : W, STR , ;    \ READ , COMPILE WORD & POSITION TO NEXT        ' \ =: \`       \ COMPILING VERSION                                                                                                                                                             ' { =: {`       \ COMPILING VERSION                                                                                             : LATEST DICT CSTR + @ ;        : ;code POP : TOBE LATEST ! ;   : RECURCE` LATEST , ;   \ REFERENCE TO SELF IN SAME WORD        LIKE ;` =, DOES>` >, ;code DOES, ,<     \ WE HAVE DOES !                                                                        \ CONSTANTS   VARIABLES VALUES  & DEFERS                         16 CONST 1H      '0 CONST '0'     3 CONST 3       1 CONST  1   256 CONST 1B     255 CONST &BYTE  26 CONST eof     2 CONST  2   $5C CONST NPAD  1024 CONST 1K     64 CONST 1L     -1 CONST -1                                                                   : 2* DUP + ;                                                    ' `NIP =, NIP                                                   : B>W &BYTE AND ;                                                                                                                                                                               : >IP+ NOT 3  AND 2* POP + PUSH ;                               : (,) CREATE , DOES> @ , ;      \ commaers  & --V MAKERS        : (:) CREATE DUP C, >IP+ , , , ,'                                      DOES> CSTR =H >IP+ W, W, W, @EXEC ;                                                                                      ' `_DEFER    1 (:) DEFER ,                                      ' `_SETVAR   ' `_CONS2    2 (:) VALUE ,                         ' `_SETVAR   ' `_DEFER2   2 (:) VECTOR ,                        ' `_SETPNT   ' `_POINT    2 (:) POINT  ,                        ' `_VAR      ' `_SETVAR2  ' `_CONS3   3 (:) QUAN ,              ' `_VAR      ' `_SETVAR2  ' `_DEFER3  3 (:) VQUAN ,                                                                             HERE DOES, >, C@ EMIT ;   HERE #DOES 1- CALL, >, C@ ;           2 (:) CONST.C C,                                                                                                                                                                                10 CONST.C lf   13 CONST.C cr   8 CONST.C bs  '- CONST.C '-'                                                                    \ searching                                                     HERE DOES, >, : `(' C@ ' + ;                                     DUP =, 'TO  2 C, =, 'AT  4 C,  \ ADDRESS OF XT+2 / XT+4        HERE DOES, >, `(' EXEC ; DUP =, TO   2 C,  =, AT  4 C,          \ EXECUTES XT+2 / XT+4                                          HERE DOES, >, `(' , ;    DUP =, TO`  2 C,  =, AT` 4 C,          \ COMPILES                                                                                                                      LIKE ;DPUSH =, ;SPC                                             \  EMIT SPACE IN THE END OF WORD  __RVAR2 _XSPC                 : SPACE bl EMIT ;       \ EMIT BLANK SPACE                      : ID. ;SPC ". ;                                                                                                                                                                                                                                                 : CR TO cr  TO lf  0 TO CNTC ;                                  \ : CR (." ,< 2 C, 13 C, 10 C, >, 0 ,< ' CNTC    2+ , >, ;      \ META  CR vOK.                                                                                                                 \  : (ERR  CR  TBUF ID.  STATE ".  CR ;                         \  META (ERR vERR                  \ SHOW ERROR ROUTINE                                                                         \ CONTINUE EXTENDING COMPILER                                   : 1+DXEP 1+ : DXEP DUP : XEP XCHG EXECUTE POP ;                 : (CALL @R+ PUSH ;                                              -#20 CONST FTOP   FTOP VALUE  FSTACK                            : ;FSTACK FSTACK EX TO FSTACK ;                                 ' , =: <RELEASE                                                                                                                                                                                 : F> FSTACK FTOP XOR #?? ;FSTACK : @+ STR SWAP ;                : >F ;FSTACK : !- 2- DXEP ! ;                                   : <RELEASE> <RELEASE : RELEASE> HERE F> ! ;                     : MARK> HERE >F : Z, 0 , ;      : >MARK< MARK>  : <MARK HERE ;  : CASE`  0 >F ;         ' XOR =: <>     : = <> 0= ;                                                                             ' MARK>    '    (IF (=) IF`               ' RELEASE> =: THEN`   : (OF OVER <> @R+ SWAP IF XCHG SKIP THEN DROP DROP; ,<          ' RELEASE> ' EXIT   (=) ;THEN`  '              <MARK =: BEGIN`  ' >MARK<   '   (FOR (=) FOR`    ' <RELEASE> ' (NEXT (=) NEXT`   ' <MARK    '   PUSH (=) FOR>`   ' <RELEASE  ' (NEXT (=) <NEXT`  ' MARK>    '  (CALL (=) CALL`   ' <RELEASE  ' (JUMP (=) AGAIN`  ' <RELEASE '    (IF (=) UNTIL`  ' MARK>     ' (JUMP (=) AHEAD`  ' MARK>    '   (#IF (=) #IF`    ' MARK>     ' (OF   (=) OF`                                                                                                                                                                                                     : CSWAP` F> F> SWAP >F >F ;                                     : REPEAT` AGAIN`  THEN` ;          ' IF`   =: WHILE`            : ELSE`   AHEAD` CSWAP` THEN` ;    ' ELSE` =: ENDOF`            : ENDCASE`  COMPILE DROP  BEGIN F> #IF >F THEN` REPEAT DROP ;                                                                   \ STRING COMPILING                                              : (",)  '" : (?",)   WORD       \ PARSE & COMPILE STR           : CSTR, CSTR                    \ COUNTED STRING COMPILE        : STR, ;HERE (S! DROP; ,<       \ ADR COUNT STRING COMPILE                                                                      ' (",) ' ("   (=) "`    \ STRING LITERALS  COMPILER             ' (",) ' (A"  (=) A"`   \ STRING ERROR MESSAGES  COMPILER       ' (",) ' (."  (=) ."`   \ STRING LITERALS OUTPUT COMPILER                                                                                                                                       : @OK ."  Ok" CR ." > " ;                                       \ META  @OK vOK.                                                                                                                LIKE J  =, I 0 ,        : TWICE I PUSH ;                                                                                        \ ------------------------------------------------------------- \ NUMOUT                                                        \                                                               : U* UM* DROP; ,<       : W>B &BYTE AND ;       : L>H 1B U* ;   : BB>W  W>B L>H SWAP W>B XOR ;  : W>BB 1B U/MOD ;               : B>HH 1H U/MOD ;                                               : ALPHA  9 OVER U<  7 AND + '0' + ;           \  7 ALPHA EMIT   : H.  ;SPC  W>BB TWICE  : `B. B>HH TWICE  : DIG.  ALPHA EMIT ;  : .   DUP 0< IF TO '-' ABS THEN       : U.    ;SPC                                                                                                                                              : `U. lf U/MOD 0?SKIP RECURCE DIG. ;                                                                                            \ -------------------------------------------------------------                                                                 : 2DUP OVER OVER ;                                              ' `ROT =, ROT                                                                                                                   : WITHIN OVER - PUSH - POP U< ;                                 0 VQUAN KEY                                                                                                                     : (AC   { ADR CNT / ADR CNT1 } OVER + PUSH DUP                    BEGIN  KEY     CASE                                                cr OF  DUP XCHG DROP  ENDOF                                     bs OF  2DUP <>  IF 1- TO bs SPACE  TO bs THEN  ENDOF                                                                                                                                            DUP bl 1B WITHIN  IF DUP EMIT SWAP C!+ DUP THEN                          ENDCASE    DUP I =                                  UNTIL RDROP OVER - 1 : SPACES LOOPS SPACE ;                                                                                   LIKE (DE =, (BE                                                 $96 C, $31 C,  $DB C, $B4 C, $E C, $CD C, $10 C, $96 C, RET,                                                                    LIKE STR =, (BK                                                 $31 C,  $DB C,  $93 C,  $CD C,  $16 C,  $08 C,  $C0 C,  $74 C,  $02 C,  $30 C,  $E4 C,  $93 C,  RET,                                                                                            ' (BK TO KEY                                                                                                                    \ -------------------------------------------------------------                                                                                                                                 0 VALUE _AX     0 VALUE _BX     0 VALUE _CX                     0 VALUE _DX     0 VALUE _FR                                     CODE: (IO                                                        $88 C,  $1E C,  HERE 12 + ,     $56 C,  $94 C,  $5B C,  $59 C,  $5F C,  $94 C,  $97 C,  $92 C,  $57 C,  $CD C,  $21 C,  $5F C,  $97 C,  $94 C,  $52 C,  $51 C,  $53 C,  $57 C,  $9C C,  $94 C,  #JMP, ' `2DROPX ,R                                             \ : REGS _DX _CX _BX _AX ;                                      : ODD 1 AND ;                                                   0 VALUE BLK  0 VALUE SCR  0 VALUE XY  0 VALUE EOS?              : IO? _FR ODD A" :IO?" ;  : D0 0 0 ;                            HERE DOES, >, C@  (IO  TO _FR  TO _AX  TO _BX  TO _CX  TO _DX ; DUP =, (DOS $21 C,  DUP =, (VID $10 C,   =, (KBD $16 C,         HERE DOES, >, @ (DOS ;  DUP =, `OPEN $3D02 ,                                                                                                                                                    DUP =, FREAD  $3F00 ,                                           DUP =, FWRITE  $4000 ,  DUP =, `SEEK   $4200 ,                      =, `CREATE $3C00 ,                                          HERE DOES, >, @ PUSH D0 ROT POP (DOS ;                          DUP =, `SIZE  $4202 ,   DUP =, `POSF  $4201 ,                       =, FCLOSE $3E00 ,                                                                                                           : =" '" WORD CSTR                                               : >ZSTR { A L - ZA } NPAD (S! SWAP 0 : SWAP! SWAP ! ;           : ;File CSTR >ZSTR 1+ D0 EX IO? _AX ;                           : FOPEN ;File  `OPEN ;        : FCREATE ;File `CREATE ;                                                                         \                                                               : `BACK! @+ XCHG EXECUTE POP !- DROP; ,<                                                                                                                                                        : 0; 0?SKIP DROP; RDROP ;                                       ' `_VAR    HERE #DOES 1- CALL, >, `BACK! !+ ;                   HERE #DOES 2- CALL, >, `BACK! : @- 2- DXEP @ ;                  =H HANDLES , , , HERE 2+ , 20 ALLOT                             : `NOEOS 0 TO EOS? ;  0 QUAN `FBUF                              : FHTOP AT HANDLES @ 2- @ ;  \ SOMETHING                        : FGET `FBUF CALL -1 TO EOS? DROP  cr ;THEN  \ IF EOF THEN EOS    AT `FBUF 1 FHTOP FREAD  _AX 0;  \ SOMETHING                     DROP `FBUF  DUP eof XOR 0; RDROP  ; \ CONTROLS - LIKE BL      : `KEY!  LIT FGET TO KEY ;                                      : ;FILE TO HANDLES `NOEOS  AT KEY @ XCHG PUSH `KEY!                  EX `NOEOS  POP TO KEY      : `CLOSE1 HANDLES FCLOSE ;      : ;TI 0 : ;TIBLK BLK XCHG LTIB PUSH ETIB PUSH PUSH                CALL EX POP POP POP THEN  TO BLK TO LTIB TO ETIB                                                                                                                                              : INVALIDATE? BLK 0; 0 TO ETIB ;                                : INCLUDE TOKEN? : INCLUDED FOPEN \` ;FILE D0 ;TI                    BEGIN vINIT EVAL EOS? UNTIL ;                              : FTYPE TOKEN? FOPEN ;FILE BEGIN KEY EMIT EOS? UNTIL ;          : M: ';  : ?M: CREATE (?",) DOES>     \ MACROSES                : SEVAL CSTR : STREVAL ;TI ETIB LTIB EVAL ;                                                                                     : 2/ 2 : U/ U/MOD NIP; ,<                                       : CLOSE_ALL    AT HANDLES @+ - 2/ LOOPS `CLOSE1 ;               : (ERR  CR  TBUF ID.  STATE ".  CR  LIT (BK TO KEY                    CLOSE_ALL  BLK 0; BLK TO SCR LTIB NEG                     : >XY 1K 1- AND TO XY ;                                           META (ERR vERR                  \ SHOW ERROR ROUTINE                                                                                                                                                                                                          \ -------------------------------------------------------------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 0 =, BYE                                                        LIKE ;DPUSH =, `;HOME  : HOME D0 : @XY BB>W D0 $200 (VID ;      : PAGE `;HOME  25 : CRS  LOOPS CR ;                                                                                             META @OK vOK.                                                   META (AC ACCEPT    META (BE  EMIT   INCLUDE COMMON.NVF                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          