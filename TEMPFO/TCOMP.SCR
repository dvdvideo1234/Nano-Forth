|   32768 CONSTANT MSB                                          |  MSB 1-  CONSTANT -MSB                                                                                                          VARIABLE LX                                                                                                                   : CODE, HEADER , ;                                              | : @LITERAL @ [',] LITERAL ;                                                                                                                                                                   | : @, @ , ;   : OLDTC LIT LIT LIT [ ' [LIT] 2+ , ] ! ;         \ 10 WARY ADR:  10 WARY VAL:                                    : ALIGNED HERE SWAP ALIGN TO HERE ;                             \ | :  GET:   0 DO ' 2+ DUP  I ADR: ! @  I VAL: ! LOOP ;        \  : RESET:   0 DO I VAL: @  I ADR: @ ! LOOP ;                  \  :   SET:   0 DO ' EXEC    I ADR: @ ! LOOP ;                  \   10 GET: AGAIN SKIP UNTIL IF -UNTIL -IF ;M DO: [LIT] OF      : (( HEADER COMPILE [ ' DO: @, ] , , IMMEDIATE ;                | : CONST CREATE LX LINK+ , , DOES> 2+ DUP 1+! 2+ @LITERAL ;    | : <F> <% CONST IMMEDIATE %> ;   | : <00F> 0 0 <F> ;                                                                            <%                                                               ' IOV @                                                         1 NM: HERE 2+ SWAP! ;M                                                                                                                                                                          2 NM: @LITERAL ;M                                                HEADER JUSTIFY , , , 0 ,  IMMEDIATE                           %>                                                             : RDROPS CO RDROP ;                                             | : DUPE? RDROPS RESCAN 0>=                                         IF 2DROP ;THEN STR ROT - IF DROP ;THEN  RDROP                  2+ STR 0< A" DUP! " MSB OVER 2- XOR!  HERE   ;               | : ?REL HERE SWAP  IF OVER 2+ - THEN ;                         | : A?REL DUP 1- C@ 1 OR $ E9 XOR 0= ?REL ;                     : FW <00F> TO JUSTIFY                                                  DOES> 2+ DUP 1+! STR 0<                                        IF @, ;THEN LINK+ ;                                                                                                       : ?FW JUSTIFY DUPE?  N>C SWAP                                                                                                                                                                       BEGIN OVER TO >< ?DUP -UNTIL DROP ;                                                                                         : FL <00F> TO JUSTIFY                                                  DOES> 2+ DUP 1+! STR 0<                                        IF @LITERAL ;THEN  ?E ' CASE                                     ['] JMP,  OF BCOMPILE [ $ E9 C, ]                                LINK+ ENDOF                                                    ['] CALL, OF BCOMPILE [ $ E8 C, ]                                LINK+ ENDOF                                                    [']   DW, OF LINK+ ENDOF                                        A" NO LBL OP!" ENDCASE ;                                 | : ?FL JUSTIFY DUPE? BEGIN TO >< ?DUP                                WHILE A?REL REPEAT                                          ( !!! BLWORD DROP ) BLWORD DROP RDROP ;                                                                                                                                                                                                                                                                                         : C: MSB <F> ;   : L: ?FL HERE C: ;                            | : ?TAB 52 OUTC < IF CR ;THEN 26 OUTC OVER MOD - SPACES  ;     | : VIEWER: : DOES> PUSH  CR LX @ SKIP BEGIN                      STR SWAP DUP @ R@ EXECUTE THEN ?DUP -UNTIL RDROP ;            | : ?NODE. 0= IF  DUP STR .H @ .H 4 - ?ID. ?TAB ;THEN DROP ;    VIEWER:  TLIST.  DUP XOR ?NODE. ;                               VIEWER:  UNDEF.  0< ?NODE. ;                                    VIEWER: UNUSED.  -MSB AND ?NODE. ;                              \ PREVIOUS                                                       VOCABULARY KERNEL   KERNEL ALSO F83 PRUNE                                                                                                                                                                                                                                                                                     FORTH'   DoVoc,dodef,dovar,lastw,0                              ABORT  A"  ?,   (" (". ".    (LIT")   (".   ".                  : >MARK  HERE COMPILE [ 0 , ] ;                                 : ALIAS ENTRY COMPILE #ALI , ;                                  : D+  PUSH SWAP PUSH + POP POP +? ;                             : 0< 14 FOR 2/ NEXT ;                                           : S>D DUP 0< ;                                                  : M+ S>D D+ ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \ QUERY'                                                        : ?LITERAL DBL 1+ IF SWAP DUP [',] LITERAL                                THEN DROP [',] LITERAL ;                              : LITERAL STATE IF [',] [LIT] THEN ; IMMEDIATE                  : INTERPRET BEGIN BEGIN -FIND                                              ?DUP IF ?,  AGAIN THEN                                     NUM ?? ?LITERAL  AGAIN ;                                  : ?SOURCE  1  -1  WITHIN IF BLK BLOCK 1K ;THEN TIB SPAN ;       : ?DELIM OVER  +                                                : WORD ?SOURCE >IN - DUP PUSH + A! POP                             FOR C@A 0=                                                   BLWORD                                                                                                                                                                                          (word                                                            -FIND                                                          FIND                                                                                                                            \   USE:  DO: [LIT]   ;M                                        :  [ 0 TO STATE ; IMMEDIATE                                     : ] -1 TO STATE ;                                               :  BINARY    2  TO  BASE ;                                      :  HEX      16  TO  BASE ;                                      :  DECIMAL  10  TO  BASE ;                                      :  NUMBER  PUSH PUSH BASE  0 R@ C@ C" - CASE                        C"  - OF -1 OR   ENDOF  C" $ OF HEX     ENDOF                   C"  # OF DECIMAL ENDOF  C" % OF BINARY  ENDOF                 0 DUP     POP POP ROT IF 1- PUSH 1+ POP                                                                                                                                                                                                                                                                                       : CONVERT FOR C@A+ ?DIGIT INV -IF INV M+ NEXT ;THEN                                                                             : NUMBER OVER C@ C" - = DUP TO DPL  \ SIGN                           IF 1 /STRING  THEN  DPL -ROT -1 TO DPL  \ 1 STEP FORWARD      PUSH A! 0 0 POP  CONVERT                                                                                                                                                                                                                                     : ENTRY  CURRENT @ BLWORD DUP CURRENT ! ", , ;                  : HEADER ?NONAME  ?DUP IF 1- TO ?NONAME HERE  TO CFA                        TO VSWAP  CFA ALIAS  TO VSWAP ;THEN                    ENTRY HERE TO CFA ;                                                                                                                                                                          : CREATE HEADER COMPILE #VAR ;                                  : ;        SMUDGE [',] ;M  ;     IMMEDIATE                      : : HEADER SMUDGE [',] DO: ;                                    : ;CODE  COMPILE ;code [',] [  ASM ;  IMMEDIATE                 2: DOES> :3 :4 COMPILE ;code                                          #VAR  232 C, HERE 2+ - , ;      IMMEDIATE                 : ;code POP  CFA ! ;                                                                                                                                                                                                                                                                                                                                                                            : LB> 255 AND ;                                                 : 256* 8 FOR 2* NEXT ;                                                                                                                                                                          : HB> -256 AND ;                                                : 256/ 8 FOR 2/ NEXT ;                                          : C@W 1- @ 256/ ;                                               : C@ @ LB> ;                                                    : >< DUP 256* PUSH 256/ LB> POP XOR ;                           : +!   A! @A   + !A ;                                           : -!   A! @A   - !A ;                                           : XOR! A! @A XOR !A ;                                           : C! A! LB> @A HB> XOR !A ;                                                                                                     0 VALUE ?NONAME                                                 0 VALUE CFA                                                     0 QUAN  HERE                                                    0 VALUE SCRH                                                                                                                                                                                    0 VALUE CURRENT                                                 0 VALUE CONTEXT                                                 0 VALUE FIRST      (  BUFFERS)                                  0 VALUE LAST                                                                                                                    : ALLOT AT HERE +! ;                                            : ", C@ 1+ ALLOT ;                                              : C, HERE C! 1 ALLOT ;                                          : , DUP C, 256/ C, ;                                            : D, , , ;                                                      : BCOMPILE @R C, POP 1+ PUSH ;                                  : COMPILE  @R DUP !R+ , ;                                       : DCOMPILE  @R DUP !R+ , @R DUP !R+ , ;                                                                                                                                                                                                                                                                                         \ CHARS                                                         \ : CHARS 1+ SWAP DO I EMIT LOOP ;                              \ (")  ; (LP  (DO  (FOR                                         \  (OF  (BR   BRANCH  0BRANCH  -BRANCH  EXIT  R4TH>                                                                             \ IMMEDIATE  SMUDGE                                             : >MARK HERE COMPILE [ 0 , ] ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \ ERRORS                                                        : ?? A" Not Found" ;                                            : ?C STATE 0= A" COMPILING ?" ;                                 : ?E EXECUTING ?" ;                                             : ?= - A" UNPAIRED" ;                                           : TO: CREATE C, IMMEDIATE DOES> C@ ?' PUSH + POP ?, ?;            2 TO: TO   4 TO: AT                                           : ' ?' DROP ;                                                   : [TO:] TO: DOES> ' + , ; IMMEDIATE                                                                                               0 [TO:] [',]    2 [TO:] [TO]    4 [TO:] [AT]                                                                                                                                                                                                                  : FIND PUSH -1 ORDER# @T+ FOR @T+ @ SWAP NEXT                         DROP CONTEXT @   (FIND TO ?, ;                                                                                            \ DONE LIST                                                     C@     1+   [  ]    C,   ALIAS   ",   ALLOT                     \ TO DO LIST                                                    BLOCK  WORD  FIND   '     [']   ?'    ?,                         W"     B"    BZ"   C@T+   FOR   NEXT  B",  W",                 CREATE DOES> HEADER EXEC  CFA   VSWAP                                                                                                                                                                                                                                                                                                                                                          \ WQARY                                                         : ARY, HERE DUP PUSH 2- EXEC  POP - CLARY ;        ' WARY 2+ @  0 NM: EXEC ! ;M  1 NM: EXEC @ ;M            3 MAKER WQARY ARY,  HERE .                                                          10  WQARY  PQARY                                                HERE .                                                          : SHOW 10 FOR R@ PQARY . NEXT ;                                 : SETW 10 FOR R@ DUP TO PQARY NEXT ;                            \ VARIABLE COUNTING                                             \ : . S. COUNTING AT 1+ SPACE U. BLK . CSP . ; IMMEDIATE        \ : | 1 TO HEADER ;   ' >R ALIAS PUSH   ' R> ALIAS POP          \ | : ARY, HERE DUP PUSH 2- EXEC  POP - CLARY ;   ' WARY 2+ @   \ 0 NM: EXEC ! ;M   1 NM: EXEC @ ;M        |  3 MAKER WQARY ARY \ | 10 WQARY  ADR:  |  10 WQARY VAL:                            \   ' XOR 2+  ALIAS XOR!                                                                                                        \ TARGET  COMPILER  PROJECT                                     \ F83  VOCABULARY  TARGET  ALSO TARGET DEFINITIONS ALSO         : TAR ;            \ TARGET ADDRESS    LAST WORD ADDRESS         0 VALUE  T-OFFS   0 VALUE  T-ADR  0 VALUE T-LAST                VARIABLE T-H      0 VALUE  T-END  : T-HERE T-H @ T-OFFS - ;    : T-SPACE HERE TO T-ADR CLARY HERE TO T-END ;                   : T-ALLOT T-H +! ;   : T-C, T-H @1+! C! ;   : T-,  T-H @2+! ! ; : T-ORG T-ADR TUCK  T-H !  - TO T-OFFS ;    : T-!  T-OFFS + ! ; : T-@  T-OFFS + @ ;  : T-C! T-OFFS + C! ;  : T-C@ T-OFFS + C@ ; : T-STR, FOR COUNT T-C, NEXT DROP ;                             : T-",  COUNT DUP T-C, T-STR, ;                                                                                                 \  TEST   200 TSPACE  300 T-ORG  5 T,  300 T-@ .                                                                                                                                                                                                                                                                                                                                                                                                                 TH:        PUSH  SI              ;   F>C;                              MOV   SI,[BP]                                                       INC   BP                                                        INC   BP                                                        RET                                                  F:         JMP   SI              ;   F>C                        H:         DEC   BP              ;   :C>F                                  DEC   BP                                                        MOV   [BP],si                                        J4th:      POP   SI              ;   C>F                                NEXT                                                                                                                                                                                    PRUNE   ONLY        F83      \  -MAC                            MARKER -TARGET      VOCABULARY TCOMP     VOCABULARY KERNEL      KERNEL ALSO         TCOMP ALSO    TO TCOMP     VARIABLE T-LX   : OLDTC LIT LIT LIT [ ' [LIT] 2+ , ] ! ;                        \ : | 1 TO HEADER ; IMMEDIATE                                   \ : HEADERS 0 TO HEADER ;     IMMEDIATE                         \ : -HEADERS -1 TO HEADER ;   IMMEDIATE                           : "C  C" " WORD ", ;                                                                                                          : [[ POP >IN PUSH SWAP DUP IF 1- THEN PUSH PUSH ;               : ]] POP POP ?DUP IF 1- R@ TO >IN PUSH PUSH ;THEN RDROP PUSH ;  ' , 2+  ALIAS T-COMPILE      ' C, 2+ ALIAS T-BCOMPILE              ' HERE    ALIAS T-HERE        ' C,  ALIAS  T-C,                 ' CLARY   ALIAS T-CLARY       ' ,   ALIAS  T-,                  ' ALLOT   ALIAS T-ALLOT       ' !   ALIAS  T-!                              1 16 +THRU                                       \ RENAMED WORDS                                                    ' @       ALIAS T-@           ' C!  ALIAS  T-C!                 ' C@      ALIAS T-C@      ' HEADER  ALIAS  T-HEADER             ' STR,    ALIAS T-STR,        ' ",  ALIAS  T-",              (  ' ALIAS   ALIAS T-ALIAS)' IMMEDIATE ALIAS  T-IMMEDIATE          ' >MARK   ALIAS T->MARK  ' >MARK 2+ ALIAS  T->RELEASE           ' <MARK   ALIAS T-<MARK   ' ,<MARK  ALIAS  T-<RELEASE           : T-(( HEADER COMPILE [ ' DO: @ , ] , , ;                       ' [',]             ALIAS  T-[',]      IMMEDIATE                 ' TO               ALIAS  T-TO        IMMEDIATE                 ' AT               ALIAS  T-AT        IMMEDIATE                 ' [TO]             ALIAS  T-[TO]      IMMEDIATE                 ' [AT]             ALIAS  T-[AT]      IMMEDIATE                 ' T->RELEASE       ALIAS  T-THEN      IMMEDIATE                 ' \                ALIAS  T-\         IMMEDIATE                                                                              \ RENAMED WORDS 2                                                  ' T->MARK ' (BR           T-((  T-SKIP   IMMEDIATE              ' T->MARK ' (BR 2+        T-((  T-IF     IMMEDIATE              ' T->MARK ' (BR 4 +       T-((  T-IF#    IMMEDIATE              ' T-<RELEASE ' (BR        T-((  T-AGAIN  IMMEDIATE              ' T-<RELEASE ' (BR 2+     T-((  T-UNTIL  IMMEDIATE              ' CSP!                  ALIAS   T-CASE   IMMEDIATE              ' T->MARK    ' (OF        T-((  T-OF     IMMEDIATE              ' T->MARK      ' (FOR     T-((  T-FOR    IMMEDIATE              ' T->RELEASE ' (FOR 2+    T-((  T-NEXT   IMMEDIATE              ' T-<RELEASE ' (BR 2+ 2+  T-((  T-UNTIL# IMMEDIATE              ' -IF                   ALIAS   T-WHILE# IMMEDIATE              ' T-<MARK               ALIAS   T-BEGIN  IMMEDIATE              ' IF                    ALIAS   T-WHILE  IMMEDIATE                                                                                                                                           \ RENAMED WORDS 3                                               : T-ELSE T-[',] T-SKIP  SWAP T-[',] T-THEN ;   IMMEDIATE            ' T-ELSE              ALIAS   T-ENDOF      IMMEDIATE                                                                        : T-REPEAT  T-[',] T-AGAIN T-[',] T-THEN ;     IMMEDIATE        : T-ENDCASE  COMPILE DROP T-BEGIN SP CSP  -                       T-WHILE T-[',] T-THEN  T-REPEAT TO CSP ;   IMMEDIATE             ' F83      ALIAS T-F83    ' WORDS ALIAS T-WORDS                 ' [  ALIAS T-[  IMMEDIATE     ' ]   ALIAS  T-]                : T-ALIGNED HERE SWAP ALIGN TO HERE ;                          \ | : T-GET:  T-FOR ' 2+ DUP  R@ TO ADR: @  R@ TO VAL: T-NEXT ; \ : T-RESET: 10 T-FOR  R@ VAL:   R@ ADR:  ! T-NEXT ;            \ : T-SET:  T-FOR ' EXEC    R@ ADR: @ ! T-NEXT ;                \ 10 T-GET:  T-AGAIN T-SKIP T-UNTIL T-IF  T--UNTIL T--IF T-OF   \              ;M DO: [LIT]                                                                                                     \ RENAMED WORDS 4                                               \ ' ;M       ALIAS  T-;M       IMMEDIATE                        \ ' DO:      ALIAS  T-DO:                                       ' :        ALIAS  T-:                                           ' ;        ALIAS  T-;        IMMEDIATE                          ' '        ALIAS  T-'                                           ' LITERAL  ALIAS  T-LITERAL  IMMEDIATE                                                                                          \ : T-2*+JUMP 2* POP + PUSH ;                                   \ : T-MAKER CREATE NEGATE 3 + DUP C, T-2*+JUMP  , , ,  ' ,      \        DOES> COUNT T-HEADER T-2*+JUMP W, W, W, AT EXEC ;                                                                      : T-ONLY ORDER# TO 0  KERNEL DEFINITIONS   ALSO                                       TCOMP ALSO ;                                                                                                                                                              \ TARGET COMPILER                                                  : CODE, HEADER , ;          : ?HERE <% HERE %> U. ;             : DUO,  CODE, , ;           : TRIO, DUO, , ;                  |   32768     CONSTANT WRD    |   WRD 2/    CONSTANT CNST       |  WRD CNST + CONSTANT MSB    |  MSB NOT    CONSTANT -MSB       | : @LITERAL @ [',] LITERAL ; | : @, @ , ;                      | : CONST CREATE T-LX LINK+ , ,                                     DOES> 2+ DUP 1+! 2+ @LITERAL ;                              | : <F> <% CURRENT PUSH  TO TCOMP                                         CONST IMMEDIATE   POP TO CURRENT %> ;                 | : RDROPS CO RDROP ;                                           | : ?REL HERE SWAP  IF OVER 2+ - THEN ;                         | : A?REL DUP 1- C@ 1 OR $ E9 XOR 0= ?REL ;                                                                                                                                                                                                                    \ TARGET COMPILER 2                                               <%  ' IOV @                                                      1 NM: HERE 2+ SWAP! ;M                                          2 NM: @LITERAL ;M                                                HEADER JUSTIFY , , , 0 ,  IMMEDIATE                           %>                                                             | : DUPE? RDROPS RESCAN 0>=                                         IF 2DROP EXIT THEN STR ROT -                                    IF DROP  EXIT THEN  RDROP                                      2+ STR 0< A" DUP! " WRD OVER 2- XOR!  HERE   ;               |  : ?DEFWD IF @, ;THEN LINK+ ;                                                                                                 : C: CNST <F> ;         : +C: 2+ DUP C: ;                                                                                       : FW:  0 C: TO JUSTIFY DOES> 2+ DUP 1+! STR 0<  ?DEFWD ;                                                                       \ TARGET COMPILER 3                                              : ?FW JUSTIFY DUPE?  N>C SWAP                                       BEGIN OVER TO >< ?DUP -UNTIL DROP ;                                                                                                                           ASM                           : FL: 0 0 <F> TO JUSTIFY                                               DOES> 2+ DUP 1+! STR 0<                                        STATE IF ?DEFWD  EXIT THEN                                      IF @LITERAL EXIT THEN  ?E ' CASE                                 ['] JMP,  OF BCOMPILE [ $ E9 C, ]                                LINK+ ENDOF                                                    ['] CALL, OF BCOMPILE [ $ E8 C, ]                                LINK+ ENDOF                                                    [']   DW, OF LINK+ ENDOF                                        A" NO LBL OP!" ENDCASE ;   END-CODE                                                                                     \ TARGET COMPILER 4                                              | : ?FL JUSTIFY DUPE? BEGIN TO >< ?DUP                                WHILE A?REL REPEAT                                          ( !!! BLWORD DROP ) BLWORD DROP RDROP ;                                                                                      : L: ?FL HERE WRD <F> ;    IMMEDIATE                                                                                            : T-COMP, DUP 2+ PUSH STATE PUSH ]                                          PERFORM POP TO STATE POP ;                          : T-LABEL, POP  T-COMP, PUSH ;                                    | : ?TAB 52 OUTC < IF CR EXIT                                                      THEN 26 OUTC OVER MOD - SPACES  ;            | : VIEWER: : DOES> PUSH  CR T-LX @ SKIP BEGIN                    STR SWAP DUP @ R@ EXECUTE THEN ?DUP -UNTIL RDROP ;            | : ?NODE. 0= IF  DUP STR .H @ .H 4 - ?ID. ?TAB                               EXIT THEN DROP ;                                \ TARGET COMPILER 5                                             \  : DO' ' EXEC ; IMMEDIATE                                                                                                                                                                       VIEWER:  TLIST.  DUP XOR ?NODE. ;                               VIEWER:  UNDEF.  MSB AND ?NODE. ;                               VIEWER: UNUSED.  -MSB AND ?NODE. ;                              VIEWER: DEF.  MSB AND 0= ?NODE. ;                               VIEWER: USED.  -MSB AND 0= ?NODE. ;                                                                                             PRUNE                                                                                                                                                                                                                                                                                                                                                                                         \ PREDEFINED LABELS & WORDS                                      FL: _TOP    FL: <SWAP   FL: <USER   FL: <@USER   FL: <@EXEC-2   FL: <MAIN   FL: <WARY   FL: <PUSH   FL: <DROP    FL: <!USER     FL: <TRONX  FL: <EX     FL: <DBG    FW: ;code    FL: <!USER-1   FL: <VAR    FL: <VAR-1  FL: <VAR-2  FL: <VAR-3   FL: <@USER-1   FL: <CNST   FL: <CNST-1 FL: <CNST-2 FL: <CNST-3  FL: <ALI                   FL: <JSR-1  FL: <JSR-2  FL: <JSR-3   FL: <JSR-4     FL: <STOR   FL: <STOR-1 FL: <STOR-2 FL: <STOR-3  FL: <@REG      FL: <DOES   FL: <DOES-1 FL: <DOES-2 FL: <DOES-3  FL: <!REG     FL: <@USER-2 FL: _"1     FL: _"2                                                                                                 FL: _OF     FL: _JUMP   FL: _IF     FL: IF#     FL: ;#          FL: _-IF    FL: @IP#    FL: JUMP#   FL: _LIT    FL: EXEC#       FL: _EXIT   FL: _NEXT   FL: _EXEC   FL: NEXT#   FL: _DROP       FL: _PUSH   FL: RPUSH#  FL: OF#     FL: -IF#    FL: _ORIG1                                                                        : T:(  CREATE  , , DOES> T-COMP, PERFORM ;                      : T:-( <% T:( %> ;                                              ' T->RELEASE       ALIAS        THEN   IMMEDIATE                ' T->MARK       ' _JUMP   T:-(  SKIP   IMMEDIATE                ' T->MARK       ' _IF     T:-(  IF     IMMEDIATE                ' T->MARK       ' _-IF    T:-(  ~IF    IMMEDIATE                ' T-<RELEASE    ' _JUMP   T:-(  AGAIN  IMMEDIATE                ' T-<RELEASE    ' _IF     T:-(  UNTIL  IMMEDIATE                ' CSP!                  ALIAS   CASE   IMMEDIATE                ' T->MARK       ' _OF     T:-(  OF     IMMEDIATE                ' T-<MARK       ' _PUSH   T:-(  FOR    IMMEDIATE                ' T-<RELEASE    ' _NEXT   T:-(  NEXT   IMMEDIATE                ' T-<RELEASE    ' _-IF    T:-(  ~UNTIL IMMEDIATE                ' "C            ' _"1     T:-(  "      IMMEDIATE                ' "C            ' _"2     T:-(  ."     IMMEDIATE                                                                                ' -IF                   ALIAS   ~WHILE IMMEDIATE                ' T-<MARK               ALIAS   BEGIN  IMMEDIATE                ' IF                    ALIAS   WHILE  IMMEDIATE                                                                             : ELSE T-[',] SKIP  SWAP T-[',] THEN ;   IMMEDIATE                  ' ELSE            ALIAS   ENDOF      IMMEDIATE                                                                              : REPEAT  T-[',] AGAIN T-[',] THEN ;     IMMEDIATE              : ENDCASE T-[',] _DROP T-BEGIN SP CSP  -                          T-WHILE T-[',] THEN  T-REPEAT TO CSP ; IMMEDIATE                                                                              T-: ;M  T-LABEL, T-[',] _EXIT [',] [ ;  IMMEDIATE               T-: : ?FW T-: RECOVER T-[',] <JSR-1 ;                           T-: ; T-[',] ; RECOVER  [',] ;M ;  IMMEDIATE                                                                                                                                                    \ DEFINIG WORDS                                                 \   T-: DOES> [',] ;code  " <DOES-1 #, CALL,"                   \       "EVAL T-; IMMEDIATE                                                                                                        T-: T-CREATE   T-HEADER                                                        T-LABEL, T-[',] <VAR-1 T-;                                                                                       T-: T-VARIABLE T-CREATE 0 T-, T-;                                                                                               T-: T-CONSTANT T-HEADER                                                        T-LABEL, T-[',] <CNST-1 T-, T-;                                                                                  T-: T-USER     T-HEADER                                                        T-LABEL, T-[',] <USER   T-, T-;                                                                                                                                               \ DEFINIG WORDS     - CONTINUE 1                                                                                                   T-: T-VUSER    T-HEADER                                                        T-LABEL, T-[',] <@USER-1                                        T-LABEL, T-[',] <!USER  T-, T-;                                                                                  T-: T-QUSER    T-HEADER                                                        T-LABEL, T-[',] <@USER-2                                        T-LABEL, T-[',] <!USER-1                                        T-LABEL, T-[',] <USER     T-, T-;                                                                                T-: T-RVALUE   T-HEADER                                                        T-LABEL, T-[',] <@REG                                           T-LABEL, T-[',] <!REG  T-, T-;                                                                                                                                                \ DEFINIG WORDS     - CONTINUE 2                                                                                                   T-: T-VALUE    T-HEADER                                                        T-LABEL, T-[',] <CNST-2                                         T-LABEL, T-[',] <STOR-1   T-, T-;                                                                                T-: T-QUAN     T-HEADER                                                        T-LABEL, T-[',] <CNST-3                                         T-LABEL, T-[',] <STOR-2                                         T-LABEL, T-[',] <VAR-1    T-, T-;                                                                              T-: NM: NEGATE HERE SWAP  [',] [  [',] <DOES-1  ] \ !!! ]                  [AT] DOES> HERE 2- +! ] T-;                                                                                                                                                                                                                         \ DEFINIG WORDS     - CONTINUE 3                                                                                                   T-: T-RECOVER RECOVER T-;                                                                                                       T-: T-ALIAS  T-HEADER                                                        T-LABEL, T-[',] <ALI  T-, T-;                                                                                      T-: T-VECTOR T-HEADER                                                        T-LABEL, T-[',] <@EXEC-2                                        T-LABEL, T-[',] <STOR-1   T-, T-;                                                                                  T-: ;THEN   T-LABEL, T-[',] _EXIT                                           T-[',] THEN T-;         IMMEDIATE                                                                                  -MAC        \   !!!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \  TEST FOR NEXT : ALIAS DOES> CONSTANT VARIABLE USER ;          0 CONSTANT 0  1 CONSTANT 1  -1 CONSTANT -1 2 CONSTANT 2        : MAX INV OVER + INV -IF DROP EXIT THEN + ;  : 1+  1 + ;        : MIN INV OVER + INV -IF + EXIT THEN DROP ;  : 1- -1 + ;        : C@A+ @A DUP C!A+ 255 AND ; : @A+ @A DUP !A+ ;                 : ABS -IF INV 1+ THEN ;             : NIP OVER XOR XOR ;        : PERFORM @ IF EXEC EXIT THEN DROP ; : OR OVER INV AND XOR ;    : EMIT _EMIT PERFORM DROP ;               : ?2^ DUP 1- AND ;    : ?EMIT OVER INV + -IF DROP EMIT EXIT THEN DROP ;               : TYPE SWAP A! FOR C@A+ EMIT NEXT ; : CLIP PUSH MAX POP MIN ;   : KEY  DUP   _KEY PERFORM ;  : ?KEY DUP  _?KEY PERFORM ;        : SEARCH FOR @A+ OVER XOR IF DROP NEXT # 0 EXIT THEN RDROP A ;  : * A! 15 FOR +* NEXT DROP A ;                                  : *M A! 15 FOR +* NEXT PUSH DROP A POP ;                        : /MOD  FOR BEGIN OVER OVER + -IF DROP 2* NEXT EXIT THEN                OVER XOR  XOR INV 2* INV NEXT ;                                                                                          0 VALUE HANDLE                                                  0 VALUE AXREG   0 VALUE DXREG                                  : D0 0 0 ;  \ IO KERNEL FUNCTIONS                               : DO_DOS A PUSH DOS TO AXREG  A TO DXREG  POP A! ;              : DO_HANDLE PUSH HANDLE POP DO_DOS ;                            : HFSIZE D0 $ 4202 DO_HANDLE ;  : HCLOSE D0 $ 3E00 DO_HANDLE ;  : HREAD $ 3F00 DO_HANDLE ;        : HWRITE $ 4000 DO_HANDLE ;   : BLKPOS 1K M* $ 4200 DO_HANDLE ; : FOPEN A D0 $ 3D02 DO_DOS ;  : RBLK BLKPOS 1K HREAD ;          : WBLK BLKPOS 1K HWRITE ;     : F_KEY 1 SP@ OVER HREAD ;        : F_EMIT SP@ 1 HWRITE NIP ;   : STD_KEY  0 D0 $ 100 DO_DOS ;   : STD_EMIT  D0 $ 200 DO_DOS ;  : STD_?KEY  D0 D0 DO_DOS ;                                                                                                                                                                                                                                      