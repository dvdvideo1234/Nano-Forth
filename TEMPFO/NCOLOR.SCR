mov  ESP, Gods                                                      mov  ESI, Godd                                          cold:   call sense_                                                     jns  cold                                                   mov  ESI, Godd                                                  xor  EDI, EDI ; Cylinder 0 on top of Address 0                  mov  CL, byte ptr nc                                        @@:     push ECX                                                        call READ                                                       inc  cylinder                                                                                                                                                                                                                                                                                                                                                                           fifof: DROP                                                     graphic: ret                                                                                                                    switch:                                                             push ESI                                                        mov  ESI, frame                                                 push EDI                                                        mov  EDI, displ ; 0f2000000h eMonster Nvidia                    mov  ECX, hp*vp/2                                               rep movsd                                                       pop  EDI                                                        pop  ESI                                                        jmp  PAUSE                                                                                                                  show0: call show                                                    ret                                                         warm: DUP_                                                      start1: call ATI0                                                   call show0                                                      mov  forths, (forth1-forth0)/4                                  mov  macros, (macro1-macro0)/4                                  mov  EAX, 18                                                    call LOAD                                                       jmp  ACCEPT                                                                                                                 Gods equ 28000h*4 ; 0A0000h                                     Godd equ Gods-750*4                                             mains equ Godd-1500*4                                           maind equ mains-750*4                                                                                                                                                                                                                                           show: pop  screen                                                   DUP_                                                            xor  EAX, EAX                                                   call ACT                                                    @@:     call graphic                                                    call [screen]                                                   call SWITCH                                                     inc  EAX                                                        jmp  @b                                                 c_:  mov  ESI, Godd+4                                               ret                                                                                                                                                                                                                                                                                                                                                                                         unPAUSE: pop  EAX                                                   mov  ESP, [EAX]                                                 mov  me, EAX                                                    pop  ESI                                                        DROP                                                            ret                                                                                                                         LOAD: shl  EAX, 10-2                                                push EDI                                                        mov  EDI, EAX                                                   DROP                                                        INTER:  mov  EDX, [EDI*4]                                               inc  EDI                                                        and  EDX, 17o                                                   call spaces[EDX*4]                                              jmp  INTER                                              ALIGN 4                                                             me dd offset God                                            screen dd 0 ; logo                                                                                                              ROUND: call unPAUSE                                             God     dd 0 ; Gods-2*4                                             call unPAUSE                                                main    dd 0 ; mains-2*4                                            jmp  ROUND                                                                                                                  PAUSE: DUP_                                                         push ESI                                                        mov  EAX, me                                                    mov  [EAX], ESP                                                 add  EAX, 4                                                     jmp  EAX                                                                                                                    ACT: mov  EDX, maind-4                                              mov  [EDX], EAX                                                 mov  EAX, mains-4                                               pop  [EAX]                                                      sub  EAX, 4                                                     mov  [EAX], EDX                                                 mov  main, EAX                                                  DROP                                                            ret                                                         jump: pop  EDX                                                      add  EDX, EAX                                                   lea  EDX, [5+EAX*4+EDX]                                         add  EDX, [-4+EDX]                                              DROP                                                            jmp  EDX                                                    less: cmp  [ESI], EAX                                               js   @f ; flag nz                                                   xor  ECX, ECX ; flag z                                  @@: ret                                                         qIGNORE: test dword ptr [-4+EDI*4], -20o                            jnz  nul                                                            pop  EDI                                                        pop  EDI                                                nul: ret                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then: mov  list, ESP                                                mov  EDX, h                                                     sub  EDX, EAX                                                   mov  [-1+EAX], DL                                               DROP                                                            ret                                                                                                                         begin: mov  list, ESP                                                                                                           here: DUP_                                                          mov  EAX, h                                                     ret                                                                                                                         qlit: mov  EDX, h                                                   lea  EDX, [EDX-5]                                                                                                               cmp  list, EDX                                                  jnz  @f                                                         cmp  byte ptr [EDX], 0b8h                                       jnz  @f                                                             DUP_                                                            mov  EAX, list+4                                                mov  list, EAX                                                  mov  EAX, [1+EDX]                                               cmp  dword ptr [EDX-5], 89fc768dh ; dup                         jz   q1                                                             mov  h, EDX                                                     jmp  cdrop                                          q1:     add  h, -10 ; flag nz                                           ret                                                     @@: xor  EDX, EDX ; flag z                                          ret                                                         semi: mov  EDX, h                                                   sub  EDX, 5                                                     cmp  list, EDX                                                  jnz  @f                                                         cmp  byte ptr [EDX], 0e8h                                       jnz  @f                                                             inc  byte ptr [EDX] ; jmp                                       ret                                                     @@: mov  byte ptr [5+EDX], 0c3h ; ret                               inc  h                                                          ret                                                                                                                                                                                                                                                                                                                                                                                         comma: mov  ECX, 4                                              @@: mov  EDX, h                                                     mov  [EDX], EAX                                                 mov  EAX, [ESI] ; drop                                          lea  EDX, [EDX+ECX]                                             lea  ESI, [ESI+4]                                               mov  h, EDX                                                     ret                                                         comma1: mov  ECX, 1                                                 jmp  @b                                                     comma2: mov  ECX, 2                                                 jmp  @b                                                     comma3: mov  ECX, 3                                                 jmp  @b                                                                                                                                                                                     COMPILE: call [lit]                                                 mov  EAX, [-4+EDI*4]                                            and  EAX, -20o                                                  call mFIND                                                      mov  EAX, [macro2+ECX*4]                                        jmp  @b                                                     SHORT_: mov lit, offset alit                                        DUP_                                                            mov  EAX, [-4+EDI*4]                                            sar  EAX, 5                                                     ret                                                         NUM: mov lit, offset alit                                           DUP_                                                            mov  EAX, [EDI*4]                                               inc  EDI                                                        ret                                                         call_: mov  EDX, h                                                  mov  list, EDX                                                  mov  byte ptr [EDX], 0e8h                                       add  EDX, 5                                                     sub  EAX, EDX                                                   mov  [-4+EDX], EAX                                              mov  h, EDX                                                     DROP                                                            ret                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         qCOMPILE: call [lit]                                                mov  EAX, [-4+EDI*4]                                            and  EAX, -20o                                                  call mFIND                                                      jnz  @f                                                             DROP                                                            jmp  [macro2+ECX*4]                                     @@: call FIND                                                       mov  EAX, [forth2+ECX*4]                                    @@: jnz  ABORT                                                                                                                                                                                                                                                                                                                                                                                                                                                  cSHORT: call [lit]                                                  mov  EAX, [-4+EDI*4]                                            sar  EAX, 5                                                 @@: call literal                                                    DROP                                                            ret                                                         alit: mov lit, offset adup                                      literal: call qDUP                                                  mov  EDX, list                                                  mov  list+4, EDX                                                mov  EDX, h                                                     mov  list, EDX                                                  mov  byte ptr [EDX], 0b8h                                       mov  [1+EDX], EAX                                               add  h, 5                                                       ret                                                         cdup: mov  EDX, h                                                   mov  dword ptr [EDX], 89fc768dh                                 mov  byte ptr [4+EDX], 06                                       add  h, 5                                                       ret                                                         adup: DUP_                                                          ret                                                         var1: DUP_                                                          mov  EAX, [4+forth0+ECX*4]                                      ret                                                         variable: call forthd                                                                                                                                                                                                                                                                                                                                                                               mov  [forth2-forth0+ECX], offset var1                           inc  forths ; dummy entry for source address                    mov  [4+ECX], EDI                                               call macrod                                                     mov  [forth2-forth0+ECX], offset @f                             inc  macros                                                     mov  [4+ECX], EDI                                               inc  EDI                                                        ret                                                         @@: call [lit]                                                      mov  EAX, [4+macro0+ECX*4]                                      jmp  @f                                                     cNUM: call [lit]                                                    mov  EAX, [EDI*4]                                               inc  EDI                                                        jmp  @f                                                     cdrop: mov  EDX, h                                                  mov  list, EDX                                                  mov  byte ptr [EDX], 0adh ; lodsd                               inc  h                                                          ret                                                         qdup: mov  EDX, h                                                   dec  EDX                                                        cmp  list, EDX                                                  jnz  cdup                                                       cmp  byte ptr [EDX], 0adh                                       jnz  cdup                                                           mov  h, EDX                                                     ret                                                     sDEFINE: pop  aDEFINE                                               ret                                                                                                                         qdup: mov  EDX, h                                                   dec  EDX                                                        cmp  list, EDX                                                  jnz  cdup                                                       cmp  byte ptr [EDX], 0adh                                       jnz  cdup                                                           mov  h, EDX                                                     ret                                                     MACRO_: call sDEFINE                                            macrod: mov  ECX, macros                                            inc  macros                                                     lea  ECX, [macro0+ECX*4]                                        jmp  @f                                                     FORTH: call sDEFINE                                             forthd: mov  ECX, forths                                                                                                            inc  forths                                                     lea  ECX, [forth0+ECX*4]                                    @@: mov  EDX, [-4+EDI*4]                                            and  EDX, -20o                                                  mov  [ECX], EDX                                                 mov  EDX, h                                                     mov  [forth2-forth0+ECX], EDX                                   lea  EDX, [forth2-forth0+ECX]                                   shr  EDX, 2                                                     mov  last, EDX                                                  mov  list, ESP                                                  mov  lit, offset adup                                           test class, -1                                                  jz   @f                                                             jmp  [class]                                            @@: ret                                                         ABORT: mov  curs, EDI                                               shr  EDI, 10-2                                                  mov  blk, EDI                                               ABORT1: mov  ESP, Gods                                              mov  spaces+3*4, offset forthd                                  mov  spaces+4*4, offset qcompile                                mov  spaces+5*4, offset cnum                                    mov  spaces+6*4, offset cshort                                  mov  EAX, 57o ; ?                                               call ECHO_                                                      jmp  ACCEPT                                                                                                                                                                                                                                                                                                                                                                                 EX1: dec  words ; from keyboard                                     jz   @f                                                             DROP                                                            jmp  EX1                                                @@: call FIND                                                       jnz  ABORT1                                                         DROP                                                            jmp  [forth2+ECX*4]                                     execute: mov  lit, offset alit                                      DUP_                                                            mov  EAX, [-4+EDI*4]                                        ex2: and  EAX, -20o                                                 call FIND                                                       jnz  ABORT                                                          DROP                                                            jmp  [forth2+ECX*4]                                                                                                     mFIND: mov  ECX, macros                                             push EDI                                                        lea  EDI, [macro0-4+ECX*4]                                      jmp  @f                                                     FIND: mov  ECX, forths                                              push EDI                                                        lea  EDI, [forth0-4+ECX*4]                                  @@: std                                                             repne scasd                                                     cld                                                             pop  EDI                                                        ret                                                                                                                                                                                                                                                         \ NEW MAIN CICLE  ax-sp  sp-rp dx-top di-ar bx-w cx-?  bp-      \ >does >var >l >.br >sbr >0br >br >next >for >-br              L: >Z ( DOES)  CX POP,  SI PUSH,  CX SI MOV,                    L: >V ( VAR ) 2 /BX CX LEA,                                     L: >W ( WORD IN CX PUSH)    DX CX XCHG,                         L: >DIPC    AX SP XCHG,                                         L: >DUPC  CX PUSH,                                              L: >X ( XCHG STACKS)      AX SP XCHG,                           L: >N ( NOP / NEXT )  BX AX XCHG,  LODSW,  BX AX XCHG,                   1 #, BL TEST 0=, NOT,  IF,    BX DEC,  SI DEC,                 PAGE #, BH MOV,   THEN,                                 L: >G   0 /BX JMP,                                              L: >L ( LIT) AX SP XCHG, DX PUSH, AX SP XCHG,                   L: >_ ( DROP LIT)   0 /SI DX MOV,                               L: >.A ( SKIP ABSOLUTE BRANCH) 2 /SI SI LEA, >N JMP,                                                                            L: >S ( SUBROUTINE)  2 /SI BX LEA, BX PUSH,                     L: >A ( ABSOLUTE BRANCH)  0 /SI SI MOV, >N JMP,                 L: >R ( RELATIVE BRANCH) AX BX XCHG, LODSB,                                CBW, AX BX XCHG, BX SI ADD, >N JMP,                  L: >? ( 0 BRANCH)DX CX MOV, >R JCXZ,                            L: >.R ( SKIP RELATIVE BRANCH)  SI INC, >N JMP,                 L: >C ( NEXT)CX POP, >.R JCXZ, CX DEC,  CX PUSH, >R JMP,        L: >F ( FOR ) AX CX XCHG,   LODSB, CBW, AX CX XCHG,                   DX DEC, 0<, NOT,      IF, CX SI ADD,                      L: >P ( PUSH)    DX PUSH,   THEN,                               L: >D ( DROP) AX SP XCHG,  DX POP,  >X JMP,                     L: >-? ( -IF) DX DX OR, >R JNM, SI INC, >N JMP,                 L: >-C  DX NEG,         L: >+C  AX SP XCHG,  CX POP,                   CX DX ADD, DX PUSH,   1 #, DX RCR, >X JMP,               L: >DUP  DX CX MOV,     >DIPC JMP,                                                                                              L: >POP CX POP,         >W JMP,                                 L: >EX  CX POP, SI PUSH, CX PUSH,                               L: >RET  SI POP, >N JMP,   L: >-  DX NEG,                       L: >+ ( +   ) AX SP XCHG,  CX POP,  CX DX ADD,  >X JMP,         L: >| ( OR  ) AX SP XCHG,  CX POP,  CX DX OR,   >X JMP,         L: >& ( AND ) AX SP XCHG,  CX POP,  CX DX AND,  >X JMP,         L: >^ ( XOR ) AX SP XCHG,  CX POP,  CX DX XOR,  >X JMP,         L: >~ ( NOT ) DX INVERT,  >N JMP,                               L: >A    DI CX MOV, >W JMP,                                     L: >A!   DX DI MOV, >D JMP,                                     L: >@!A  DX 0 /DI XCHG, >N JMP,                                 L: >!A+  DX AX XCHG, STOSW, DX AX XCHG,  >D JMP,                L: >@A+   0 /DI CX MOV,  2 /DI DI LEA,   >W JMP,                L: >@A   0 /DI CX MOV,  >W JMP,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 