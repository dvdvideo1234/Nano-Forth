: OFF 0 SWAP! ;  : ON -1 SWAP! ;

: WAIT BIOS-KEY ;

' PUSH ALIAS >R  ' POP ALIAS R>

: TRACE ' TR EXEC -TR ; IMMEDIATE
' EXIT 4 + ALIAS BYE
: C" TO WORD 1+ C@ [',] LITERAL ; IMMEDIATE
: ['] ' ?C TO , AT , , ; IMMEDIATE
: 1Z, 0 C, ;
: ( C" ) WORD DROP ; IMMEDIATE
: LIKE @ HEADER , ; ' bl LIKE 1K 1024 ,
: NM: NEGATE HERE SWAP [TO] DOES> HERE 2- AT + ] ;
: M: HERE AT , [ ' WORD @ 1+ DUP @ + 2+ , ] [AT] DOES> ] ;
: JM: M: 5 HERE 2- AT + ;
: LBL: HEADER TO , [ ' INTERPRET 2+ @ , ] ] ;
' (" 4 + ALIAS ". ' (" 2+ ALIAS (".
' >MARK 4 + ALIAS 2Z,
AT FORTH 2- DUP @ SWAP 2- DUP @ SWAP 2- @ 3 MAKER MAKEVOC 2Z,
: WORDLIST VOCLINK LINK+ ;
: VOCABULARY TO FORTH MAKEVOC WORDLIST ;
MAKEVOC MACROS 2Z,
VOCABULARY HIDDEN
VOCABULARY ASSEMBLER
' bl @ 1 MAKER CONSTANT ,
' SCRH TO @ 2 MAKER VALUE ,
' INITW TO @ 2 MAKER VECTOR ,
: PREVIOUS AT ORDER# TO CONTEXT ;
: ALSO CONTEXT TO ORDER# ;
: DEFINITIONS CONTEXT TO CURRENT ;
: ONLY ORDER# OFF FORTH ALSO MACROS ALSO HIDDEN ALSO ;
ONLY
( FLOAD CONSTANT.TX )
1028 CONSTANT B/BUF
16 CONSTANT 1H
31 CONSTANT #LEN
64 CONSTANT 1L
' IOV @ ' SCRH TO @ 1- SWAP 1- SWAP 3 MAKER QUAN ,
' IOV @ 1 NM: AT 2+ ! ;M 2 NM: AT 2- @ ;M 3 MAKER STACK> ,
' IOV @ 1 NM: AT 2- ! ;M 2 NM: AT 2+ @ ;M 3 MAKER <STACK ,
' IOV @ 1 MAKER VARIABLE 2Z,
256 DUP <STACK ON; , ( "," FOR FAST COMPARING BELOW)
( FLOAD ENGINEM.TX )
0 VALUE MH
HERE C" ; STACK> MAC: ,
: EXECUTE PUSH ;
4 TO HEADER
TIB DUP <STACK MS ,
: SWAPH HERE MH TO HERE TO MH ;
LBL: >IO_POS TO >IN TO BLK TO INTERPRET [
LBL: _TEVAL 0 SWAP TIB - >IO_POS [
0 NM: BLK PUSH >IN PUSH EXECUTE POP TO >IN POP TO BLK ;M
HEADER LOAD , ] 0 >IO_POS [
' LOAD LIKE EVAL ] _TEVAL [
0 ( SAVE PLACE FOR "C"-STYLE STRING "LENGTH" PROCEDURE )
M: TO MH AT MACROS ! ;M
M: AT MACROS @ MH ;M
HEADER MAC , , ,
1 TO HEADER
: MAC> CREATE AT MAC: @ WORD COUNT STR, 1Z,
IMMEDIATE DOES>
AT DROP BLK >IN TO MS TO MS _TEVAL ; AT ALLOT
: >MAC SWAPH CURRENT PUSH TO MACROS EXEC POP TO CURRENT SWAPH ;
M: ['] MAC> >MAC ;M
' MAC: !
: ?MAC ' 2+ AT MAC TYPE ;
M: AT MAC: @ [',] C" AT MAC: ! MAC: AT MAC: ! ;M
' MAC: 2+ !
: -MAC TIB DUP AT MS TO ! 0 MPTR TO MAC ;
LBL: _EOL AT MS TO @ - 0; MS MS >IO_POS [
-MAC ' _EOL TO
( FLOAD MACRO.TX)
-MAC F83
MAC: BREAK. AT LEAVE;
MAC: HOLD TO HLD;
MAC: ?KEY TO EMIT;
MAC: J TO I;
MAC: K AT I;
MAC: PICK AT OVER;
MAC: HI TO B>W;
MAC: vUSER AT U0;
MAC: C@W TO C@;
MAC: ?BRANCH TO (BR;

MAC: HEAD HEADER;
MAC: PC2+ TO PC1+;
MAC: | 1 TO HEADER;
MAC: HEADERS 0 TO HEADER;
MAC: -HEADERS -1 TO HEADER;
MAC: AT-XY GOTOXY;
MAC: R>M AT 2/;
MAC: NOT -1 XOR;
MAC: LATEST AT CURRENT N>C;
( MAC: | NOOP; ( DONGLE)
( MAC: -HEADERS NOOP; ( DONGLE)
TO MAC: ! ;THEN EXIT THEN !   MAC: (BR (JUMP;
MAC: U/ U/MOD NIP ;           MAC: UMOD U/MOD DROP ;
         MAC: NEWH USING HACKNEW.SCR;
MAC: TC USING TCOMP.SCR;      MAC: ROOT USING 4TH.SCR 42 EDIT;
MAC: OLDF USING 4TH2.SCR;     MAC: KER USING KERNEL.SCR;
MAC: SRC USING SOURCE.SCR;    MAC: CLR USING COLOR.SCR;
MAC: TCN USING TCOMP2.SCR;    MAC: NCLR USING NCOLOR.SCR;

( COMPILE.TX)
: WITHIN OVER - PUSH - POP U< ; : ?BLK 1 -1 WITHIN ;
: CLARY HERE OVER ERASE ALLOT ;
: BARY HEADER TO , [ ' ORIGIN+ 2+ @ 2+ 2+ , ] CLARY ;
| : ARRAY CREATE , DOES> HEADER @ ,
HERE DUP PUSH 2- EXEC POP - CLARY ;
' ORIGIN+ 2+ @ 2+ ARRAY WARY
' ORIGIN+ 2+ @ ARRAY QARY
' ORIGIN+ 2+ @ 2- ARRAY 5ARY
' ORIGIN+ 2+ @ 2- 2- ARRAY TARY
' (". 'C ." ' (" 'C " ' ABORT 2+ 'C A"
: 'STR, DUP C, STR, ;
: ," TO WORD ", ;
: .( C" ) WORD ". ; IMMEDIATE
: 0" HERE 2+ [',] " 1Z, TO 1+ ; IMMEDIATE
( FLOAD CONTROL.TX)
: BLKNL 1L 1- OR 1+ ; : SKIPL -1 WORD DROP ;
: >HERE >MARK HERE ; : ,>MARK , TO >MARK ;
: <MARK HERE TO ON; ; : ,<MARK ON; , ;
' >MARK ' (BR (( SKIP ' >MARK ' (BR 2+ (( IF
' >MARK ' (BR 2+ 2+ (( -IF ' >MARK 2+ ALIAS THEN IMMEDIATE
: ELSE [',] SKIP SWAP [',] THEN ; IMMEDIATE
: \ BLK ?BLK IF >IN BLKNL TO >IN ELSE SKIPL THEN ; IMMEDIATE
' ,<MARK ' (BR (( AGAIN ' ,<MARK ' (BR 2+ (( UNTIL
' ,<MARK ' (BR 2+ 2+ (( -UNTIL ' -IF ALIAS -WHILE IMMEDIATE
' <MARK ALIAS BEGIN IMMEDIATE ' IF ALIAS WHILE IMMEDIATE
: REPEAT [',] AGAIN [',] THEN ; IMMEDIATE
' >HERE ' (DO (( DO ' >HERE ' (DO 2+ (( ?DO
' ,>MARK ' (LP (( LOOP ' ,>MARK ' (LP 2+ (( +LOOP
' >MARK ' (FOR (( FOR ' >MARK 2+ ' (FOR 2+ (( NEXT
 ' >MARK ' (OF (( OF
: CSP! CSP SP TO CSP ;
: ?CSP SP CSP - A" SP CHG!" TO CSP ;
' CSP! ALIAS CASE IMMEDIATE
' ELSE ALIAS ENDOF IMMEDIATE
: ENDCASE TO , DROP BEGIN SP CSP -
WHILE [',] THEN REPEAT TO CSP ; IMMEDIATE
\ FLOAD MAKERS.TX

WAIT

TO HIDDEN
( WITH-ADDR ROOTLINK_ADR WITH-ADDR - )
M: ( FIXLINX) BEGIN OVER TO >< ?DUP -UNTIL DROP ;M TO ON;
0 NM: AT CURRENT N>C OVER ( FIXLINX) [ >MARK TO ON; ] OFF ;M
1 NM: LINK+ ;M
2 MAKER RECUR ,
TO FORTH ( AT RECURCE - FIXLINX)
0 RECUR RECURCE HERE ON; ! ON; , IMMEDIATE
M: ON; PUSH ;M ( THIS IS "AT CO")
M: POP TO ON; AT , [ >MARK TO ON; ] TO ON; ;M
' RP 4 + @ ( v-- --v "DO" ">RELEASE" TRICKY WAY)
TO HIDDEN
HEADER CO , , ,  HERE 2- ON; !
TO FORTH
: ; [',] ; [TO] RECURCE
BEGIN AT ON; TO @ - WHILE ON; EXEC REPEAT ; IMMEDIATE
\
\ (CELL SIZE LEN STRING WORDS) STRINGS.TX STR TO STR=S!
\ STR (A - A' N)=WCOUNT TO STR ( A1 N A2 - ) = S!

WAIT

TO HIDDEN
 : S+C! ( C A - ) SWAP PUSH RP 1 ROT AT STR RDROP ;
 : "T SPTR STR ; ( -- A N ) : "N SPTR STR + STR ;
 : "DROP "T + TO SPTR ;
 : "POP ( A --) "T ROT SWAP CMOVE "DROP ;
 : "ALLOT ( N -- N A ) DUP 2+ AT SPTR TO @+! ;
 : "BUFF ( C N -- ) "ALLOT ! "T ROT FILL ;
: "PUSH ( A N -- ) "ALLOT OVER PUSH 2+ SWAP MOVE POP SPTR ! ;
 : "INS ( A N -- ) "T PUSH TO SPTR "PUSH POP SPTR +! ;
 | : ?INS" ( C -) CREATE C, DOES> PUSH SP POP C@ "INS DROP ;
 1 ?INS" C"INS 2 ?INS" W"INS
 \ AT STR ( A1 N A2 - ) = S+!

WAIT

: ">' SPTR "DROP COUNT OVER C! ; : NUP PUSH DUP POP ;
: 2REV DUP PUSH NUP REVERCE NUP REVERCE POP REVERCE ;
: "SWAP SPTR 2 FOR DUP STR + NEXT 2REV ;
: "CUT ( N --) "T ROT 2DUP 0 WITHIN -IF DROP DUP THEN ( A N N)
 -ROT PUSH 2DUP + 2- TO SPTR SWAP "PUSH POP SPTR @ - "T + ! ;
: "+ "SWAP "T "DROP "INS ; : '>" COUNT "PUSH ;
: =' C" " WORD '>" ">' ; : =" =' COUNT ;
: "EVAL "PUSH 0 1 "BUFF "+ "T DROP EVAL "DROP ;
: "OVER "N "PUSH ; : "NIP "SWAP "DROP ;
: "DEL SWAP "CUT "SWAP "CUT "DROP "+ ;
: "INSERT "CUT "SWAP "INS "+ ;
 0. "PUSH 0. "PUSH ( EMPTY STACK ELEMENT ) TO FORTH
\ BARY PAD SPACES <# #> # #S SIGN D# D.R D. .R . U.

WAIT

: DIG. ALPHA EMIT ; : PAD HERE 320 + ; : 1H. 1H 1- AND DIG. ;
 : SPACES TO MAX FOR SPACE NEXT ;
: 1B. 1H /MOD 1H. 1H. ;
: 1W. UNPACK 1B. 1B. ; : 1D. 1W. 1W. ; : .H 1W. SPACE ;
 : UM/MOD TUCK U/MOD PUSH SWAP TO U/MOD POP ;
 : 1# BASE UM/MOD AT HLD 1+! ;
 : S# 0 AT HLD !  BEGIN 1# 2DUP OR -UNTIL 2DROP ;
 : D# IF DABS S# -10 AT HLD 1+! EXIT THEN S# ;
 : D.R PUSH D# POP HLD - SPACES HLD FOR DIG. NEXT ;
: D. S>D 0 D.R SPACE ; : . S>D D. ; : .R PUSH S>D S>D POP D.R ;
: U.R 0 0 ROT D.R ; : UD. 0 0 D.R SPACE ; : UD.R 0 SWAP D.R ;
: #>" S# HLD "ALLOT ! "T CNTDO DO ALPHA I C! LOOP ; : U. 0 D. ;
: N>" 0 #>" ;
: A>" BASE PUSH HEX N>" N>" C" : C"INS "+ POP TO BASE ;
 \ FLOAD CMD.TX

WAIT

: "P>OS "PUSH bl C"INS "+ ">' SHELL ; : FED " EDT" '>" "P>OS ;
: REMOVE " DEL" '>" "P>OS ; | : CMD0 CREATE =" 'STR, ;
 | : CMD1N CMD0 DOES> '>" ?CS: A>" "T "DROP "P>OS ;
 | : CMD2" CMD0 DOES> '>" =" "P>OS ;
 CMD2" DOS COMMAND /C"
 CMD2" ED EDT"
 CMD2" DIR DIR /O"
 CMD2" DEL DEL"
 CMD2" CD CD"
 CMD2" RD RD"
 CMD2" REN REN" ( CMD1" CLS CLS")
 CMD2" ATEST ..\AFD.COM"
 CMD1N $TEST ..\AFD.COM"
 \ FLOAD LOCALS.TX

WAIT

 ONLY HIDDEN ALSO FORTH DEFINITIONS
 : /LOCALS COMPILE [ 1 FRM , ] ; IMMEDIATE
 TO HIDDEN
 : ?END >IN PUSH BLWORD COUNT 1- IF DROP -1 ELSE C@ THEN
 SWAP COUNT ROT SCAN 1+ DUP IF RDROP ELSE POP TO >IN THEN
 ;
 | : 1VAR DUP 1 9 WITHIN
 IF LIT [ 7 FRM @ , ] SWAP AT 2* NEGATE + ALIAS
 ELSE HEADER 2 FRM W, W, W, 2* NEGATE , IMMEDIATE THEN
 ;
 MAC CSP!
 MAC: LVAR ['] 1VAR >MAC ;
 \ FLOAD LOCALMAC.TXT

WAIT

 MAC: CADR 7 FRM @ SWAP 8 * -; MAC: SADR CADR 2+ , ];
 MAC: LOC/ [ 6 FRM , ]; MAC: /LOC [ 1 FRM , ];
 MAC: LADR CADR , ]; MAC: ^ADR CADR 4 + , ];
 MAC: L1@ [ 1 LADR; MAC: L1! [ 1 SADR; MAC: L1 [ 1 ^ADR;
 MAC: L2@ [ 2 LADR; MAC: L2! [ 2 SADR; MAC: L2 [ 2 ^ADR;
 MAC: L3@ [ 3 LADR; MAC: L3! [ 3 SADR; MAC: L3 [ 3 ^ADR;
 MAC: L4@ [ 4 LADR; MAC: L4! [ 4 SADR; MAC: L4 [ 4 ^ADR;
 MAC: L5@ [ 5 LADR; MAC: L5! [ 5 SADR; MAC: L5 [ 5 ^ADR;
 MAC: L6@ [ 6 LADR; MAC: L6! [ 6 SADR; MAC: L6 [ 6 ^ADR;
 MAC: L7@ [ 7 LADR; MAC: L7! [ 7 SADR; MAC: L7 [ 7 ^ADR;
 MAC: L8@ [ 8 LADR; MAC: L8! [ 8 SADR; MAC: L8 [ 8 ^ADR;
 | : (ARGS 1 769 LOC/
 BEGIN 0" /)" ?END DUP 2 < ( 0 WRD 1 /)
 WHILE IF L1@ IF 0 L1! ELSE 1 A" / >1 ?" THEN
 ELSE L2@ 1+ DUP L2! LVAR L1@
 IF L3 ELSE L4 THEN 1+!
 THEN
 REPEAT DROP L3@ L4@ PACK /LOC
 ;
 ?CSP TO MAC TO FORTH
 : LOCALS( (ARGS COMPILE [ 0 FRM , ] ,
 ; IMMEDIATE
 TO FORTH
 : ': HEADER DO: ;
 : : MAC CSP! : TO CO ?CSP TO MAC ;
 : :: : RECOVER ['] INTERPRET STR , @ , ;
 8 FRM ALIAS RETURN ( DEFINE RETURN PROCEDURE )
 : FUNC: : RECOVER ( MOVE H BACK 1 CELL TO CLEAR XNEST)
 C" ( BLWORD 1+ C@ =? (ARGS
 COMPILE [ 5 FRM @ , ] , TO CO
 RECOVER ( EXIT TOKEN ) COMPILE RETURN ;
 F83
 \ FLOAD MISC.TX

WAIT

 ( FIXES ON WORDS)
 : ALIGN 1- SWAP 1- OR 1+ ;
 : RESCAN       >IN -FIND ROT TO >IN  NIP 0;
      CR HERE ". ."   EXIST ! "  BLK 1- 0>= 0;
     ." IN BLK " BLK . ;

' RESCAN TO ?SAME
 M: DUP BEGIN COUNT -UNTIL 1- OVER - ;M ' MAC 4 + !

 : .. BASE PUSH DECIMAL .R POP TO BASE ;
 : HOME 0 0 GOTOXY ;
 : PAGE (CLSC HOME ;
 : ?EMIT DUP bl < IF DROP C" . THEN EMIT ;
 : ?TYPE FOR COUNT ?EMIT NEXT DROP ;
 : .LINE 3 .. SPACE 1L ?TYPE ;
 : .BLOCK CR SCR . 16 0 DO DUP I CR .LINE 1L + LOOP DROP ;
 : CTRL TO WORD 1+ C@ #LEN AND [',] LITERAL ; IMMEDIATE
 \ FLOAD DEBUG.TX

WAIT

 : TRACE ' TR EXEC -TR ; IMMEDIATE
 : WW DUP H. DUP @ DUP H. ?ID. 2+ ; ( DEBUG ONE ADDRESS)
 : DUMPLINE CR DUP 1W. 1H 2DUP FOR COUNT SPACE 1B.
 NEXT DROP SPACE C" [ EMIT ?TYPE C" ] EMIT ;
 : DUMP 1H ALIGN 1H / FOR DUP DUMPLINE 1H + NEXT DROP ;
 : WDS FOR CR WW NEXT ; : SEE ' 2+ 1H WDS ;
 \ : 'W DUP H. TO COUNT DUP H. ;
 \ : 'B DUP H. COUNT DUP H. ;
 \ : 'S DUP H. DUP ". COUNT + ;
 : ? @ . ;
 ( : #S. 2- OVER MAX ?DO I @ . -2 +LOOP ;)
 | : #S. CR ".
 [ MAC: -WCOUNT 2- DUP @ ;
 MAC: ?ITEMS TO DUP - NIP 2 / 1- ;
 MAC: ?STACK DUP 0< A" STACK UNDERFLOW" ;
 ] ?ITEMS ?STACK FOR -WCOUNT . NEXT DROP C" ] EMIT ;
 : S. S0 SP " S[ " #S. ; : R. R0 RP " R[ " #S. ;
 \ FLOAD BLOCKS.TX

WAIT

 0 NM: C@ PREV C! ;M DUP TO HIDDEN
 HEADER DISCARD , 0 C, TO FORTH
 HEADER UPDATE , -1 C,
 TO HIDDEN
 : EMPTY-BUFFERS FIRST LIMIT OVER - ERASE
 LIMIT FIRST DO -1 I 1+ ! B/BUF +LOOP ;
 EMPTY-BUFFERS
 | : +BUF B/BUF + DUP LIMIT = IF DROP FIRST THEN DUP PREV - ;
 | : BUFFER USE DUP PUSH BEGIN +BUF UNTIL TO USE R@ COUNT
 IF DUP TO COUNT TO NBLK 0 R@ C! THEN R@ TO PREV ! POP 3+ ;
 : SAVE-BUFFERS LIMIT FIRST ?DO I C@ IF I COUNT I TO XOR
 TO COUNT TO NBLK THEN B/BUF +LOOP ;
 : -USE SCRH 1+ IF SCRH CLOSE DROP -1 TO SCRH THEN ;
 TO FORTH
 : FLUSH SAVE-BUFFERS EMPTY-BUFFERS ;
 : USING FLUSH -USE FOPEN TO SCRH ;
 : BLOCK PUSH PREV DUP 1+ @ R@ - IF
 BEGIN +BUF 0= IF DROP R@ BUFFER DUP R@ NBLK 2- 1- THEN
 DUP 1+ @ R@ =
 UNTIL DUP TO PREV THEN
 AT DROP 3+ DERR ?DUP
 IF CR DISCARD ." I/O ERROR " . 0 TO DERR ABORT THEN ;
 ' BLOCK ' NBLK 10 + !

 : LIST DUP TO SCR BLOCK .BLOCK ;
 | : ?LD BLK 0= A" LOADING?" ;
 : --> ?LD 0 TO >IN BLK 1+ TO BLK ; IMMEDIATE
 : COPY SWAP BLOCK SWAP BLOCK 1K CMOVE UPDATE FLUSH ;
 : THRU 1+ SWAP DO I LOAD LOOP ;
 : +THRU BLK DUP D+ THRU ;
 \ FLOAD FORGET.TX

WAIT

\ FLOAD WORDS.TX

WAIT

 USING 4TH2.SCR
    FCLOSE

